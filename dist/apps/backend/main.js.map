{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./apps/backend/src/app/app.controller.ts","webpack:///./apps/backend/src/app/app.module.ts","webpack:///./apps/backend/src/app/app.service.ts","webpack:///./apps/backend/src/app/auth/auth-jwt.strategy.ts","webpack:///./apps/backend/src/app/auth/auth.controller.ts","webpack:///./apps/backend/src/app/auth/auth.module.ts","webpack:///./apps/backend/src/app/auth/auth.service.ts","webpack:///./apps/backend/src/app/auth/dto/user.get.2fa.qrcode.request.dto.ts","webpack:///./apps/backend/src/app/auth/dto/user.reset.2fa.secrect.request.dto.ts","webpack:///./apps/backend/src/app/auth/jwt-auth.guard.ts","webpack:///./apps/backend/src/app/auth/two.factor.authentication.service.ts","webpack:///./apps/backend/src/app/cms/banners/banners.controller.ts","webpack:///./apps/backend/src/app/cms/banners/banners.dto.ts","webpack:///./apps/backend/src/app/cms/banners/banners.filter.ts","webpack:///./apps/backend/src/app/cms/banners/banners.model.ts","webpack:///./apps/backend/src/app/cms/banners/banners.module.ts","webpack:///./apps/backend/src/app/cms/banners/banners.service.ts","webpack:///./apps/backend/src/app/cms/cms.controller.ts","webpack:///./apps/backend/src/app/cms/cms.module.ts","webpack:///./apps/backend/src/app/cms/cms.service.ts","webpack:///./apps/backend/src/app/decorators/request.ip.decorators.ts","webpack:///./apps/backend/src/app/error/enums/errorCodeEnum.ts","webpack:///./apps/backend/src/app/error/error.module.ts","webpack:///./apps/backend/src/app/error/error.service.ts","webpack:///./apps/backend/src/app/error/errorCode.ts","webpack:///./apps/backend/src/app/locale.ts","webpack:///./apps/backend/src/app/middleware/filter.request.middleware.ts","webpack:///./apps/backend/src/app/models/bank.entity.ts","webpack:///./apps/backend/src/app/models/bcOrders.ts","webpack:///./apps/backend/src/app/models/channel.locale.model.ts","webpack:///./apps/backend/src/app/models/channel.model.ts","webpack:///./apps/backend/src/app/models/deposit.order.model.ts","webpack:///./apps/backend/src/app/models/deposit.pending.order.model.ts","webpack:///./apps/backend/src/app/models/locale.model.ts","webpack:///./apps/backend/src/app/models/options.model.ts","webpack:///./apps/backend/src/app/models/payment.provider.bank.entity.ts","webpack:///./apps/backend/src/app/models/payment.provider.card.model.ts","webpack:///./apps/backend/src/app/models/payment.provider.channel.model.ts","webpack:///./apps/backend/src/app/models/payment.provider.entity.model.ts","webpack:///./apps/backend/src/app/models/payment.provider.usdt.protocol.model.ts","webpack:///./apps/backend/src/app/models/payment.system.locale.model.ts","webpack:///./apps/backend/src/app/models/payment.system.model.ts","webpack:///./apps/backend/src/app/models/test.entity.ts","webpack:///./apps/backend/src/app/models/usdtProtocol.ts","webpack:///./apps/backend/src/app/models/withdraw.order.model.ts","webpack:///./apps/backend/src/app/models/withdraw.pending.order.model.ts","webpack:///./apps/backend/src/app/notify/dto/notify.get.request.dto.ts","webpack:///./apps/backend/src/app/notify/notify.controller.ts","webpack:///./apps/backend/src/app/notify/notify.module.ts","webpack:///./apps/backend/src/app/notify/notify.service.ts","webpack:///./apps/backend/src/app/options/dto/options.update.request.dto.ts","webpack:///./apps/backend/src/app/options/dto/options.update.response.dto.ts","webpack:///./apps/backend/src/app/options/dto/update-option.dto.ts","webpack:///./apps/backend/src/app/options/options.controller.ts","webpack:///./apps/backend/src/app/options/options.module.ts","webpack:///./apps/backend/src/app/options/options.service.ts","webpack:///./apps/backend/src/app/payment/bank/bank.controller.ts","webpack:///./apps/backend/src/app/payment/bank/bank.module.ts","webpack:///./apps/backend/src/app/payment/bank/bank.service.ts","webpack:///./apps/backend/src/app/payment/bank/dto/bank.get.request.dto.ts","webpack:///./apps/backend/src/app/payment/betContruct/betConstruct.perform.service.ts","webpack:///./apps/backend/src/app/payment/betContruct/betConstruct.service.ts","webpack:///./apps/backend/src/app/payment/betContruct/betConsturct.module.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.check.withdraw.hash.in.param.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.check.withdraw.hash.out.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.check.withdraw.ipwhitelist.in.params.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.check.withdraw.ipwhitelist.out.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.checkclient.out.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.checkclient.request.params.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.deposit.in.params.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.deposit.out.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.deposit.request.params.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.withdraw.in.params.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.withdraw.out.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/bc.withdraw.request.params.ts","webpack:///./apps/backend/src/app/payment/betContruct/dto/create-bcorders.dto.ts","webpack:///./apps/backend/src/app/payment/channel/channel.controller.ts","webpack:///./apps/backend/src/app/payment/channel/channel.module.ts","webpack:///./apps/backend/src/app/payment/channel/channel.service.ts","webpack:///./apps/backend/src/app/payment/channel/dto/channel.get.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/depositable.channel.ts","webpack:///./apps/backend/src/app/payment/dto/depositable.paymentsystem.ts","webpack:///./apps/backend/src/app/payment/dto/depositable.usdtproto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.deposit.bycard.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.deposit.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.make.deposit.success.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.make.withdraw.success.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.manual.deposit.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.manual.deposit.result.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.manual.withdraw.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.manual.withdraw.result.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.test.deposit.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.test.deposit.result.dto.ts","webpack:///./apps/backend/src/app/payment/dto/payment.withdraw.request.dto.ts","webpack:///./apps/backend/src/app/payment/dto/withdrawable.banks.ts","webpack:///./apps/backend/src/app/payment/huobi/huobi.module.ts","webpack:///./apps/backend/src/app/payment/huobi/huobi.service.ts","webpack:///./apps/backend/src/app/payment/order/deposit-order/deposit.order.dto.ts","webpack:///./apps/backend/src/app/payment/order/deposit-order/deposit.order.module.ts","webpack:///./apps/backend/src/app/payment/order/deposit-order/deposit.order.service.ts","webpack:///./apps/backend/src/app/payment/order/deposit-pending-order/deposit.pending.order.dto.ts","webpack:///./apps/backend/src/app/payment/order/deposit-pending-order/deposit.pending.order.module.ts","webpack:///./apps/backend/src/app/payment/order/deposit-pending-order/deposit.pending.order.service.ts","webpack:///./apps/backend/src/app/payment/order/deposit/deposit.order.all.controller.ts","webpack:///./apps/backend/src/app/payment/order/deposit/deposit.order.all.module.ts","webpack:///./apps/backend/src/app/payment/order/deposit/deposit.order.all.service.ts","webpack:///./apps/backend/src/app/payment/order/withdraw-order/withdraw.order.dto.ts","webpack:///./apps/backend/src/app/payment/order/withdraw-order/withdraw.order.module.ts","webpack:///./apps/backend/src/app/payment/order/withdraw-order/withdraw.order.service.ts","webpack:///./apps/backend/src/app/payment/order/withdraw-pending-order/withdraw.pending.order.dto.ts","webpack:///./apps/backend/src/app/payment/order/withdraw-pending-order/withdraw.pending.order.module.ts","webpack:///./apps/backend/src/app/payment/order/withdraw-pending-order/withdraw.pending.order.service.ts","webpack:///./apps/backend/src/app/payment/order/withdraw/dto/get.withdraw.order.all.request.dto.ts","webpack:///./apps/backend/src/app/payment/order/withdraw/withdraw.order.all.controller.ts","webpack:///./apps/backend/src/app/payment/order/withdraw/withdraw.order.all.module.ts","webpack:///./apps/backend/src/app/payment/order/withdraw/withdraw.order.all.service.ts","webpack:///./apps/backend/src/app/payment/payment.check.service.ts","webpack:///./apps/backend/src/app/payment/payment.controller.ts","webpack:///./apps/backend/src/app/payment/payment.exception.ts","webpack:///./apps/backend/src/app/payment/payment.module.ts","webpack:///./apps/backend/src/app/payment/payment.service.ts","webpack:///./apps/backend/src/app/payment/paymentSystem/payment.system.module.ts","webpack:///./apps/backend/src/app/payment/paymentSystem/payment.system.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-bank/dto/payment.provider.bank.get.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-bank/dto/payment.provider.bank.update.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-bank/dto/payment.provider.bank.update.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-bank/dto/update-payment.provider.bank.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-bank/payment.provider.bank.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-bank/payment.provider.bank.module.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-bank/payment.provider.bank.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/dto/create-payment.provider.card.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/dto/payment.provider.card.create.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/dto/payment.provider.card.delete.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/dto/payment.provider.card.delete.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/dto/payment.provider.card.get.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/dto/payment.provider.card.update.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/dto/payment.provider.card.update.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/dto/update-payment.provider.card.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/payment.provider.card.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/payment.provider.card.module.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-card/payment.provider.card.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-channel/dto/payment.provider.channel.get.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-channel/dto/payment.provider.channel.update.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-channel/dto/payment.provider.channel.update.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-channel/dto/update-payment.provider.channel.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-channel/payment.provider.channel.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-channel/payment.provider.channel.module.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-channel/payment.provider.channel.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-entity/Payment.provider.entity.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-entity/dto/payment.provider.get.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-entity/dto/payment.provider.update.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-entity/dto/payment.provider.update.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-entity/dto/update-payment.provider.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-entity/payment.provider.entity.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-entity/payment.provider.entity.module.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-shared/payment.provider.shared.module.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-shared/payment.provider.shared.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-usdt-protocol/dto/payment.provider.usdt.proto.get.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-usdt-protocol/dto/payment.provider.usdt.proto.update.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-usdt-protocol/dto/payment.provider.usdt.proto.update.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-usdt-protocol/dto/update-payment.provider.usdt.proto.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-usdt-protocol/payment.provider.usdt.proto.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-usdt-protocol/payment.provider.usdt.proto.module.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider-usdt-protocol/payment.provider.usdt.proto.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/bisa/bisa.payment.provider.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/bisa/bisa.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/bisa/dto/bisa.deposit.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/bisa/dto/bisa.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/bisa/dto/bisa.deposit.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/bisa/dto/bisa.withdraw.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/bisa/dto/bisa.withdraw.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/bisa/dto/bisa.withdraw.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/card.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/configuration.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/d1f/d1f.payment.provider.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/d1f/d1f.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/d1f/dto/d1f.deposit.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/d1f/dto/d1f.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/d1f/dto/d1f.deposit.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/d1f/dto/d1f.withdraw.request.parapms.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/d1f/dto/d1f.withdraw.result.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/d1f/dto/d1f.withdraw.status.response.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/dbpay/dbpay.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/dto/card.deposit.bycard.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/dto/card.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/dto/card.withdraw.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/hengxin/dto/hengxin.deposit.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/hengxin/dto/hengxin.withdraw.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/hengxin/dto/hengxin.withdraw.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/hengxin/dto/hengxin.withdraw.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/hengxin/hengxin.payment.provider.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/hengxin/hengxin.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/jbp/dto/jbp.deposit.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/jbp/dto/jbp.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/jbp/dto/jbp.deposit.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/jbp/dto/jbp.withdraw.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/jbp/dto/jbp.withdraw.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/jbp/dto/jbp.withdraw.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/jbp/jbp.payment.provider.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/jbp/jbp.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/mszf/dto/mszf.deposit.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/mszf/dto/mszf.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/mszf/dto/mszf.deposit.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/mszf/dto/mszf.withdraw.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/mszf/dto/mszf.withdraw.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/mszf/dto/mszf.withdraw.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/mszf/mszf.payment.provder.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/mszf/mszf.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/payment.provider.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/payment.provider.deposit.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/payment.provider.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/payment.provider.module.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/payment.provider.withdraw.request.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/payment.provider.withdraw.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/payment.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/sxc/sxc.payment.provider.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/sxc/sxc.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/uzpay/dto/uzpay.deposit.request.param.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/uzpay/dto/uzpay.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/uzpay/dto/uzpay.deposit.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/uzpay/dto/uzpay.withdraw.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/uzpay/dto/uzpay.withdraw.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/uzpay/dto/uzpay.withdraw.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/uzpay/uzpay.payment.provider.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/uzpay/uzpay.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/xingchen/dto/xingchen.deposit.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/xingchen/dto/xingchen.deposit.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/xingchen/dto/xingchen.deposit.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/xingchen/dto/xingchen.withdraw.request.params.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/xingchen/dto/xingchen.withdraw.result.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/xingchen/dto/xingchen.withdraw.status.response.dto.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/xingchen/xingchen.payment.provider.controller.ts","webpack:///./apps/backend/src/app/payment/providers/payment-provider/xingchen/xingchen.payment.provider.service.ts","webpack:///./apps/backend/src/app/payment/usdtProtocol/dto/usdt.proto.get.request.dto.ts","webpack:///./apps/backend/src/app/payment/usdtProtocol/usdt.proto.controller.ts","webpack:///./apps/backend/src/app/payment/usdtProtocol/usdt.proto.module.ts","webpack:///./apps/backend/src/app/payment/usdtProtocol/usdt.proto.service.ts","webpack:///./apps/backend/src/app/runner/cms-queue/cms-queue.module.ts","webpack:///./apps/backend/src/app/runner/runner.module.ts","webpack:///./apps/backend/src/app/shared/dto/Search.dto.ts","webpack:///./apps/backend/src/app/shared/enums/SortDirectionEnum.ts","webpack:///./apps/backend/src/app/stream/configuration.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/create-bctoksport.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/create-bctoksportteam.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.build.candidateevent.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.build.candidateevent.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.build.streamstate.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.build.streamstate.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.build.streamstate.some.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.build.streamstate.some.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.create.candidateevent.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.create.candidateevent.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.delete.candidateevent.bytime.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.delete.candidateevent.bytime.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.delete.candidateevent.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.delete.candidateevent.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.fetchupdate.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.find.candidateteam.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.find.candidateteam.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.findall.candidateevent.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.findall.candidateevent.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.get.streamstate.some.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.get.streamstate.some.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.match.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.match.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.set.candidateevent.correct.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.set.candidateevent.correct.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.update.candidateevent.request.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/ksport.update.candidateevent.response.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/update-bctokposrtteam.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/dto/update-bctoksport.dto.ts","webpack:///./apps/backend/src/app/stream/ksport/entities/bc.ksport.entity.ts","webpack:///./apps/backend/src/app/stream/ksport/entities/bc.ksport.team.entity.ts","webpack:///./apps/backend/src/app/stream/ksport/ksport.controller.ts","webpack:///./apps/backend/src/app/stream/ksport/ksport.fetch.service.ts","webpack:///./apps/backend/src/app/stream/ksport/ksport.module.ts","webpack:///./apps/backend/src/app/stream/ksport/ksport.service.ts","webpack:///./apps/backend/src/app/stream/ksport/options/find.match.ksport.event.options.ts","webpack:///./apps/backend/src/app/stream/stream.controller.ts","webpack:///./apps/backend/src/app/stream/stream.exeception.ts","webpack:///./apps/backend/src/app/stream/stream.module.ts","webpack:///./apps/backend/src/app/stream/stream.service.ts","webpack:///./apps/backend/src/app/stream/tencent/dto/tencent.request.dto.ts","webpack:///./apps/backend/src/app/stream/tencent/dto/tencent.result.dto.ts","webpack:///./apps/backend/src/app/stream/tencent/enums/tencent.stream.state.enum.ts","webpack:///./apps/backend/src/app/stream/tencent/tencent.controller.ts","webpack:///./apps/backend/src/app/stream/tencent/tencent.module.ts","webpack:///./apps/backend/src/app/stream/tencent/tencent.service.ts","webpack:///./apps/backend/src/app/user/user.controller.ts","webpack:///./apps/backend/src/app/user/user.model.ts","webpack:///./apps/backend/src/app/user/user.module.ts","webpack:///./apps/backend/src/app/user/user.service.ts","webpack:///./apps/backend/src/environments/environment.ts","webpack:///./apps/backend/src/main.ts","webpack:///./libs/dto/src/index.ts","webpack:///./libs/dto/src/lib/stream.find.active.bybc.request.dto.ts","webpack:///./libs/dto/src/lib/stream.find.active.bybc.response.dto.ts","webpack:///./libs/dto/src/lib/stream.find.active.request.dto.ts","webpack:///./libs/dto/src/lib/stream.find.active.response.dto.ts","webpack:///./libs/dto/src/lib/user.request.dto.ts","webpack:///./libs/dto/src/lib/user.response.dto.ts","webpack:///./libs/enums/src/index.ts","webpack:///./libs/enums/src/lib/api-endpoint-description.enum.ts","webpack:///./libs/enums/src/lib/api-params.enum.ts","webpack:///./libs/enums/src/lib/api-paths.enum.ts","webpack:///./libs/enums/src/lib/api-tags.enum.ts","webpack:///./libs/enums/src/lib/payment.enum.ts","webpack:///./libs/enums/src/lib/stream.enum.ts","webpack:///external \"@nestjs/bull\"","webpack:///external \"@nestjs/common\"","webpack:///external \"@nestjs/config\"","webpack:///external \"@nestjs/core\"","webpack:///external \"@nestjs/passport\"","webpack:///external \"@nestjs/platform-express\"","webpack:///external \"@nestjs/schedule\"","webpack:///external \"@nestjs/sequelize\"","webpack:///external \"@nestjs/swagger\"","webpack:///external \"@sindresorhus/fnv1a\"","webpack:///external \"bcrypt\"","webpack:///external \"bull\"","webpack:///external \"class-transformer\"","webpack:///external \"class-validator\"","webpack:///external \"constants\"","webpack:///external \"crypto\"","webpack:///external \"express\"","webpack:///external \"fuse.js\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"libphonenumber-js\"","webpack:///external \"md5\"","webpack:///external \"mobile-detect\"","webpack:///external \"moment\"","webpack:///external \"moment-timezone\"","webpack:///external \"multer\"","webpack:///external \"nest-winston\"","webpack:///external \"numeral\"","webpack:///external \"otplib\"","webpack:///external \"passport-jwt\"","webpack:///external \"path\"","webpack:///external \"qrcode\"","webpack:///external \"qs\"","webpack:///external \"request-ip\"","webpack:///external \"sequelize\"","webpack:///external \"sequelize-typescript\"","webpack:///external \"tencentcloud-sdk-nodejs\"","webpack:///external \"tslib\"","webpack:///external \"uuid\"","webpack:///external \"winston\""],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  constructor() {}\n}\n","import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport {\n  utilities as nestWinstonModuleUtilities,\n  WinstonModule,\n} from 'nest-winston';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { Sequelize } from 'sequelize-typescript';\nimport * as winston from 'winston';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { BannersModel } from './cms/banners/banners.model';\nimport { CmsModule } from './cms/cms.module';\nimport { RunnerModule } from './runner/runner.module';\n\nimport { AuthModule } from './auth/auth.module';\nimport { PaymentModule } from './payment/payment.module';\nimport { StreamModule } from './stream/stream.module';\n\n///////////////////////////////////////////////////////////////////////////////////\n// IMPORT MODEL\n////////////////////////////////////////////////////////////////////////////////////\nimport { UserModel } from './user/user.model';\nimport { BankModel } from './models/bank.entity';\nimport { ChannelLocaleModel } from './models/channel.locale.model';\nimport { PaymentProviderChannelModel } from './models/payment.provider.channel.model';\nimport { ChannelModel } from './models/channel.model';\nimport { DepositOrderModel } from './models/deposit.order.model';\nimport { DepositPendingOrderModel } from './models/deposit.pending.order.model';\nimport { LocaleModel } from './models/locale.model';\nimport { PaymentProviderBankModel } from './models/payment.provider.bank.entity';\nimport { PaymentProviderEntityModel } from './models/payment.provider.entity.model';\nimport { PaymentSystemLocaleModel } from './models/payment.system.locale.model';\nimport { PaymentSystemModel } from './models/payment.system.model';\nimport { WithdrawOrderModel } from './models/withdraw.order.model';\nimport { WithdrawPendingOrderModel } from './models/withdraw.pending.order.model';\nimport { BCToKSportModel } from './stream/ksport/entities/bc.ksport.entity';\nimport { BCToKSportTeamModel } from './stream/ksport/entities/bc.ksport.team.entity';\nimport { BullModule } from '@nestjs/bull';\nimport { BcOrdersModel } from './models/bcOrders';\nimport { TestModel } from './models/test.entity';\nimport { OptionsModel } from './models/options.model';\nimport { PaymentProviderCardModel } from './models/payment.provider.card.model';\nimport { UsdtProtocolModel } from './models/usdtProtocol';\nimport { PaymentProviderUsdtProtocolModel } from './models/payment.provider.usdt.protocol.model';\nimport { OptionsModule } from './options/options.module';\nimport { NotifyModule } from './notify/notify.module';\n\n@Module({\n  imports: [\n    WinstonModule.forRoot({\n      level: 'debug',\n      format: winston.format.combine(\n        winston.format.errors({ stack: true }),\n        winston.format.json(),\n        winston.format.timestamp(),\n        nestWinstonModuleUtilities.format.nestLike()\n      ),\n      defaultMeta: { service: 'backend' },\n      transports: [new winston.transports.Console()],\n    }),\n    BullModule.forRoot({\n      redis: {\n        host: process.env.REDIS_HOST,\n        port: Number(process.env.REDIS_PORT),\n        password: process.env.REDIS_PASSWORD,\n      },\n    }),\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    ScheduleModule.forRoot(),\n    SequelizeModule.forRoot({\n      dialect: 'postgres',\n      dialectOptions: {\n        useUTC: false,\n      },\n      logging: false,\n      timezone: '+08:00',\n      host: process.env.DB_HOST,\n      port: Number(process.env.DB_PORT),\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      models: [\n        UserModel,\n        PaymentSystemModel,\n        ChannelModel,\n        BankModel,\n        PaymentProviderEntityModel,\n        BCToKSportModel,\n        BCToKSportTeamModel,\n        LocaleModel,\n        DepositPendingOrderModel,\n        DepositOrderModel,\n        WithdrawPendingOrderModel,\n        WithdrawOrderModel,\n        PaymentProviderChannelModel,\n        PaymentProviderBankModel,\n        PaymentProviderCardModel,\n        BCToKSportModel,\n        BCToKSportTeamModel,\n        BannersModel,\n        PaymentSystemLocaleModel,\n        ChannelLocaleModel,\n        BcOrdersModel,\n        OptionsModel,\n        UsdtProtocolModel,\n        PaymentProviderUsdtProtocolModel,\n        TestModel,\n      ],\n    }),\n    AuthModule,\n    PaymentModule,\n    StreamModule,\n    CmsModule,\n    RunnerModule,\n    OptionsModule,\n    NotifyModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule implements NestModule {\n  constructor(private sequelize: Sequelize) {}\n\n  configure(consumer: MiddlewareConsumer) {}\n}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to backend!' };\n  }\n}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy, VerifiedCallback } from 'passport-jwt';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthJwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.SECRET_KEY,\n    });\n  }\n\n  async validate(payload: any, done: VerifiedCallback) {\n    const user = await this.authService.validateUser(payload);\n    if (!user) {\n      return done(\n        new HttpException('Unauthorized access', HttpStatus.UNAUTHORIZED),\n        false,\n      );\n    }\n\n    return done(null, user, payload.iat);\n  }\n}\n","import {\n  Body,\n  Controller,\n  HttpException,\n  HttpStatus,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n  Request,\n  Res,\n  Header,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { LoginDto, Payload, ResetPassDto, UserTokenDto } from '@workspace/dto';\nimport {\n  apiEndpointDecriptionEnum,\n  apiPathsEnum,\n  apiTagsEnum,\n} from '@workspace/enums';\nimport { AuthService } from './auth.service';\nimport { UserService } from '../user/user.service';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { ResetUserTwoFactorAuthSecrectRequestDto } from './dto/user.reset.2fa.secrect.request.dto';\nimport * as numeral from 'numeral';\nimport { GetUserTwoFactorAuthQrCodeRequestDto } from './dto/user.get.2fa.qrcode.request.dto';\n\n@Controller(apiPathsEnum.auth)\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  @Post(apiPathsEnum.login)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.userLogin })\n  @ApiTags(apiTagsEnum.authentication)\n  async login(@Body() loginDto: LoginDto) {\n    const user = await this.userService.findByLogin(loginDto);\n\n    const result = await this.authService.isTwoFactorAuthenticationCodeValid(\n      user.id,\n      loginDto.twoFactorAuthenticationCode\n    );\n\n    if (!result) {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n\n    const payload: Payload = {\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n    };\n    const token = await this.authService.signPayload(payload);\n    return { token };\n  }\n\n  @Post(apiPathsEnum.create)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.userCreate })\n  @ApiTags(apiTagsEnum.authentication)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async create(@Query() userDto: UserTokenDto) {\n    console.log(userDto.token);\n    console.log(process.env.SECRET_TOKEN);\n    const checkToken = UserTokenDto.checkToken(userDto.token);\n    if (checkToken) {\n      const sanitizeToken = this.userService.sanitizeToken(\n        userDto,\n        this.authService.generateTwoFactorAuthenticationSecret()\n      );\n\n      const user = await this.userService.create(sanitizeToken);\n      const payload: Payload = {\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n      };\n      const token = await this.authService.signPayload(payload);\n      return { token };\n    }\n    return new HttpException('Unauthorized request', HttpStatus.FORBIDDEN);\n  }\n\n  @Put(apiPathsEnum.reset)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.userResetPass })\n  @ApiTags(apiTagsEnum.authentication)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async reset(@Body() request: ResetPassDto, @Request() req) {\n    return this.authService.resetPass(request, req.user);\n  }\n\n  @Post(apiPathsEnum.resetTwoFactorAuthSecret)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.userResetTwoFactorAuthSecret,\n  })\n  @ApiTags(apiTagsEnum.authentication)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Header('content-type', 'image/png')\n  async resetTwoFactorAuthSecret(\n    @Body() request: ResetUserTwoFactorAuthSecrectRequestDto,\n    @Res() response: Response\n  ) {\n    const result = this.authService.resetTwoFactorAuthSecrect(\n      request.userId,\n      response\n    );\n    if (!result) {\n      response.status(HttpStatus.OK).send();\n    }\n  }\n\n  @Post(apiPathsEnum.getTwoFactorAuthQrCode)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.userGetTwoFactorAuthQrCode,\n  })\n  @ApiTags(apiTagsEnum.authentication)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Header('content-type', 'image/png')\n  async getTwoFactorAuthQrCode(\n    @Body() request: GetUserTwoFactorAuthQrCodeRequestDto,\n    @Res() response: Response\n  ) {\n    const result = await this.authService.getTwoFactorAuthQrCode(\n      request.userId,\n      response\n    );\n\n    if (!result) {\n      response.status(HttpStatus.OK).send();\n    }\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AuthJwtStrategy } from './auth-jwt.strategy';\nimport { TwoFactorAuthenticationService } from './two.factor.authentication.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [UserModule, ConfigModule.forRoot({})],\n  controllers: [AuthController],\n  providers: [AuthService, AuthJwtStrategy, TwoFactorAuthenticationService],\n})\nexport class AuthModule {}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { Payload, ResetPassDto } from '@workspace/dto';\nimport { sign } from 'jsonwebtoken';\nimport { UserModel } from '../user/user.model';\nimport { UserService } from '../user/user.service';\nimport { TwoFactorAuthenticationService } from './two.factor.authentication.service';\nconst bcrypt = require('bcrypt');\nimport { Response } from 'express';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private twoFactorAuthenticationService: TwoFactorAuthenticationService\n  ) {}\n\n  async signPayload(payload: Payload) {\n    return sign(payload, process.env.SECRET_KEY, { expiresIn: '12h' });\n  }\n\n  async validateUser(payload: Payload) {\n    return this.userService.findByPayload(payload);\n  }\n\n  async resetPass(request: ResetPassDto, user: UserModel) {\n    if (request.password.length < 6) {\n      throw new HttpException(\n        'Password Length should be equals than 6.',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    if (request.password !== request.confirmPassword) {\n      throw new HttpException(\n        'Password does not match the confirm password.',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    user.password = await bcrypt.hash(request.password, 10);\n\n    await user.save();\n\n    return true;\n  }\n\n  generateTwoFactorAuthenticationSecret() {\n    return this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret();\n  }\n\n  async resetTwoFactorAuthSecrect(userId: string, stream: Response) {\n    const user = await this.userService.findById(userId);\n    if (!user) {\n      return false;\n    }\n\n    const {\n      secret,\n      otpauthUrl,\n    } = await this.twoFactorAuthenticationService.generateUserTwoFactorAuthenticationSecret(\n      user\n    );\n\n    user.twoFactorAuthenticationSecret = secret;\n    await user.save({});\n\n    if (!stream) {\n      return false;\n    }\n\n    await this.twoFactorAuthenticationService.pipeQrCodeStream(\n      stream,\n      otpauthUrl\n    );\n    return true;\n  }\n\n  async getTwoFactorAuthQrCode(userId: string, stream: Response) {\n    const user = await this.userService.findById(userId);\n    if (!user) {\n      return false;\n    }\n\n    const otpauthUrl = this.twoFactorAuthenticationService.getQrCodeUrl(user);\n    if (!otpauthUrl) {\n      return false;\n    }\n\n    if (!stream) {\n      return false;\n    }\n\n    await this.twoFactorAuthenticationService.pipeQrCodeStream(\n      stream,\n      otpauthUrl\n    );\n    return true;\n  }\n\n  async isTwoFactorAuthenticationCodeValid(\n    userId: string,\n    twoFactorAuthenticationCode: string\n  ) {\n    const user = await this.userService.findById(userId);\n    if (!user) {\n      return false;\n    }\n\n    return this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n      twoFactorAuthenticationCode,\n      user\n    );\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class GetUserTwoFactorAuthQrCodeRequestDto {\n  @ApiProperty()\n  @IsUUID()\n  @IsNotEmpty()\n  userId: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class ResetUserTwoFactorAuthSecrectRequestDto {\n  @ApiProperty()\n  @IsUUID()\n  @IsNotEmpty()\n  userId: string;\n}\n","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n","import { Injectable } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { authenticator } from 'otplib';\nimport { ConfigService } from '@nestjs/config';\nimport { UserModel } from '../user/user.model';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor(\n    private userService: UserService,\n    private configService: ConfigService\n  ) {}\n\n  public generateTwoFactorAuthenticationSecret() {\n    const secret = authenticator.generateSecret();\n\n    return secret;\n  }\n\n  public async generateUserTwoFactorAuthenticationSecret(user: UserModel) {\n    const secret = authenticator.generateSecret();\n    const otpauthUrl = authenticator.keyuri(\n      user.email,\n      this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME'),\n      secret\n    );\n\n    return { secret, otpauthUrl };\n  }\n\n  public getQrCodeUrl(user: UserModel) {\n    return authenticator.keyuri(\n      user.email,\n      this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME'),\n      user.twoFactorAuthenticationSecret\n    );\n  }\n\n  public async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    return toFileStream(stream, otpauthUrl);\n  }\n\n  public isTwoFactorAuthenticationCodeValid(\n    twoFactorAuthenticationCode: string,\n    user: UserModel\n  ) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret,\n    });\n  }\n}\n","import { Controller, HttpStatus, Post, UploadedFile, UseInterceptors, Get, Param, Res, Body } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiConsumes, ApiOperation, ApiTags, ApiBody } from '@nestjs/swagger';\n\nimport { apiEndpointDecriptionEnum, apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { CreateBannerFileDto, BannerFileDto, BannersGetDto } from './banners.dto';\nimport { imageFileFilter, editFileName } from './banners.filter';\nimport { BannersService } from './banners.service';\nimport { diskStorage } from 'multer';\n\n@ApiTags(apiTagsEnum.cmsEndpoints)\n@Controller(apiPathsEnum.banners)\nexport class BannersController {\n  constructor(\n    private bannersService: BannersService\n  ) {\n  }\n\n  @Post(apiPathsEnum.uploadHeroBanner)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.cmsHeroBannerUpload })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Banner Picture',\n    type: BannerFileDto\n  })\n  @UseInterceptors(FileInterceptor('image', {\n    fileFilter: imageFileFilter,\n    storage: diskStorage({\n      destination: './uploads/assets/banners/hero',\n      filename: editFileName\n    })\n  }))\n\n  async uploadHeroBanner(@Body() fileType: string, @UploadedFile() banner) {\n    return this.bannersService.saveBanner(banner, fileType);\n  }\n\n  @Post(apiPathsEnum.createHeroBanner)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.cmsHeroBannerCreate })\n  @UseInterceptors(FileInterceptor('image', {\n    fileFilter: imageFileFilter,\n    storage: diskStorage({\n      destination: './uploads/assets/banners/hero',\n      filename: editFileName\n    })\n  }))\n  @ApiConsumes('multipart/form-data')\n  async createHeroBanner(@UploadedFile() file, @Body()request: CreateBannerFileDto) {\n    return this.bannersService.createBanner(request, file);\n  }\n\n  @Get('hero')\n  getImage()  {\n    return this.bannersService.getAll()\n  }\n\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsBoolean, IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class BannerFileDto {\n  @ApiProperty({ type: 'string', format: 'binary' })\n  image: any;\n}\n\nexport class BannersGetDto {\n  @ApiProperty()\n  image: string\n}\n\n\n\nexport class CreateBannerDto {\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  type: string\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  banner: string\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  title: string\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  order: number\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  buttonText: string\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  buttonColor: string\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  positionX: number\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  positionY: number\n\n  @ApiProperty()\n  @IsNotEmpty()\n  enabled: boolean\n}\n\nexport class CreateBannerFileDto extends CreateBannerDto {\n\n  @ApiProperty({ type: 'string', format: 'binary' })\n  image: any;\n}\n","import { HttpException, HttpStatus } from '@nestjs/common';\nimport { extname } from 'path';\n\nexport const imageFileFilter = (req, file, callback) => {\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\n    return callback(\n      new HttpException('Only image files are allowed!', HttpStatus.BAD_REQUEST),\n      false,\n    );\n  }\n  callback(null, true);\n};\n\nexport const editFileName = (req, file, callback) => {\n  const name = file.originalname.split('.')[0];\n  const fileExtName = extname(file.originalname);\n  const randomName = Date.now();\n  callback(null, `${randomName}${fileExtName}`);\n};\n","import { Column, DataType, Table, Model } from 'sequelize-typescript';\n\n@Table({ tableName: 'banners' })\nexport class BannersModel extends Model<BannersModel> {\n  @Column({\n    type: DataType.INTEGER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: false\n  })\n  type: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true\n  })\n  banner: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false\n  })\n  title: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: true\n  })\n  order: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false\n  })\n  url: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false\n  })\n  buttonText: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true\n  })\n  buttonColor: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: true\n  })\n  positionX: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: true\n  })\n  positionY: string;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false\n  })\n  enabled: string;\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BannersController } from './banners.controller';\nimport { BannersModel } from './banners.model';\nimport { BannersService } from './banners.service';\n\n\n@Module({\n  imports: [SequelizeModule.forFeature([BannersModel])],\n  controllers: [BannersController],\n  providers: [BannersService]\n})\nexport class BannersModule {}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { CreateBannerFileDto } from './banners.dto';\nimport { BannersModel } from './banners.model';\n\n@Injectable()\nexport class BannersService {\n  constructor(\n    @InjectModel(BannersModel) private bannerRepository: typeof BannersModel\n  ) {\n  }\n  async getAll() {\n    return this.bannerRepository.findAll({\n      where: {\n        type: 'hero'\n      }\n    });\n  }\n\n  saveBanner(banner, fileName) {\n    try {\n      const response = {\n        originalname: banner.originalname,\n        path: banner.path\n      };\n\n      return {\n        status: HttpStatus.OK,\n        message: 'Banner uploaded successfully!',\n        data: response\n      };\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async createBanner(request: CreateBannerFileDto, banner) {\n    try {\n      const checkForBanner = await this.bannerRepository.findOne({\n        where: {\n          title: request.title\n        }\n      });\n      if (checkForBanner) {\n        return new HttpException('Banner Already Exists!', HttpStatus.CONFLICT);\n      }\n\n      return await this.bannerRepository.create({\n        type: request.type,\n        banner: request.banner,\n        title: request.title,\n        order: request.order,\n        url: banner.path,\n        buttonText: request.buttonText,\n        buttonColor: request.buttonColor,\n        positionX: request.positionX,\n        positionY: request.positionY,\n        enabled: request.enabled\n      });\n\n    } catch (error) {\n      return error.message;\n    }\n  }\n}\n","import { Controller } from '@nestjs/common';\n\n@Controller('cms')\nexport class CmsController {}\n","import { Module } from '@nestjs/common';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { CmsController } from './cms.controller';\nimport { CmsService } from './cms.service';\nimport { BannersModule } from './banners/banners.module';\n\n@Module({\n  controllers: [CmsController],\n  providers: [CmsService],\n  imports: [\n    BannersModule,\n    MulterModule.register({\n      dest: './uploads'\n    })\n  ]\n})\nexport class CmsModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CmsService {}\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport * as requestIp from 'request-ip';\n\nexport const RequestIpAddress = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    //const request = <requestIp.Request>ctx.switchToHttp().getRequest();\n    const request = ctx.switchToHttp().getRequest();\n\n    if (request.clientIp) {\n      return request.clientIp;\n    };\n\n    return requestIp.getClientIp(request);\n  }\n);\n","export enum ErrorCodeEnum {\n  DEPOSIT_PROVIDER_NO_AVAILABLE = 100,\n  DEPOSIT_PROVIDER_CHANNEL_NOT_FOUND = 101,\n  DEPOSIT_PROVIDER_USDT_PROTO_NOT_FOUND = 102,\n  DEPOSIT_PROVIDER_ORDER_NOT_CREATED = 103,\n  DEPOSIT_PROVIDER_USDT_RATE_NOT_FOUND = 104,\n  DEPOSIT_PROVIDER_FAILED = 105,\n  DEPOSIT_PROVIDER_FAILED_INTERNAL = 106,\n  WITHDRAW_IP_INVALID = 107,\n  WITHDRAW_SIGN_INVALID = 108,\n  WITHDRAW_PROVIDER_NO_AVAILABLE = 109,\n  WITHDRAW_PROVIDER_CHANNEL_NOT_FOUND = 110,\n  WITHDRAW_PROVIDER_FAILED_INTERNAL = 111,\n  WITHDRAW_PROVIDER_ORDER_NOT_CREATED = 112,\n  WITHDRAW_PROVIDER_BANK_NOT_SUPPORTED = 113,\n  WITHDRAW_PROVIDER_FAILED = 114,\n  WITHDRAW_PROVIDER_USDT_RATE_NOT_FOUND = 115,\n  WITHDRAW_PROVIDER_ERROR_UNKNOWN = 998,\n  DEPOSIT_PROVIDER_ERROR_UNKNOWN = 999,\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { ErrorService } from './error.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([])],\n  controllers: [],\n  providers: [ErrorService],\n  exports: [ErrorService],\n})\nexport class ErrorModule {}\n","import { Injectable } from '@nestjs/common';\nimport { ms } from 'tencentcloud-sdk-nodejs';\nimport { PAYMENT_DEPOSIT_ERROR } from '../locale';\nimport { PaymentProviderDepositRequestDto } from '../payment/providers/payment-provider/payment.provider.deposit.request.dto';\nimport { PaymentProviderDepositResult } from '../payment/providers/payment-provider/payment.provider.deposit.result';\nimport { PaymentProviderWithdrawRequestDto } from '../payment/providers/payment-provider/payment.provider.withdraw.request.dto';\nimport { PaymentProviderWithdrawResult } from '../payment/providers/payment-provider/payment.provider.withdraw.result';\nimport { errorCodes } from './errorCode';\n\nexport class ErrorMessage {\n  zh: string;\n  en: string;\n}\n\n@Injectable()\nexport class ErrorService {\n  constructor() { }\n\n  getMsgDeposit(\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderDepositResult,\n    options?: {\n      bcFailed: boolean;\n    }\n  ) {\n    if (depositResult && depositResult.result) {\n      return null;\n    }\n\n    const msg = new ErrorMessage();\n\n    if (options && options.bcFailed) {\n      msg.en = PAYMENT_DEPOSIT_ERROR.bcClient.en;\n      msg.zh = PAYMENT_DEPOSIT_ERROR.bcClient.zh;\n      return msg;\n    }\n\n    if (depositResult && depositResult.orderId) {\n      msg.en = PAYMENT_DEPOSIT_ERROR.paymentProviderIntegration.en.replace(\n        '%{orderId}',\n        depositResult.orderId\n      );\n      msg.zh = PAYMENT_DEPOSIT_ERROR.paymentProviderIntegration.zh.replace(\n        '%{orderId}',\n        depositResult.orderId\n      );\n      return msg;\n    }\n\n    msg.en = PAYMENT_DEPOSIT_ERROR.noPaymentProvider.en;\n    msg.zh = PAYMENT_DEPOSIT_ERROR.noPaymentProvider.zh;\n\n    return msg;\n  }\n\n  santitizeDeposit(\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderDepositResult\n  ) {\n    depositResult.msg = depositResult.result ? \"Success\" : errorCodes[depositResult.code]?.msg;\n\n    if (depositResult.paymentProviderName) delete depositResult.paymentProviderName;\n    if (depositResult.errorCode) delete depositResult.errorCode;\n    if (depositResult.errorMessage) delete depositResult.errorMessage;\n\n    delete depositResult.errorFront;\n\n    if( depositResult.result ){\n      depositResult.code = 0;\n    }\n  }\n\n  santitizeWithdraw(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    withdrawResult: PaymentProviderWithdrawResult\n  ){\n    withdrawResult.msg = withdrawResult.result ? \"Success\": errorCodes[withdrawResult.code]?.msg;\n  }\n}\n","export const errorCodes = {\n  100: {\n    msg: \"No payment provider available\"\n  },\n  101: {\n    msg: \"Deposit payment provider could not find channel\"\n  },\n  102: {\n    msg: \"Deposit payment provider could not find usdt protocol\"\n  },\n  103: {\n    msg: \"Deposit payment provider could not create order\"\n  },\n  104: {\n    msg: \"Deposit payment provider could find usdt rate\"\n  },\n  105: {\n    msg: \"Payment provider deposit is failed\"\n  },\n  106: {\n    msg: \"Payment provider deposit is failed internally\"\n  },\n  107: {\n    msg: \"Withdraw request ip is invalid\"\n  },\n  108: {\n    msg: \"Withdraw request sign is invalid\"\n  },\n  109: {\n    msg: \"Withdraw payment provider is not available\"\n  },\n  110: {\n    msg: \"Withdraw payment provider could not find channel\"\n  },\n  111: {\n    msg: \"Payment provider withdraw is failed internally\"\n  },\n  112: {\n    msg: \"Payment provider could not create order\"\n  },\n  113: {\n    msg: \"Payment provider does not support this bank\"\n  },\n  114: {\n    msg: \"Payment provider withdraw is failed\"\n  },\n  115: {\n    msg: \"Payment provider could find usdt rate\"\n  },\n  998: {\n    msg: \"Payment provider is failed with unknown error\"\n  },\n  999: {\n    msg: \"Deposit payment provider is failed with unknown error\"\n  }\n}","export const MSG_NO_WITHDRAWAL_ORDER = 'There is no order';\nexport const MSG_STREAM_NO_KSPORT_MATCH = 'There is no ksport match';\nexport const MSG_STREAM_UNAVAILABLE = 'Stream does not exist yet';\nexport const MSG_KSPORT_FETCH_ERROR = 'Fetching ksport data has error';\nexport const MSG_KSPORT_CANDIDATE_INTERAL_ERROR =\n  'Getting KSport candidate team has internal error';\nexport const MSG_KSPORT_NO_MATCHED_EVENT_ERROR =\n  'There is no such matched event';\nexport const MSG_KSPORT_EXIST_CANDIDATE = 'There is already candidate event';\nexport const MSG_KSPORT_NO_EXIST_CANDIDATE =\n  'There is no exist candidate event';\nexport const MSG_KSPORT_CREATE_CANDIDATE_EVENT_ERROR =\n  'Creating Candidate Event has error';\nexport const MSG_MSZF_REQUEST_SIGNERROR = 'MSZF Request has invalid sign';\nexport const MSG_MSZF_RESPONSE_SIGNERROR = 'MSZF Response has invalid sign';\nexport const MSG_MSZF_CALLBACK_SIGNERROR = 'MSZF callback request is not valid';\nexport const PAYMENT_DEPOSIT_ERROR = {\n  bcClient: {\n    en: 'Your account has not been added to our system yet.',\n    zh: '您的账户尚未添加入我们系统中。',\n  },\n  paymentProviderIntegration: {\n    en:\n      ' Your money has not been deposited successfully. Your order number is %{orderId} please contact to customer service.',\n    zh: '您的存款未成功。您的订单号是%{orderId}，请联系客服。',\n  },\n  noPaymentProvider: {\n    en:\n      'Sorry, Problem happened when depositing. Please try again later or contact to customer service.',\n    zh: '我们向您致歉，存款时发生了问题。请稍后再试或联系客服。',\n  },\n};\n","import { Request, Response, NextFunction } from 'express';\n\nexport function filterRequest(req: Request, res: Response, next: NextFunction) {\n  if (\n    req.headers['content-encoding'] &&\n    (req.headers['content-encoding'].toUpperCase() === `UTF-8` ||\n      req.headers['content-encoding'].toUpperCase() === `UTF8`)\n  ) {\n    delete req.headers['content-encoding'];\n  }\n  next();\n}\n","import { Model, Table, Column, DataType, HasMany } from 'sequelize-typescript';\nimport { PaymentProviderBankModel } from './payment.provider.bank.entity';\n\n@Table({ tableName: 'bank', timestamps: false })\nexport class BankModel extends Model<BankModel> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.INTEGER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  bankCode: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  bankName: string;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isAvailable: boolean;\n\n  // ======================= RELATIONS ======================== //\n\n  //@HasMany(() => PaymentProviderBankCodeModel)\n  paymentProviderBankCodes: PaymentProviderBankModel[];\n}\n","import { Model, Table, Column, DataType, HasMany } from 'sequelize-typescript';\n\n@Table({ tableName: 'bcOrders' })\nexport class BcOrdersModel extends Model<BcOrdersModel> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.INTEGER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n    unique: true,\n  })\n  orderId: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n    defaultValue: 1,\n  })\n  depositOrWithdrawable: number;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  processed: boolean;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n    defaultValue: '',\n  })\n  logData: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  status: string;\n\n  // ======================= RELATIONS ======================== //\n}\n","import {\n  Model,\n  Table,\n  Column,\n  DataType,\n  ForeignKey,\n  BelongsTo,\n} from 'sequelize-typescript';\nimport { ChannelModel } from './channel.model';\nimport { LocaleModel } from './locale.model';\n\n@Table({ tableName: 'channelLocale', timestamps: false })\nexport class ChannelLocaleModel extends Model<ChannelLocaleModel> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.NUMBER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @ForeignKey(() => ChannelModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  channelId: number;\n\n  @ForeignKey(() => LocaleModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  localeId: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  label: string;\n\n  // ======================= RELATIONS ======================== //\n\n  @BelongsTo(() => LocaleModel)\n  locale: LocaleModel;\n}\n","import {\n  Model,\n  Table,\n  Column,\n  DataType,\n  BeforeCreate,\n  ForeignKey,\n  BelongsTo,\n  HasMany,\n} from 'sequelize-typescript';\nimport { PaymentProviderChannelModel } from './payment.provider.channel.model';\nimport { PaymentSystemModel } from './payment.system.model';\n\n@Table({ tableName: 'channel' })\nexport class ChannelModel extends Model<ChannelModel> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.NUMBER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  channelName: string;\n\n  @ForeignKey(() => PaymentSystemModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  fromPaymentSystemId: number;\n\n  @ForeignKey(() => PaymentSystemModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  toPaymentSystemId: number;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n    defaultValue: 1,\n  })\n  depositOrWithdrawable: number;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  minAmount: number;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  maxAmount: number;\n\n  // ======================= RELATIONS ======================== //\n\n  @BelongsTo(() => PaymentSystemModel, 'fromPaymentSystemId')\n  fromPaymentSystem: PaymentSystemModel;\n\n  @BelongsTo(() => PaymentSystemModel, 'toPaymentSystemId')\n  toPaymentSystem: PaymentSystemModel;\n\n  // @HasMany(() => PaymentProviderChannelModel)\n  // paymentProviderChannels: PaymentProviderChannelModel[];\n\n  @BeforeCreate\n  public static async prepareCreate(deposit: ChannelModel) {}\n}\n","import { OrderStatusEnum } from '@workspace/enums';\nimport {\n  Model,\n  Table,\n  Column,\n  DataType,\n  BeforeCreate,\n  ForeignKey,\n  BelongsTo,\n} from 'sequelize-typescript';\nimport { PaymentProviderChannelModel } from './payment.provider.channel.model';\nimport { PaymentProviderEntityModel } from './payment.provider.entity.model';\n\n@Table({ tableName: 'deposit' })\nexport class DepositOrderModel extends Model<DepositOrderModel> {\n  @Column({\n    type: DataType.UUIDV4,\n    defaultValue: DataType.UUIDV4,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  userId: string;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: false,\n  })\n  date: Date;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  amount: number;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: true,\n  })\n  usdtExchangeRate: number;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: true,\n  })\n  paymentProviderCardId: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  userName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  last4Digit: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  orderId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n    unique: false,\n  })\n  providerOrderId: string;\n\n  @Column({\n    type: DataType.NUMBER,\n    allowNull: true,\n    unique: false,\n  })\n  channelId: number;\n\n  @ForeignKey(() => PaymentProviderEntityModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  paymentProviderId: number;\n  @BelongsTo(() => PaymentProviderEntityModel)\n  paymentProviders: PaymentProviderEntityModel;\n\n  @ForeignKey(() => PaymentProviderChannelModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  paymentProviderChannelId: number;\n  @BelongsTo(() => PaymentProviderChannelModel)\n  paymentProviderChannel: PaymentProviderChannelModel;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  status: OrderStatusEnum;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  errorCode: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  errorMessage: string;\n\n  @BeforeCreate\n  public static async prepareCreate(deposit: DepositOrderModel) {}\n}\n","import { OrderStatusEnum } from '@workspace/enums';\nimport {\n  Model,\n  Table,\n  Column,\n  DataType,\n  BeforeCreate,\n  ForeignKey,\n  BelongsTo,\n} from 'sequelize-typescript';\nimport { PaymentProviderChannelModel } from './payment.provider.channel.model';\nimport { PaymentProviderEntityModel } from './payment.provider.entity.model';\n\n@Table({ tableName: 'pendingDeposit' })\nexport class DepositPendingOrderModel extends Model<DepositPendingOrderModel> {\n  @Column({\n    type: DataType.UUIDV4,\n    defaultValue: DataType.UUIDV4,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  orderId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  userId: string;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: false,\n  })\n  date: Date;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  amount: number;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: true,\n  })\n  usdtExchangeRate: number;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: true,\n  })\n  paymentProviderCardId: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  userName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  last4Digit: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n    unique: false,\n  })\n  providerOrderId: string;\n\n  @Column({\n    type: DataType.NUMBER,\n    allowNull: true,\n    unique: false,\n  })\n  channelId: number;\n\n  @ForeignKey(() => PaymentProviderEntityModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  paymentProviderId: number;\n  @BelongsTo(() => PaymentProviderEntityModel)\n  paymentProviders: PaymentProviderEntityModel;\n\n  @ForeignKey(() => PaymentProviderChannelModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  paymentProviderChannelId: number;\n  @BelongsTo(() => PaymentProviderChannelModel)\n  paymentProviderChannel: PaymentProviderChannelModel;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  status: OrderStatusEnum;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  hash: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  errorCode: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  errorMessage: string;\n\n  @BeforeCreate\n  public static async prepareCreate(deposit: DepositPendingOrderModel) {}\n}\n","import { Model, Table, Column, DataType } from 'sequelize-typescript';\n\n@Table({ tableName: 'locale', timestamps: false })\nexport class LocaleModel extends Model<LocaleModel> {\n  @Column({\n    type: DataType.NUMBER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  localeName: string;\n}\n","import { Model, Table, Column, DataType, HasMany } from 'sequelize-typescript';\n\n@Table({ tableName: 'options', timestamps: false })\nexport class OptionsModel extends Model<OptionsModel> {\n  // ======================= COLUMNS ======================== //\n  @Column({\n    type: DataType.UUIDV4,\n    defaultValue: DataType.UUIDV4,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n    defaultValue: '',\n  })\n  optName: string;\n\n  @Column({\n    type: DataType.BLOB,\n    allowNull: false,\n    defaultValue: '',\n  })\n  optValue: Buffer;\n}\n","import {\n  Column,\n  DataType,\n  Table,\n  Model,\n  IsDate,\n  BelongsTo,\n  ForeignKey,\n} from 'sequelize-typescript';\nimport { BankModel } from './bank.entity';\nimport { PaymentProviderEntityModel } from './payment.provider.entity.model';\n\n@Table({ tableName: 'paymentProviderBank', timestamps: false })\nexport class PaymentProviderBankModel extends Model<PaymentProviderBankModel> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.INTEGER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @ForeignKey(() => PaymentProviderEntityModel)\n  @Column({\n    type: DataType.NUMBER,\n  })\n  paymentProviderId: number;\n\n  @ForeignKey(() => BankModel)\n  @Column({\n    type: DataType.INTEGER,\n  })\n  bankId: number;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  paymentProviderBankCode: string;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  paymentProviderBankName: string;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isActive: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isAvailable: boolean;\n\n  // ======================= RELATIONS ======================== //\n\n  @BelongsTo(() => BankModel)\n  bank: BankModel;\n\n  @BelongsTo(() => PaymentProviderEntityModel, 'paymentProviderId')\n  paymentProvider: PaymentProviderEntityModel;\n}\n","import {\n  Column,\n  DataType,\n  Table,\n  Model,\n  IsDate,\n  BelongsTo,\n  ForeignKey,\n} from 'sequelize-typescript';\nimport { BankModel } from './bank.entity';\nimport { PaymentProviderEntityModel } from './payment.provider.entity.model';\n\n@Table({ tableName: 'paymentProviderCard', timestamps: false })\nexport class PaymentProviderCardModel extends Model<PaymentProviderCardModel> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.INTEGER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @ForeignKey(() => PaymentProviderEntityModel)\n  @Column({\n    type: DataType.NUMBER,\n  })\n  paymentProviderId: number;\n\n  @ForeignKey(() => BankModel)\n  @Column({\n    type: DataType.INTEGER,\n  })\n  bankId: number;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  bankAccountName: string;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  bankAccountNumber: string;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  province: string;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  city: string;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  branch: string;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: true,\n  })\n  maxDailyAmount: number;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  minAmount: number;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  maxAmount: number;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  active: boolean;\n\n  // ======================= RELATIONS ======================== //\n\n  @BelongsTo(() => BankModel)\n  bank: BankModel;\n\n  @BelongsTo(() => PaymentProviderEntityModel, 'paymentProviderId')\n  paymentProvider: PaymentProviderEntityModel;\n}\n","import {\n  Model,\n  Table,\n  Column,\n  DataType,\n  BeforeCreate,\n  ForeignKey,\n  BelongsTo,\n} from 'sequelize-typescript';\nimport { PaymentProviderEntityModel } from './payment.provider.entity.model';\nimport { ChannelModel } from './channel.model';\n\n@Table({ tableName: 'paymentProviderChannel' })\nexport class PaymentProviderChannelModel extends Model<\n  PaymentProviderChannelModel\n> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.INTEGER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @ForeignKey(() => ChannelModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  channelId: number;\n\n  @ForeignKey(() => PaymentProviderEntityModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  paymentProviderId: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  providerChannelName: string;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: true,\n  })\n  providerMinAmount: number;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: true,\n  })\n  providerMaxAmount: number;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isActive: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isAvailable: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  isFrozen: boolean;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: true,\n  })\n  frozenCheckedDate: Date;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isMinMaxAuto: boolean;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: true,\n  })\n  testedAt: Date;\n\n  // ======================= RELATIONS ======================== //\n\n  @BelongsTo(() => ChannelModel, 'channelId')\n  channel: ChannelModel;\n\n  @BelongsTo(() => PaymentProviderEntityModel, 'paymentProviderId')\n  paymentProvider: PaymentProviderEntityModel;\n\n  @BeforeCreate\n  public static async prepareCreate(deposit: PaymentProviderChannelModel) {}\n}\n","import {\n  Model,\n  Table,\n  Column,\n  DataType,\n  BeforeCreate,\n} from 'sequelize-typescript';\n\n@Table({ tableName: 'paymentProviders' })\nexport class PaymentProviderEntityModel extends Model<\n  PaymentProviderEntityModel\n> {\n  @Column({\n    type: DataType.NUMBER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  providerName: string;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: true,\n    allowNull: false,\n  })\n  isDepositSupport: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: true,\n    allowNull: false,\n  })\n  isWithdrawalSupport: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: true,\n    allowNull: false,\n  })\n  isOnlyCardSupport: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: false,\n    allowNull: false,\n  })\n  needsDepositPhoneNumber: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: false,\n    allowNull: false,\n  })\n  needsWithdrawPhoneNumber: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: false,\n    allowNull: false,\n  })\n  needsDepositBankCode: boolean;\n\n  @BeforeCreate\n  public static async prepareCreate(deposit: PaymentProviderEntityModel) {}\n}\n","import {\n  Column,\n  DataType,\n  Table,\n  Model,\n  IsDate,\n  BelongsTo,\n  ForeignKey,\n} from 'sequelize-typescript';\nimport { BankModel } from './bank.entity';\nimport { PaymentProviderEntityModel } from './payment.provider.entity.model';\nimport { UsdtProtocolModel } from './usdtProtocol';\n\n@Table({ tableName: 'paymentProviderUsdtProtocol', timestamps: false })\nexport class PaymentProviderUsdtProtocolModel extends Model<\n  PaymentProviderUsdtProtocolModel\n> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.INTEGER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @ForeignKey(() => PaymentProviderEntityModel)\n  @Column({\n    type: DataType.NUMBER,\n  })\n  paymentProviderId: number;\n\n  @ForeignKey(() => UsdtProtocolModel)\n  @Column({\n    type: DataType.INTEGER,\n  })\n  usdtProtoId: number;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  providerUsdtProtoName: string;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  providerUsdtProtoCurrency: string;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isAvailable: boolean;\n\n  // ======================= RELATIONS ======================== //\n\n  @BelongsTo(() => UsdtProtocolModel)\n  usdtProtocol: UsdtProtocolModel;\n\n  @BelongsTo(() => PaymentProviderEntityModel, 'paymentProviderId')\n  paymentProvider: PaymentProviderEntityModel;\n}\n","import {\n  Model,\n  Table,\n  Column,\n  DataType,\n  ForeignKey,\n  BelongsTo,\n} from 'sequelize-typescript';\nimport { PaymentSystemModel } from './payment.system.model';\nimport { LocaleModel } from './locale.model';\n\n@Table({ tableName: 'paymentSystemLocale', timestamps: false })\nexport class PaymentSystemLocaleModel extends Model<PaymentSystemLocaleModel> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.NUMBER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @ForeignKey(() => PaymentSystemModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  paymentSystemId: number;\n\n  @ForeignKey(() => LocaleModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  localeId: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  label: string;\n\n  // ======================= RELATIONS ======================== //\n\n  @BelongsTo(() => LocaleModel)\n  locale: LocaleModel;\n}\n","import { Model, Table, Column, DataType, HasMany } from 'sequelize-typescript';\n//import { ChannelModel } from './channel.model';\n\n@Table({ tableName: 'paymentSystem', timestamps: false })\nexport class PaymentSystemModel extends Model<PaymentSystemModel> {\n  // ======================= COLUMNS ======================== //\n  \n  @Column({\n    type: DataType.NUMBER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  isBank: boolean;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  paymentSystemName: string;\n\n  // ======================= RELATIONS ======================== //\n\n  // @HasMany(() => ChannelModel)\n  // channels: ChannelModel[];\n}\n","import { Model, Table, Column, DataType, HasMany } from 'sequelize-typescript';\n//import { Test2Model } from './test2.entity';\n\n@Table({ tableName: 'test', timestamps: true })\nexport class TestModel extends Model<TestModel> {\n  // ======================= COLUMNS ======================== //\n  @Column({\n    type: DataType.UUIDV4,\n    defaultValue: DataType.UUIDV4,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  a: string;\n\n  // @HasMany(() => Test2Model)\n  // test2s: Test2Model[];\n}\n","import { Model, Table, Column, DataType, HasMany } from 'sequelize-typescript';\nimport { PaymentProviderUsdtProtocolModel } from './payment.provider.usdt.protocol.model';\n\n@Table({ tableName: 'usdtProtocol', timestamps: false })\nexport class UsdtProtocolModel extends Model<UsdtProtocolModel> {\n  // ======================= COLUMNS ======================== //\n\n  @Column({\n    type: DataType.INTEGER,\n    autoIncrement: true,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  usdtProtoName: string;\n\n  // ======================= RELATIONS ======================== //\n\n  //@HasMany(() => PaymentProviderUsdtProtocolCodeModel)\n  paymentProviderUsdtProtocols: PaymentProviderUsdtProtocolModel[];\n}\n","import {\n  Model,\n  Table,\n  Column,\n  DataType,\n  BeforeCreate,\n  ForeignKey,\n  BelongsTo,\n} from 'sequelize-typescript';\nimport { PaymentProviderEntityModel } from './payment.provider.entity.model';\n\n@Table({ tableName: 'withdraw' })\nexport class WithdrawOrderModel extends Model<WithdrawOrderModel> {\n  @Column({\n    type: DataType.UUIDV4,\n    defaultValue: DataType.UUIDV4,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  orderId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  userId: string;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: false,\n  })\n  date: Date;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  amount: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  clientOrderId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n    unique: false,\n  })\n  providerOrderId: string;\n\n  @ForeignKey(() => PaymentProviderEntityModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: true,\n  })\n  paymentProviderId: number;\n  @BelongsTo(() => PaymentProviderEntityModel)\n  paymentProviders: PaymentProviderEntityModel;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  currency: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  hashcode: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  bankId: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  bankAccountName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  bankAccountNumber: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  province: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  city: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  branch: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  userName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  countryCallingCode: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  phoneNumber: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  status: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  errorCode: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  errorMessage: string;\n\n  @BeforeCreate\n  public static async prepareCreate(withdraw: WithdrawOrderModel) {}\n}\n","import {\n  Model,\n  Table,\n  Column,\n  DataType,\n  BeforeCreate,\n  ForeignKey,\n  BelongsTo,\n} from 'sequelize-typescript';\nimport { PaymentProviderEntityModel } from './payment.provider.entity.model';\n\n@Table({ tableName: 'pendingWithdraw' })\nexport class WithdrawPendingOrderModel extends Model<\n  WithdrawPendingOrderModel\n> {\n  @Column({\n    type: DataType.UUIDV4,\n    defaultValue: DataType.UUIDV4,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  orderId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  userId: string;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: false,\n  })\n  date: Date;\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  amount: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  clientOrderId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n    unique: false,\n  })\n  providerOrderId: string;\n\n  @ForeignKey(() => PaymentProviderEntityModel)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: true,\n  })\n  paymentProviderId: number;\n  @BelongsTo(() => PaymentProviderEntityModel)\n  paymentProviders: PaymentProviderEntityModel;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  currency: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  hashcode: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  bankId: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  bankAccountName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  bankAccountNumber: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  province: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  city: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  branch: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  userName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  countryCallingCode: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  phoneNumber: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  status: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  errorCode: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    defaultValue: '',\n  })\n  errorMessage: string;\n\n  @BeforeCreate\n  public static async prepareCreate(\n    withdrawPending: WithdrawPendingOrderModel\n  ) {}\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Transform, Type } from 'class-transformer';\n\nexport class OrderLatest {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  date: string;\n\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  @IsNotEmpty()\n  nums: number;\n}\n\nexport class NotifyGetRequestDto {\n  @ApiProperty({\n    type: OrderLatest,\n  })\n  @ValidateNested({ each: true })\n  @Type(() => OrderLatest)\n  //@IsNotEmpty()\n  depositOrderLatest: OrderLatest;\n\n  @ApiProperty({\n    type: OrderLatest,\n  })\n  @ValidateNested({ each: true })\n  @Type(() => OrderLatest)\n  //@IsNotEmpty()\n  withdrawOrderLatest: OrderLatest;\n}\n","import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { NotifyGetRequestDto } from './dto/notify.get.request.dto';\nimport { NotifyService } from './notify.service';\n\n@Controller(apiPathsEnum.notify)\n@ApiTags(apiTagsEnum.notifyEndpoints)\nexport class NotifyController {\n  constructor(private notifyService: NotifyService) {}\n\n  @Post(apiPathsEnum.getNotify)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async gets(@Body() request: NotifyGetRequestDto) {\n    return this.notifyService.gets(request);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { NotifyController } from './notify.controller';\nimport { NotifyService } from './notify.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([])],\n  providers: [NotifyService],\n  controllers: [NotifyController],\n  exports: [NotifyService],\n})\nexport class NotifyModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Sequelize } from 'sequelize-typescript';\nimport { NotifyGetRequestDto } from './dto/notify.get.request.dto';\nimport { FindOptions, Op, QueryTypes, SaveOptions } from 'sequelize';\nimport { NotifyGetResponseDto } from './dto/notify.get.response.dto';\nimport * as numeral from 'numeral';\n\n@Injectable()\nexport class NotifyService {\n  constructor(private sequelize: Sequelize) {}\n\n  async gets(request: NotifyGetRequestDto) {\n    const response: NotifyGetResponseDto = {\n      result: false,\n      data: {},\n    };\n\n    let sql = '';\n    let items = [];\n\n    if (request.depositOrderLatest) {\n      sql = `\n      select \n      count(*) \"cnt\"\n      from (\n        select \n            pd.id , pd.\"userId\" , pd.\"date\" , pd.\"orderId\" , pd.\"providerOrderId\" , pd.amount , pd.status , \n            pd.\"channelId\" , pd.\"paymentProviderId\" , c2.\"fromPaymentSystemId\" ,\n            pd.\"paymentProviderChannelId\", pd.\"userName\", pd.\"last4Digit\",\n            pp.\"providerName\", pp.\"isDepositSupport\" , pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n            ppc.\"providerChannelName\" , ppc.\"providerMinAmount\" , ppc.\"providerMaxAmount\", ppc.\"isActive\" , ppc.\"isAvailable\" ,\n            c2.\"channelName\" , c2.\"depositOrWithdrawable\" , c2.\"toPaymentSystemId\" \n          from  \"pendingDeposit\" pd \n          left join channel c2 on pd.\"channelId\"  = c2.id\n          left join \"paymentProviders\" pp on pd.\"paymentProviderId\"  = pp.id \n          left join \"paymentProviderChannel\" ppc on pd.\"paymentProviderChannelId\" = ppc.id \n          where pd.\"date\" >= to_date('${request.depositOrderLatest.date}', 'MM/DD/YYYY' )\n        union\n        select\n            d2.id , d2.\"userId\" , d2.\"date\" , d2.\"orderId\" , d2.\"providerOrderId\" , d2.amount , d2.status , \n            d2.\"channelId\" , d2.\"paymentProviderId\" , c3.\"fromPaymentSystemId\" ,\n            d2.\"paymentProviderChannelId\", d2.\"userName\", d2.\"last4Digit\",\n            pp.\"providerName\", pp.\"isDepositSupport\" , pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n            ppc.\"providerChannelName\" , ppc.\"providerMinAmount\" , ppc.\"providerMaxAmount\", ppc.\"isActive\" , ppc.\"isAvailable\" ,\n            c3.\"channelName\" , c3.\"depositOrWithdrawable\" , c3.\"toPaymentSystemId\" \n          from deposit d2 \n          left join channel c3 on d2.\"channelId\"  = c3.id \n          left join \"paymentProviders\" pp on d2.\"paymentProviderId\"  = pp.id \n          left join \"paymentProviderChannel\" ppc on d2.\"paymentProviderChannelId\" = ppc.id\n          where d2.\"date\" >= to_date('${request.depositOrderLatest.date}', 'MM/DD/YYYY' ) \n      ) a`;\n\n      items = await this.sequelize.query(sql, {\n        type: QueryTypes.SELECT,\n      });\n\n      const numDepositsLatest = numeral(items[0]['cnt']).value();\n\n      response.data.numsDepositNew =\n        numDepositsLatest - request.depositOrderLatest.nums;\n    }\n\n    if (request.withdrawOrderLatest) {\n      sql = `\n      select \n        count(*) \"cnt\"\n        from (\n          select \n              pw.id , pw.\"userId\" , pw.\"date\" , pw.\"orderId\" , pw.\"clientOrderId\" , pw.amount ,\n              pw.\"providerOrderId\" , pw.status ,\n              pw.\"paymentProviderId\" , pp.\"providerName\", pp.\"isDepositSupport\" , pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n              pw.currency , pw.hashcode , pw.\"errorCode\" , pw.\"errorMessage\" ,\n              pw.\"bankId\", pw.\"bankAccountName\", pw.\"bankAccountNumber\", \n              pw.\"province\", pw.\"city\", pw.\"branch\",\n              pw.\"userName\", pw.\"phoneNumber\", pw.\"countryCallingCode\",\n              ppb.\"paymentProviderBankCode\" , ppb.\"paymentProviderBankName\" , ppb.id \"paymentProviderBankId\",\n              pw.\"currency\", bk.\"bankName\", bk.\"bankCode\"\n            from \"pendingWithdraw\" pw \n            left join \"paymentProviders\" pp on pw.\"paymentProviderId\" = pp.id \n            left join \"paymentProviderBank\" ppb on pw.\"paymentProviderId\" =  ppb.\"paymentProviderId\" AND pw.\"bankId\" = ppb.\"bankId\"\n            left join \"bank\" bk on bk.\"id\" = ppb.\"bankId\"\n            where pw.\"date\" >= to_date('${request.withdrawOrderLatest.date}', 'MM/DD/YYYY' )\n          union\n          select\n              w.id, w.\"userId\", w.\"date\" , w.\"orderId\" , w.\"clientOrderId\" , w.amount ,\n              w.\"providerOrderId\" , w.status ,\n              w.\"paymentProviderId\", pp.\"providerName\", pp.\"isDepositSupport\" , pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n              w.currency , w.hashcode , w.\"errorCode\" , w.\"errorMessage\" ,\n              w.\"bankId\", w.\"bankAccountName\", w.\"bankAccountNumber\", \n              w.\"province\", w.\"city\", w.\"branch\",\n              w.\"userName\", w.\"phoneNumber\", w.\"countryCallingCode\",\n              ppb.\"paymentProviderBankCode\" , ppb.\"paymentProviderBankName\" , ppb.id \"paymentProviderBankId\",\n              w.\"currency\", bk.\"bankName\", bk.\"bankCode\"\n            from withdraw w \n            left join \"paymentProviders\" pp on w.\"paymentProviderId\" = pp.id\n            left join \"paymentProviderBank\" ppb on w.\"paymentProviderId\" =  ppb.\"paymentProviderId\" AND w.\"bankId\" = ppb.\"bankId\"\n            left join \"bank\" bk on bk.\"id\" = ppb.\"bankId\"\n            where w.\"date\" >= to_date('${request.withdrawOrderLatest.date}', 'MM/DD/YYYY' )\n          order by \"date\" desc, \"userId\", \"id\"\n      ) a`;\n\n      items = await this.sequelize.query(sql, {\n        type: QueryTypes.SELECT,\n      });\n\n      const numWithdrawsLatest = numeral(items[0]['cnt']).value();\n\n      response.data.numsWithdrawNew =\n        numWithdrawsLatest - request.withdrawOrderLatest.nums;\n    }\n\n    response.result = true;\n    return response;\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\n\nexport class OptionsUpdateRequestItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  optName: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  optValue: string | number;\n}\n\nexport class OptionsUpdateRequestDto {\n  @ApiProperty({\n    type: [OptionsUpdateRequestItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => OptionsUpdateRequestItem)\n  options: OptionsUpdateRequestItem[];\n}\n","export class OptionsUpdateResponseDto {\n  result: boolean;\n  errorMessage: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { OptionsModel } from '../../models/options.model';\nimport { IsBoolean, IsNotEmpty, IsOptional } from 'class-validator';\nimport { OptionsUpdateRequestItem } from './options.update.request.dto';\n\nexport class UpdateOptionDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isActive: boolean;\n\n  public static updateRequestFactory(\n    item: OptionsModel,\n    requestItem: OptionsUpdateRequestItem\n  ): OptionsModel {\n    if (requestItem.optValue !== undefined) {\n      item.optValue = Buffer.from(`${requestItem.optValue}`);\n    }\n\n    return item;\n  }\n}\n","import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { OptionsUpdateRequestDto } from './dto/options.update.request.dto';\nimport { OptionsService } from './options.service';\n\n@Controller(apiPathsEnum.options)\n@ApiTags(apiTagsEnum.optionsEndpoints)\nexport class OptionsController {\n  constructor(private optionsService: OptionsService) {}\n\n  @Get(apiPathsEnum.getOptionsGeneral)\n  async getsGeneral() {\n    return this.optionsService.findAllGeneral();\n  }\n\n  @Post(apiPathsEnum.updateOptionsGeneral)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async updateGeneral(@Body() updateRequestDto: OptionsUpdateRequestDto) {\n    return this.optionsService.updateByRequest(updateRequestDto);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { OptionsModel } from '../models/options.model';\nimport { OptionsController } from './options.controller';\nimport { OptionsService } from './options.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([OptionsModel])],\n  providers: [OptionsService],\n  controllers: [OptionsController],\n  exports: [OptionsService],\n})\nexport class OptionsModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Sequelize } from 'sequelize-typescript';\nimport { QueryTypes } from 'sequelize';\nimport * as numeral from 'numeral';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { OptionsModel } from '../models/options.model';\nimport { FindOptions, Op } from 'sequelize';\nimport { OptionsUpdateResponseDto } from './dto/options.update.response.dto';\nimport { OptionsUpdateRequestDto } from './dto/options.update.request.dto';\nimport { UpdateOptionDto } from './dto/update-option.dto';\n\nexport enum OptionsKeyGeneralEnum {\n  EuroCupAmount = 'euroCupAmount',\n  WithdrawDefaultMinAmount = 'withdrawDefaultMinAmount',\n  WithdrawDefaultMaxAmount = 'withdrawDefaultMaxAmount',\n  DailyMaxNumWithdraw = 'dailyMaxNumWithdraw',\n  DailyMaxAmountWithdraw = 'dailyMaxAmountWithdraw',\n}\n\n@Injectable()\nexport class OptionsService {\n  constructor(\n    private sequelize: Sequelize,\n    @InjectModel(OptionsModel) private optionsRepository: typeof OptionsModel\n  ) {}\n\n  async findOne(options?: FindOptions): Promise<OptionsModel> {\n    return this.optionsRepository.findOne(options);\n  }\n\n  async findAll(options?: FindOptions): Promise<OptionsModel[]> {\n    return this.optionsRepository.findAll(options);\n  }\n\n  async findById(bankId: number): Promise<OptionsModel> {\n    return this.optionsRepository.findByPk(bankId);\n  }\n\n  async findAllGeneral() {\n    const euroCupAmountValue = await this.optionsRepository.findOne({\n      where: { optName: OptionsKeyGeneralEnum.EuroCupAmount },\n    });\n\n    const dailyMaxAmountWithdrawValue = await this.optionsRepository.findOne({\n      where: { optName: OptionsKeyGeneralEnum.DailyMaxAmountWithdraw },\n    });\n\n    const dailyMaxNumWithdrawValue = await this.optionsRepository.findOne({\n      where: { optName: OptionsKeyGeneralEnum.DailyMaxNumWithdraw },\n    });\n\n    const withdrawDefaultMaxAmountValue = await this.optionsRepository.findOne({\n      where: { optName: OptionsKeyGeneralEnum.WithdrawDefaultMaxAmount },\n    });\n\n    const withdrawDefaultMinAmountValue = await this.optionsRepository.findOne({\n      where: { optName: OptionsKeyGeneralEnum.WithdrawDefaultMinAmount },\n    });\n\n    return {\n      euroCupAmount: numeral(\n        euroCupAmountValue.optValue.toString('utf8')\n      ).value(),\n      dailyMaxAmountWithdraw: numeral(\n        dailyMaxAmountWithdrawValue.optValue.toString('utf8')\n      ).value(),\n      dailyMaxNumWithdraw: numeral(\n        dailyMaxNumWithdrawValue.optValue.toString('utf8')\n      ).value(),\n      withdrawDefaultMaxAmount: numeral(\n        withdrawDefaultMaxAmountValue.optValue.toString('utf8')\n      ).value(),\n      withdrawDefaultMinAmount: numeral(\n        withdrawDefaultMinAmountValue.optValue.toString('utf8')\n      ).value(),\n    };\n  }\n\n  async updateByRequest(\n    updateRequest: OptionsUpdateRequestDto\n  ): Promise<OptionsUpdateResponseDto> {\n    const response = new OptionsUpdateResponseDto();\n\n    for (let i = 0; i < updateRequest.options.length; i++) {\n      const requestItem = updateRequest.options[i];\n\n      const option = await this.optionsRepository.findOne({\n        where: { optName: requestItem.optName },\n      });\n\n      if (!option) {\n        continue;\n      }\n\n      const optionUpdated = UpdateOptionDto.updateRequestFactory(\n        option,\n        requestItem\n      );\n\n      await optionUpdated.save();\n    }\n\n    response.result = true;\n    return response;\n  }\n}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../auth/jwt-auth.guard';\nimport { BankService } from './bank.service';\nimport { BankGetRequestDto } from './dto/bank.get.request.dto';\n\n@Controller(apiPathsEnum.bank)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class BankController {\n  constructor(private bankService: BankService) {}\n\n  @Get(apiPathsEnum.getBanks)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  gets(@Query() query: BankGetRequestDto) {\n    return this.bankService.findAllByQuery(query);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BankModel } from '../../models/bank.entity';\nimport { BankController } from './bank.controller';\nimport { BankService } from './bank.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([BankModel])],\n  providers: [BankService, BankModel],\n  controllers: [BankController],\n  exports: [BankService],\n})\nexport class BankModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { FindOptions } from 'sequelize';\nimport { BankModel } from '../../models/bank.entity';\nimport { BankGetRequestDto } from './dto/bank.get.request.dto';\n\n@Injectable()\nexport class BankService {\n  constructor(\n    @InjectModel(BankModel)\n    private bankRepository: typeof BankModel\n  ) {}\n\n  async findOne(options?: FindOptions): Promise<BankModel> {\n    return this.bankRepository.findOne(options);\n  }\n\n  async findAll(options?: FindOptions): Promise<BankModel[]> {\n    return this.bankRepository.findAll(options);\n  }\n\n  async findById(bankId: number): Promise<BankModel> {\n    return this.bankRepository.findByPk(bankId);\n  }\n\n  public async findAllByQuery(query: BankGetRequestDto) {\n    const findOptions: FindOptions = {\n        include: [],\n        order: [['id', 'asc']],\n      },\n      where: {} = {};\n\n    findOptions.where = where;\n\n    return this.bankRepository.findAll(findOptions);\n  }\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsIn, IsNumber, IsOptional } from 'class-validator';\n\nexport class BankGetRequestDto {}\n","import { InjectQueue, Process, Processor } from '@nestjs/bull';\nimport { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { CurrencyEnum, OrderStatusEnum } from '@workspace/enums';\nimport { Job, Queue } from 'bull';\nimport { BcOrdersModel } from '../../models/bcOrders';\nimport { DepositOrderService } from '../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { DepositOrWithdrawalEnum } from '../providers/payment-provider-channel/payment.provider.channel.service';\nimport { BCDepositInParams } from './dto/bc.deposit.in.params';\nimport {\n  BCWithdrawInParams,\n  BCWithdrawStatus,\n} from './dto/bc.withdraw.in.params';\nimport * as numeral from 'numeral';\nimport * as moment from 'moment-timezone';\nimport { BetConstructService } from './betConstruct.service';\nimport { Interval } from '@nestjs/schedule';\nimport { TestModel } from '../../models/test.entity';\n\n@Injectable()\n@Processor('performBCTasks')\nexport class BetConstructPerformService {\n  private performJob: Job;\n  private bcOrderInProcess: BcOrdersModel;\n\n  constructor(\n    private configService: ConfigService,\n    private httpService: HttpService,\n\n    @InjectModel(BcOrdersModel)\n    private bcOrdersRepository: typeof BcOrdersModel,\n\n    private betConstructService: BetConstructService,\n\n    private depositPendingOrderService: DepositPendingOrderService,\n    private depositOrderService: DepositOrderService,\n    private withdrawPendingOrderService: WithdrawPendingOrderService,\n    private withdrawOrderService: WithdrawOrderService,\n\n    @InjectQueue('performBCTasks') private performBCTasksQueue: Queue,\n\n    @InjectModel(TestModel)\n    private testRepository: typeof TestModel\n  ) {}\n\n  @Interval('bcPerformScheduler', 60000)\n  async intervalEntry() {\n    this.performTask();\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform BetConstruct Task\n  ///////////////////////////////////////////////////////////////////////////////\n  async performTask(force?: boolean) {\n    if (this.performJob && !force) {\n      return false;\n    }\n\n    try {\n      if (this.performJob) {\n        await this.performJob.finished();\n      }\n\n      this.performJob = await this.performBCTasksQueue.add(\n        'perform-bc-tasks',\n        {},\n        { timeout: 60000, attempts: 1 } // 60s 1m\n      );\n\n      /* await this.testRepository.create({\n        a: JSON.stringify({ createdJob: this.performJob.id }),\n      }); */\n\n      await this.performJob.finished();\n    } catch (error) {\n      await this.testRepository.create({\n        a: JSON.stringify(error),\n      });\n    }\n\n    this.performJob = null;\n\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform BcTasks Consumer\n  ///////////////////////////////////////////////////////////////////////////////\n  @Process('perform-bc-tasks')\n  private async performBCTasks(job: Job) {\n    const bcOrders = await this.bcOrdersRepository.findAll({\n      where: { processed: false },\n      limit: this.configService.get<number>(\n        'betConstruct.numberOfTasksProcessed'\n      ),\n    });\n\n    /* await this.testRepository.create({\n      a: JSON.stringify({\n        name: 'perform-bc-tasks',\n        job: job.id,\n        bcOrders: bcOrders.length,\n      }),\n    }); */\n\n    for (let i = 0; i < bcOrders.length; i++) {\n      const bcOrder = bcOrders[i];\n\n      if (this.bcOrderInProcess && this.bcOrderInProcess.id === bcOrder.id) {\n        continue;\n      }\n\n      this.bcOrderInProcess = bcOrder;\n      await this.performBcOrder(bcOrder);\n      this.bcOrderInProcess = null;\n\n      if (await job.isFailed()) {\n        break;\n      }\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform BcOrder\n  ///////////////////////////////////////////////////////////////////////////////\n  private async performBcOrder(bcOrder: BcOrdersModel) {\n    bcOrder.logData = JSON.stringify({\n      performed: moment().utcOffset('+08:00').format('YYYY-MM-DD HH:mm:ss'),\n    });\n    await bcOrder.save();\n\n    switch (`${bcOrder.depositOrWithdrawable}`) {\n      case `${DepositOrWithdrawalEnum.DEPOSIT}`:\n        await this.performBcOrderDeposit(bcOrder);\n        break;\n      case `${DepositOrWithdrawalEnum.WITHDRAWAL}`:\n        await this.performBcOrderWithdraw(bcOrder);\n        break;\n      default:\n        break;\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform BcOrder Deposit\n  ///////////////////////////////////////////////////////////////////////////////\n  private async performBcOrderDeposit(bcOrder: BcOrdersModel) {\n    try {\n      const inParams = new BCDepositInParams();\n\n      const orderPending = await this.depositPendingOrderService.findByOrderId(\n        `${bcOrder.orderId}`\n      );\n\n      if (orderPending) {\n        inParams.amount = orderPending.amount;\n        inParams.currency = CurrencyEnum.CNY;\n        inParams.orderId = numeral(bcOrder.orderId).value();\n        inParams.userId = numeral(orderPending.userId).value();\n\n        // Do not Process for Pending Order\n        return false;\n      } else {\n        const orderSuccess = await this.depositOrderService.findByOrderId(\n          `${bcOrder.orderId}`\n        );\n        if (!orderSuccess) {\n          return false;\n        }\n\n        inParams.amount = orderSuccess.amount;\n        inParams.currency = CurrencyEnum.CNY;\n        inParams.orderId = numeral(bcOrder.orderId).value();\n        inParams.userId = numeral(orderSuccess.userId).value();\n      }\n\n      console.log(inParams, '... BC Deposit Start');\n      const bcDepositResult = await this.betConstructService.deposit(inParams);\n\n      return bcDepositResult.result;\n    } catch (error) {\n      console.log(error);\n    }\n\n    return null;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform BcOrder Withdraw\n  ///////////////////////////////////////////////////////////////////////////////\n  private async performBcOrderWithdraw(bcOrder: BcOrdersModel) {\n    try {\n      const inParams = new BCWithdrawInParams();\n\n      const orderPending = await this.withdrawPendingOrderService.findByClientOrderId(\n        `${bcOrder.orderId}`\n      );\n\n      if (orderPending) {\n        inParams.amount = orderPending.amount;\n        inParams.currency = orderPending.currency;\n        inParams.orderId = numeral(bcOrder.orderId).value();\n        inParams.reason = this.configService.get<string>(\n          'betConstruct.withdraw.reason'\n        );\n        inParams.userId = orderPending.userId;\n        inParams.status = this.betConstructService.getBCWithdrawStatusByOrderStatus(\n          <OrderStatusEnum>orderPending.status\n        );\n      } else {\n        const orderSuccess = await this.withdrawOrderService.findByClientOrderId(\n          `${bcOrder.orderId}`\n        );\n\n        if (!orderSuccess) {\n          return false;\n        }\n\n        inParams.amount = orderSuccess.amount;\n        inParams.currency = orderSuccess.currency;\n        inParams.orderId = numeral(bcOrder.orderId).value();\n        inParams.reason = this.configService.get<string>(\n          'betConstruct.withdraw.reason'\n        );\n        inParams.userId = orderSuccess.userId;\n        inParams.status = this.betConstructService.getBCWithdrawStatusByOrderStatus(\n          <OrderStatusEnum>orderSuccess.status\n        );\n      }\n\n      if (\n        inParams.status !== BCWithdrawStatus.SUCCESS &&\n        inParams.status !== BCWithdrawStatus.FAILED\n      ) {\n        return false;\n      }\n\n      console.log(inParams, '... BC Withdraw Start');\n\n      const bcWithdrawResult = await this.betConstructService.withdraw(\n        inParams\n      );\n\n      return bcWithdrawResult.result;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /* delay(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  } */\n}\n","import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { CreateOptions, SaveOptions } from 'sequelize';\nimport { OrderStatusEnum } from '@workspace/enums';\nimport * as md5 from 'md5';\nimport * as qs from 'qs';\nimport * as numeral from 'numeral';\nimport { BcOrdersModel } from '../../models/bcOrders';\nimport { DepositOrWithdrawalEnum } from '../providers/payment-provider-channel/payment.provider.channel.service';\nimport { BCCheckWithdrawHashInparams } from './dto/bc.check.withdraw.hash.in.param';\nimport { BCCheckWithdrawHashOut } from './dto/bc.check.withdraw.hash.out';\nimport { BCCheckWithdrawIPWhiteListInparams } from './dto/bc.check.withdraw.ipwhitelist.in.params';\nimport { BCCheckWithdrawIPWhiteListOut } from './dto/bc.check.withdraw.ipwhitelist.out';\nimport { BCCheckClientInParams } from './dto/bc.checkclient.in.params';\nimport { BCCheckClientOut } from './dto/bc.checkclient.out';\nimport { BCCheckClientRequestParams } from './dto/bc.checkclient.request.params';\nimport { BCDepositInParams, BCDepositStatus } from './dto/bc.deposit.in.params';\nimport { BCDepositOut } from './dto/bc.deposit.out';\nimport { BCDepositRequestParams } from './dto/bc.deposit.request.params';\nimport {\n  BCWithdrawInParams,\n  BCWithdrawStatus,\n} from './dto/bc.withdraw.in.params';\nimport { BCWithdrawOut } from './dto/bc.withdraw.out';\nimport { BCWithdrawRequestParams } from './dto/bc.withdraw.request.params';\nimport { CreateBCOrdersDto } from './dto/create-bcorders.dto';\nimport { BCCheckClientResponse } from './interfaces/bc.checkclient.response';\nimport { BCDepositResponse } from './interfaces/bc.deposit.response';\nimport { BCWithdrawResponse } from './interfaces/bc.withdraw.response';\n\n@Injectable()\nexport class BetConstructService {\n  constructor(\n    private configService: ConfigService,\n    private httpService: HttpService,\n\n    @InjectModel(BcOrdersModel)\n    private bcOrdersRepository: typeof BcOrdersModel\n  ) {}\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Check Client\n  ////////////////////////////////////////////////////////////////////////////////\n  async checkClient(inParams: BCCheckClientInParams) {\n    const checkOut = new BCCheckClientOut();\n    checkOut.result = false;\n\n    try {\n      const host = this.configService.get<string>('BC_HOST');\n      const url = this.configService.get<string>('BC_CHECKCLIENT_URL');\n      const resource = this.configService.get<string>('BC_RESOURCE');\n      const key = this.configService.get<string>('BC_SECRETKEY');\n\n      const params = new BCCheckClientRequestParams();\n      params.command = this.configService.get<string>(\n        'betConstruct.checkClient.command'\n      );\n      params.account = inParams.userId;\n      params.currency = inParams.currency;\n      params.sid = this.configService.get<string>('BC_SID');\n      params.hashcode = md5(\n        `${params.command}${params.account}${params.currency}${params.sid}${key}`\n      );\n\n      const response = await this.httpService\n        .get(`https://${host}/${url}/${resource}`, { params })\n        .toPromise();\n\n      const data = <BCCheckClientResponse>response.data;\n\n      // console.log(`https://${host}/${url}/${resource}`);\n      // console.log(JSON.stringify(params));\n      // console.log(JSON.stringify(data), '++++++');\n\n      if (data && `${data.response.code}` === `0`) {\n        checkOut.result = true;\n      } else {\n        checkOut.errorCode = data ? data.response.code : -1;\n        checkOut.errorMessage = data ? data.response.message : 'UNKNOWN';\n      }\n    } catch (error) {\n      checkOut.error = error;\n    }\n\n    return checkOut;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Add Deposit BCOrder\n  ////////////////////////////////////////////////////////////////////////////////\n  async addDepositBcOrder(inParams: BCDepositInParams): Promise<BcOrdersModel> {\n    let bcOrder = await this.bcOrdersRepository.findOne({\n      where: {\n        orderId: inParams.orderId,\n        depositOrWithdrawable: DepositOrWithdrawalEnum.DEPOSIT,\n      },\n    });\n\n    // Check There is already success processed Order.\n    if (bcOrder && bcOrder.processed) {\n      return null;\n    }\n\n    if (bcOrder) {\n      bcOrder.status = OrderStatusEnum.SUCCESS;\n      bcOrder.processed = false;\n\n      await bcOrder.save();\n    } else {\n      const createBCOrders = new CreateBCOrdersDto();\n      createBCOrders.orderId = inParams.orderId;\n      createBCOrders.depositOrWithdrawable = DepositOrWithdrawalEnum.DEPOSIT;\n      createBCOrders.processed = false;\n      createBCOrders.status = OrderStatusEnum.SUCCESS;\n\n      bcOrder = await this.bcOrdersRepository.create(createBCOrders);\n      if (!bcOrder) {\n        return null;\n      }\n    }\n\n    return bcOrder;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit\n  ////////////////////////////////////////////////////////////////////////////////\n  async deposit(inParams: BCDepositInParams): Promise<BCDepositOut> {\n    const depositOut = new BCDepositOut();\n    depositOut.result = false;\n\n    const bcOrder = await this.addDepositBcOrder(inParams);\n\n    if (!bcOrder) {\n      depositOut.errorCode = this.configService.get<number>(\n        'betConstruct.notCreateBCOrdersRecordErrorCode'\n      );\n      depositOut.errorMessage = this.configService.get<string>(\n        'betConstruct.notCreateBCOrdersRecordErrorMessage'\n      );\n      return depositOut;\n    }\n\n    try {\n      const host = this.configService.get<string>('BC_HOST');\n      const url = this.configService.get<string>('BC_DEPOSIT_URL');\n      const resource = this.configService.get<string>('BC_RESOURCE');\n      const key = this.configService.get<string>('BC_SECRETKEY');\n\n      const params = new BCDepositRequestParams();\n      params.command = this.configService.get<string>(\n        'betConstruct.deposit.command'\n      );\n      params.account = inParams.userId;\n      params.txn_id = inParams.orderId;\n      params.amount = inParams.amount;\n      params.currency = inParams.currency;\n      params.sid = this.configService.get<string>('BC_SID');\n      params.hashcode = md5(\n        `${params.command}${params.txn_id}${params.account}${params.amount}${params.currency}${params.sid}${key}`\n      );\n\n      const response = await this.httpService\n        .get(`https://${host}/${url}/${resource}`, { params })\n        .toPromise();\n\n      const data = <BCDepositResponse>response.data;\n\n      //console.log(data, '>>> BC Deposit');\n\n      if (`${data.response.code}` === `0`) {\n        depositOut.result = true;\n\n        bcOrder.processed = true;\n        await bcOrder.save();\n      } else {\n        depositOut.errorCode = data.response.code;\n        depositOut.errorMessage = data.response.message;\n      }\n    } catch (error) {\n      depositOut.error = error;\n    }\n\n    return depositOut;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Add Withdraw BC Order\n  ////////////////////////////////////////////////////////////////////////////////\n  async addWithdrawBcOrder(\n    inParams: BCWithdrawInParams,\n    options?: CreateOptions\n  ): Promise<BcOrdersModel> {\n    let bcOrder = await this.bcOrdersRepository.findOne({\n      where: {\n        orderId: inParams.orderId,\n        depositOrWithdrawable: DepositOrWithdrawalEnum.WITHDRAWAL,\n      },\n    });\n\n    if (bcOrder && bcOrder.processed) {\n      return null;\n    }\n\n    const status = this.getOrderStatusByBCWithdrawStatus(inParams.status);\n    if (status === null) {\n      return null;\n    }\n\n    if (bcOrder) {\n      bcOrder.processed = false;\n      bcOrder.status = status;\n    } else {\n      const createBCOrders = new CreateBCOrdersDto();\n      createBCOrders.orderId = numeral(inParams.orderId).value();\n      createBCOrders.depositOrWithdrawable = DepositOrWithdrawalEnum.WITHDRAWAL;\n      createBCOrders.processed = false;\n      createBCOrders.status = status;\n\n      bcOrder = await this.bcOrdersRepository.create(createBCOrders, options);\n      if (!bcOrder) {\n        return null;\n      }\n    }\n\n    return bcOrder;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdraw(inParams: BCWithdrawInParams): Promise<BCWithdrawOut> {\n    const withdrawOut = new BCWithdrawOut();\n    withdrawOut.result = false;\n\n    const bcOrder = await this.addWithdrawBcOrder(inParams);\n    if (!bcOrder) {\n      withdrawOut.errorCode = this.configService.get<number>(\n        'betConstruct.notCreateBCOrdersRecordErrorCode'\n      );\n      withdrawOut.errorMessage = this.configService.get<string>(\n        'betConstruct.notCreateBCOrdersRecordErrorMessage'\n      );\n      return withdrawOut;\n    }\n\n    const params = new BCWithdrawRequestParams();\n\n    params.playerId = inParams.userId;\n    params.orderId = inParams.orderId;\n    params.currency = inParams.currency;\n    params.amount = inParams.amount;\n    params.status = inParams.status;\n    params.reason = inParams.reason;\n\n    const withdrawalKey = this.configService.get<string>('WITHDRAWAL_TOKEN');\n    const bcKey = this.configService.get<string>('BC_SECRETKEY');\n\n    const txtSource =\n      `${params.orderId}` +\n      `${params.playerId}` +\n      `${params.currency}` +\n      `${params.amount}` +\n      `${params.status}` +\n      `${withdrawalKey}` +\n      `${bcKey}`;\n\n    params.hash = md5(txtSource);\n\n    // console.log(JSON.stringify(params));\n    // console.log('_________________');\n    // console.log(txtSource);\n    // console.log('_________________');\n    // console.log(params.hash);\n\n    try {\n      const host = this.configService.get<string>('BC_HOST_WITHDRAW');\n      const url = this.configService.get<string>('BC_WITHDRAW_URL');\n\n      //console.log(`https://${host}/${url}`);\n\n      const response = await this.httpService\n        .post(`https://${host}/${url}`, qs.stringify(params), {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        })\n        .toPromise();\n\n      const data = <BCWithdrawResponse>response.data;\n\n      //console.log(data, '>>> WITHDRAW');\n\n      if (`${data.response.code}` === `0`) {\n        withdrawOut.result = true;\n\n        bcOrder.processed = true;\n        await bcOrder.save();\n      } else {\n        withdrawOut.errorCode = data.response.code;\n        withdrawOut.errorMessage = data.response.message;\n      }\n\n      //console.log(withdrawOut);\n\n      return withdrawOut;\n    } catch (error) {\n      //console.log(error);\n      withdrawOut.error = error;\n      withdrawOut.errorCode = this.configService.get<number>(\n        'betConstruct.withdraw.serviceErrorCode'\n      );\n      withdrawOut.errorMessage = this.configService.get<string>(\n        'betConstruct.withdraw.serviceErrorMessage'\n      );\n    }\n\n    return withdrawOut;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// CHECK WITHDRAW IP WHITELIST\n  ////////////////////////////////////////////////////////////////////////////////\n  checkWithdrawIPWhitelist(\n    inParams: BCCheckWithdrawIPWhiteListInparams\n  ): BCCheckWithdrawIPWhiteListOut {\n    const out = new BCCheckWithdrawIPWhiteListOut();\n    out.result = false;\n\n    const ip_in = inParams.ip.trim();\n\n    const ipWhiteList = this.configService.get<string>(\n      'BC_WITHDRAW_IP_WHITELIST'\n    );\n    if (!ipWhiteList) {\n      return out;\n    }\n\n    const ips = ipWhiteList.split(',') || [];\n    const ipMatched = ips.find((ip) => ip.trim() === ip_in);\n\n    out.result = ipMatched ? true : false;\n\n    if (!out.result) {\n      out.errorCode = this.configService.get<number>(\n        'betConstruct.withdraw.checkIPWhiteListErrorCode'\n      );\n      out.errorMessage = this.configService.get<string>(\n        'betConstruct.withdraw.checkIPWhiteListErrorMessage'\n      );\n    }\n\n    return out;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// CHECK WITHDRAW HASH\n  ////////////////////////////////////////////////////////////////////////////////\n  checkWithdrawHash(\n    inParams: BCCheckWithdrawHashInparams\n  ): BCCheckWithdrawHashOut {\n    const out = new BCCheckWithdrawHashOut();\n    out.result = false;\n\n    const command = this.configService.get<string>(\n      'betConstruct.withdraw.command'\n    );\n    const keyBC = this.configService.get<string>('BC_SECRETKEY');\n    const tokenWithdrawal = this.configService.get<string>('WITHDRAWAL_TOKEN');\n    const txtSource =\n      `${command}${inParams.amount}` +\n      `${inParams.bankAccountName}${inParams.bankAccountNumber}` +\n      `${inParams.bankCode}${inParams.branch}` +\n      `${inParams.city}${inParams.currency}${inParams.orderId}` +\n      `${inParams.phoneNumber !== undefined ? inParams.phoneNumber : ''}` +\n      `${inParams.province}` +\n      `${tokenWithdrawal}${inParams.userId}` +\n      `${inParams.userName !== undefined ? inParams.userName : ''}` +\n      `${keyBC}`;\n    const hash = md5(txtSource);\n\n    out.result = hash.toUpperCase() === inParams.hashCode.toUpperCase();\n\n    // console.log(txtSource);\n    console.log(hash);\n\n    if (!out.result) {\n      out.errorCode = this.configService.get<number>(\n        'betConstruct.withdraw.checkHashErrorCode'\n      );\n      out.errorMessage = this.configService.get<string>(\n        'betConstruct.withdraw.checkHashErrorMessage'\n      );\n    }\n\n    return out;\n  }\n\n  public getBCDepositStatusByOrderStatus(\n    orderStatus: OrderStatusEnum\n  ): BCWithdrawStatus {\n    switch (orderStatus) {\n      case OrderStatusEnum.SUCCESS:\n        return BCWithdrawStatus.SUCCESS;\n      case OrderStatusEnum.FAILED:\n        return BCWithdrawStatus.FAILED;\n      default:\n        break;\n    }\n    return null;\n  }\n\n  public getOrderStatusByBCDepositStatus(\n    depositStatus: BCDepositStatus\n  ): OrderStatusEnum {\n    switch (depositStatus) {\n      case BCDepositStatus.SUCCESS:\n        return OrderStatusEnum.SUCCESS;\n      case BCDepositStatus.FAILED:\n        return OrderStatusEnum.FAILED;\n      default:\n        break;\n    }\n    return null;\n  }\n\n  public getBCWithdrawStatusByOrderStatus(\n    orderStatus: OrderStatusEnum\n  ): BCWithdrawStatus {\n    switch (orderStatus) {\n      case OrderStatusEnum.SUCCESS:\n        return BCWithdrawStatus.SUCCESS;\n      case OrderStatusEnum.FAILED:\n        return BCWithdrawStatus.FAILED;\n      default:\n        break;\n    }\n    return null;\n  }\n\n  public getOrderStatusByBCWithdrawStatus(\n    withdrawStatus: BCWithdrawStatus\n  ): OrderStatusEnum {\n    switch (withdrawStatus) {\n      case BCWithdrawStatus.SUCCESS:\n        return OrderStatusEnum.SUCCESS;\n      case BCWithdrawStatus.FAILED:\n        return OrderStatusEnum.FAILED;\n      default:\n        break;\n    }\n    return null;\n  }\n}\n","import { BullModule } from '@nestjs/bull';\nimport { HttpModule, Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BcOrdersModel } from '../../models/bcOrders';\nimport { TestModel } from '../../models/test.entity';\nimport { DepositOrderModule } from '../order/deposit-order/deposit.order.module';\nimport { DepositPendingOrderModule } from '../order/deposit-pending-order/deposit.pending.order.module';\nimport { WithdrawOrderModule } from '../order/withdraw-order/withdraw.order.module';\nimport { WithdrawPendingOrderModule } from '../order/withdraw-pending-order/withdraw.pending.order.module';\nimport { BetConstructPerformService } from './betConstruct.perform.service';\nimport { BetConstructService } from './betConstruct.service';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'performBCTasks',\n    }),\n    SequelizeModule.forFeature([BcOrdersModel, TestModel]),\n    HttpModule.register({\n      timeout: 45000,\n      maxRedirects: 5,\n    }),\n    DepositPendingOrderModule,\n    DepositOrderModule,\n    WithdrawPendingOrderModule,\n    WithdrawOrderModule,\n  ],\n  providers: [BetConstructService, BetConstructPerformService],\n  controllers: [],\n  exports: [BetConstructService, BetConstructPerformService],\n})\nexport class BetConstructModule {}\n","export class BCCheckWithdrawHashInparams {\n  amount: number;\n  bankAccountName: string;\n  bankAccountNumber: string;\n  bankCode: string;\n  branch: string;\n  city: string;\n  currency: string;\n  orderId: string;\n  province: string;\n  userId: string;\n  hashCode: string;\n  userName: string;\n  phoneNumber: string;\n}\n","export class BCCheckWithdrawHashOut {\n  result: boolean;\n  errorCode: number;\n  errorMessage: string;\n  error: {};\n}\n","export class BCCheckWithdrawIPWhiteListInparams {\n  ip: string;\n}\n","export class BCCheckWithdrawIPWhiteListOut {\n  result: boolean;\n  errorCode: number;\n  errorMessage: string;\n  error: {};\n}\n","export class BCCheckClientOut {\n  result: boolean;\n  errorCode: number;\n  errorMessage: string;\n  error: {};\n}\n","export class BCCheckClientRequestParams {\n  command: string;\n  account: string;\n  currency: string;\n  sid: string;\n  hashcode: string;\n}\n","export enum BCDepositStatus {\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nexport class BCDepositInParams {\n  orderId: number;\n  userId: number;\n  amount: number;\n  currency: string;\n}\n","export class BCDepositOut {\n  result: boolean;\n  errorCode: number;\n  errorMessage: string;\n  error: {};\n}\n","export class BCDepositRequestParams {\n  command: string;\n  account: number;\n  amount: number;\n  currency: string;\n  txn_id: number;\n  sid: string;\n  hashcode: string;\n}\n","export enum BCWithdrawStatus {\n  SUCCESS = 'success',\n  FAILED = 'failed'\n}\n\nexport class BCWithdrawInParams {\n  userId: string;\n  orderId: number;\n  currency: string;\n  amount: number;\n  status: BCWithdrawStatus;\n  reason: string;\n}\n","export class BCWithdrawOut {\n  result: boolean;\n  errorCode: number;\n  errorMessage: string;\n  error: {};\n}\n","export class BCWithdrawRequestParams {\n  playerId: string;\n  orderId: number;\n  currency: string;\n  amount: number;\n  status: string;\n  reason: string;\n  hash: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CreateBCOrdersDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  orderId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  depositOrWithdrawable: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  processed: boolean;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  status: string;\n}\n","import { Controller, Get, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../auth/jwt-auth.guard';\nimport { ChannelService } from './channel.service';\nimport { ChannelGetRequestDto } from './dto/channel.get.request.dto';\n\n@Controller(apiPathsEnum.channel)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class ChannelController {\n  constructor(private channelService: ChannelService) {}\n\n  @Get(apiPathsEnum.getChannels)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  gets(@Query() query: ChannelGetRequestDto) {\n    return this.channelService.findAllByQuery(query);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { ChannelModel } from '../../models/channel.model';\nimport { ChannelController } from './channel.controller';\nimport { ChannelService } from './channel.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([ChannelModel])],\n  providers: [ChannelService, ChannelModel],\n  controllers: [ChannelController],\n  exports: [ChannelService],\n})\nexport class ChannelModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { DepositChannelEnum } from '@workspace/enums';\nimport { ChannelModel } from '../../models/channel.model';\nimport { PaymentSystemModel } from '../../models/payment.system.model';\nimport { ChannelGetRequestDto } from './dto/channel.get.request.dto';\nimport { FindOptions } from 'sequelize/types';\n\n@Injectable()\nexport class ChannelService {\n  constructor(\n    @InjectModel(ChannelModel)\n    private channelRepository: typeof ChannelModel\n  ) {}\n\n  async findAllByQuery(query: ChannelGetRequestDto) {\n    const findOptions: FindOptions = {\n        include: [\n          { model: PaymentSystemModel, as: 'fromPaymentSystem' },\n          { model: PaymentSystemModel, as: 'toPaymentSystem' },\n        ],\n        order: [['id', 'asc']],\n      },\n      where: {} = {};\n\n    if (query.depositOrWithdrawable !== undefined) {\n      where['depositOrWithdrawable'] = query.depositOrWithdrawable;\n    }\n\n    findOptions.where = where;\n\n    return this.channelRepository.findAll(findOptions);\n  }\n\n  async findById(channelId: number): Promise<ChannelModel> {\n    return this.channelRepository.findByPk(channelId, {\n      include: [\n        { model: PaymentSystemModel, as: 'fromPaymentSystem' },\n        { model: PaymentSystemModel, as: 'toPaymentSystem' },\n      ],\n    });\n  }\n\n  async findByChannelName(\n    channelName: DepositChannelEnum\n  ): Promise<ChannelModel> {\n    return this.channelRepository.findOne({\n      where: {\n        channelName: channelName.toString(),\n      },\n    });\n  }\n\n  async findAll(): Promise<ChannelModel[]> {\n    return this.channelRepository.findAll();\n  }\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsBoolean, IsIn, IsNumber, IsOptional } from 'class-validator';\n\nexport class ChannelGetRequestDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  @IsIn([1, 2])\n  depositOrWithdrawable: number;\n}\n","export class DepositableChannel {\n  channelId: number;\n  isAvailable: boolean;\n  channelName: string;\n  minAmount: number;\n  maxAmount: number;\n  locales: {\n    [key: string]: string;\n  };\n}\n","export class DepositablePaymentSystem {\n  id: number;\n  paymentMethodName: string;\n  isAvailable: boolean;\n  minAmount: number;\n  maxAmount: number;\n  locales: {\n    [key: string]: string;\n  };\n}\n","export class DepositableUsdtProto {\n    id: number;\n    usdtProtoName: string;\n    isAvailable: boolean;\n    minAmount: number;\n    maxAmount: number;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\n\nexport class PaymentDepositByCardRequestDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  data1: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  data2: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  userName: string;\n\n  // @ApiProperty()\n  // @IsNumberString()\n  // @IsNotEmpty()\n  // last4Digit: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\nimport {\n  BankCodeEnum,\n  PaymentSystemEnum,\n  UsdtProtocolEnum,\n} from '@workspace/enums';\nimport { Transform } from 'class-transformer';\n\nexport class PaymentDepositRequestDto {\n  @ApiProperty()\n  @IsDecimal({ decimal_digits: '0,2' })\n  @IsNotEmpty()\n  amount: number;\n\n  @ApiProperty({\n    enum: PaymentSystemEnum,\n  })\n  @IsEnum(PaymentSystemEnum)\n  @IsNotEmpty()\n  paymentSystem: string;\n\n  @ApiProperty()\n  @IsNumberString()\n  @IsNotEmpty()\n  userId: string;\n\n  @ApiPropertyOptional({\n    enum: BankCodeEnum,\n  })\n  @IsOptional()\n  @IsEnum(BankCodeEnum)\n  bankCode: string;\n\n  @ApiPropertyOptional({\n    enum: UsdtProtocolEnum,\n  })\n  @IsOptional()\n  @IsEnum(UsdtProtocolEnum)\n  usdtProto: string;\n\n  @ApiPropertyOptional({})\n  @IsOptional()\n  userName: string;\n\n  @ApiPropertyOptional({})\n  @IsOptional()\n  @IsString()\n  phoneNumber: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\n\nexport class PaymentMakeDepositSuccessRequestDto {\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  @IsNotEmpty()\n  orderId: number;\n\n  @ApiProperty()\n  //@Transform((params) => Number(params.value))\n  @IsDecimal({ decimal_digits: '0,2' })\n  @IsNotEmpty()\n  amount: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\n\nexport class PaymentMakeWithdrawSuccessRequestDto {\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  @IsNotEmpty()\n  orderId: number;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\n\nexport class PaymentManualDepositRequestDto {\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  @IsNotEmpty()\n  userId: number;\n\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  @IsNotEmpty()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  @IsNotEmpty()\n  paymentProviderChannelId: number;\n\n  @ApiProperty()\n  //@Transform((params) => Number(params.value))\n  @IsDecimal({ decimal_digits: '0,2' })\n  @IsNotEmpty()\n  amount: string;\n}\n","export class PaymentManualDepositResultDto {\n  result: boolean;\n  error: {};\n  errorCode: string;\n  errorMessage: string;\n  requestJson: string;\n  responseJson: string;\n  requestTime: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { CurrencyEnum } from '@workspace/enums';\n\nexport class PaymentManualWithdrawRequestDto {\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  @IsNotEmpty()\n  userId: number;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  orderId: string;\n\n  @ApiProperty()\n  //@Transform((params) => Number(params.value))\n  @IsDecimal({ decimal_digits: '0,2' })\n  @IsNotEmpty()\n  amount: string;\n\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  @IsNotEmpty()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  @IsNotEmpty()\n  bankId: number;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  bankAccountName: string;\n\n  @ApiProperty()\n  @IsNumberString()\n  bankAccountNumber: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  province: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  city: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  branch: string;\n\n  @ApiProperty({\n    enum: CurrencyEnum,\n  })\n  @IsEnum(CurrencyEnum)\n  @IsNotEmpty()\n  currency: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  userName: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  countryCallingCode: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  phoneNumber: string;\n}\n","export class PaymentManualWithdrawResultDto {\n  result: boolean;\n  error: {};\n  errorCode: string;\n  errorMessage: string;\n  requestJson: string;\n  responseJson: string;\n  requestTime: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { AsYouType, parsePhoneNumber } from 'libphonenumber-js';\n\nexport class PaymentTestDepositRequestDto {\n  // @ApiProperty()\n  // @Transform((params) => Number(params.value))\n  // @IsInt()\n  // @IsNotEmpty()\n  // userId: number;\n\n  @ApiProperty()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  @IsNotEmpty()\n  paymentProviderChannelId: number;\n\n  @ApiProperty()\n  //@Transform((params) => Number(params.value))\n  @IsDecimal({ decimal_digits: '0,2' })\n  @IsNotEmpty()\n  amount: string;\n\n  @ApiPropertyOptional({})\n  @IsOptional()\n  userName: string;\n\n  @ApiPropertyOptional({})\n  @IsOptional()\n  @IsString()\n  phoneNumber: string;\n\n  @ApiPropertyOptional({})\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  bankId: number;\n\n  countryCallingCode: string;\n\n  fixPhoneNumber() {\n    if (!this.phoneNumber) {\n      return;\n    }\n\n    try {\n      let phoneNumber = parsePhoneNumber(this.phoneNumber, 'CN');\n\n      if (!phoneNumber.isValid() && this.phoneNumber.substring(0, 1) !== '+') {\n        this.phoneNumber = `+${this.phoneNumber}`;\n        phoneNumber = parsePhoneNumber(this.phoneNumber, 'CN');\n      }\n\n      if (phoneNumber.isValid()) {\n        this.countryCallingCode = <string>phoneNumber.countryCallingCode;\n        this.phoneNumber = phoneNumber\n          .format('NATIONAL', {\n            humanReadable: false,\n            nationalPrefix: false,\n            v2: false,\n          })\n          .replace(/\\D/g, '');\n      }\n    } catch (error) {}\n  }\n}\n","export class PaymentTestDepositResultDto {\n  result: boolean;\n  url: string;\n  error: {};\n  errorCode: string;\n  errorMessage: string;\n  requestJson: string;\n  responseJson: string;\n  requestTime: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  IsNumberString,\n  IsOptional,\n  MaxLength,\n  MinLength,\n  IsInt,\n  IsNumber,\n  IsDecimal,\n} from 'class-validator';\nimport { BankCodeEnum, CurrencyEnum } from '@workspace/enums';\nimport { Transform } from 'class-transformer';\n\nexport class PaymentWithdrawRequestDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  orderId: string;\n\n  @ApiProperty()\n  @IsDecimal({ decimal_digits: '0,2' })\n  @IsNotEmpty()\n  amount: number;\n\n  @ApiProperty()\n  @IsNumberString()\n  @IsNotEmpty()\n  userId: string;\n\n  @ApiProperty({\n    enum: BankCodeEnum,\n  })\n  @IsEnum(BankCodeEnum)\n  @IsNotEmpty()\n  bankCode: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  bankAccountName: string;\n\n  @ApiProperty()\n  @IsNumberString()\n  @MinLength(13)\n  @MaxLength(20)\n  bankAccountNumber: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  province: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  city: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  branch: string;\n\n  @ApiProperty({\n    enum: CurrencyEnum,\n  })\n  @IsEnum(CurrencyEnum)\n  @IsNotEmpty()\n  currency: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  userName: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  phoneNumber: string;\n\n  @ApiProperty()\n  @IsString()\n  @MinLength(32)\n  @MaxLength(32)\n  hashcode: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n\n  static checkToken(token: string) {\n    return token === process.env.WITHDRAWAL_TOKEN;\n  }\n}\n\nexport class PaymentWithdrawQueryRequestDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  orderId: string;\n\n  @ApiProperty()\n  @Transform((params) => (Number.isNaN(+params.value) ? 0 : +params.value))\n  @IsInt()\n  @IsNotEmpty()\n  amount: number;\n\n  @ApiProperty()\n  @IsEnum(CurrencyEnum)\n  @IsNotEmpty()\n  currency: string;\n}\n","export class WithdrawableBank {\n  bankId: number;\n  bankCode: string;\n  bankName: string;\n  minAmount: number;\n  maxAmount: number;\n  isAvailable: boolean;\n}\n","import { BullModule } from '@nestjs/bull';\nimport { HttpModule, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { OptionsModel } from '../../models/options.model';\nimport { HuobiService } from './huobi.service';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([OptionsModel]),\n    BullModule.registerQueue({\n      name: 'performHuobi',\n    }),\n    HttpModule.register({\n      timeout: 45000,\n      maxRedirects: 5,\n    }),\n    ConfigModule.forRoot({}),\n  ],\n  providers: [HuobiService],\n  controllers: [],\n  exports: [HuobiService],\n})\nexport class HuobiModule {}\n","import { InjectQueue, Process, Processor } from '@nestjs/bull';\nimport { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Interval } from '@nestjs/schedule';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Job, Queue } from 'bull';\nimport { FindOptions } from 'sequelize';\nimport { OptionsModel } from '../../models/options.model';\n\n@Injectable()\n@Processor('performHuobi')\nexport class HuobiService {\n  private performJob: Job;\n\n  constructor(\n    @InjectQueue('performHuobi') private performHuobiTasksQueue: Queue,\n    private httpService: HttpService,\n    @InjectModel(OptionsModel) private optionsRepository: typeof OptionsModel,\n    private configService: ConfigService\n  ) {\n    this.performTask();\n  }\n\n  @Interval('huobiPerformScheduler', 60000)\n  async intervalEntry() {\n    const huobiCheck = this.configService.get<string>('HUOBI_CHECK');\n\n    if (!huobiCheck || !JSON.parse(huobiCheck)) {\n      return;\n    }\n\n    this.performTask();\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform Huobi Task\n  ///////////////////////////////////////////////////////////////////////////////\n  async performTask(force?: boolean) {\n    if (this.performJob && !force) {\n      return false;\n    }\n\n    try {\n      if (this.performJob) {\n        await this.performJob.finished();\n      }\n\n      this.performJob = await this.performHuobiTasksQueue.add(\n        'perform-huobi-tasks',\n        {},\n        { timeout: 60000, attempts: 1 } // 60s 1m\n      );\n\n      await this.performJob.finished();\n    } catch (error) {}\n\n    this.performJob = null;\n\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform Huobi Task Consumer\n  ///////////////////////////////////////////////////////////////////////////////\n  @Process('perform-huobi-tasks')\n  private async performHuobiTasks(job: Job) {\n    let itemUsdtRate;\n    try {\n      const response = await this.httpService\n        .get('https://api.huobi.pro/general/exchange_rate/list', { params: {} })\n        .toPromise();\n\n      const rawData = response.data;\n      if (!rawData) {\n        return;\n      }\n\n      const { code, data, message, success } = rawData;\n\n      if (code !== 200 || success !== true) {\n        return;\n      }\n\n      itemUsdtRate = data.find((item) => item.name === 'usdt_cny');\n\n      if (!itemUsdtRate) {\n        return;\n      }\n\n      let optionItem = await this.optionsRepository.findOne({\n        where: { optName: 'huobiExchangeData' },\n      });\n\n      if (!optionItem) {\n        optionItem = this.optionsRepository.build({\n          optName: 'huobiExchangeData',\n          optValue: JSON.stringify(itemUsdtRate),\n        });\n      } else {\n        optionItem.optValue = Buffer.from(JSON.stringify(itemUsdtRate));\n      }\n\n      await optionItem.save();\n    } catch (error) {\n      //console.log(error);\n    }\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsNotEmpty,\n  Length,\n  IsOptional,\n  IsString,\n  IsNumber,\n  IsEnum,\n  IsDate,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport {\n  OrderStatusEnum,\n  DepositChannelEnum,\n  PaymentProviderEnum,\n} from '@workspace/enums';\nimport { DepositPendingOrderModel } from '../../../models/deposit.pending.order.model';\nexport const ORDER_NUMBER_PREFIX = 'ORDER';\n\nexport class DepositOrderCreateDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDecimal()\n  amount: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsDecimal()\n  usdtExchangeRate: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  userId: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  date: Date;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsNumber()\n  paymentProviderCardId: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  userName: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  last4Digit: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  orderId: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  providerOrderId: string;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsNotEmpty()\n  channelId: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsNotEmpty()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsOptional()\n  paymentProviderChannelId: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsEnum(OrderStatusEnum)\n  status: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  hash: string;\n\n  static pendingDepositFactory(\n    pendingOrder: DepositPendingOrderModel\n  ): DepositOrderCreateDto {\n    const orderCreate = new DepositOrderCreateDto();\n\n    orderCreate.orderId = pendingOrder.orderId;\n    orderCreate.userId = pendingOrder.userId;\n    orderCreate.amount = pendingOrder.amount;\n    orderCreate.usdtExchangeRate = pendingOrder.usdtExchangeRate;\n    orderCreate.status = pendingOrder.status;\n    orderCreate.providerOrderId = pendingOrder.providerOrderId;\n    orderCreate.channelId = pendingOrder.channelId;\n    orderCreate.date = pendingOrder.date;\n    orderCreate.paymentProviderId = pendingOrder.paymentProviderId;\n    orderCreate.paymentProviderChannelId =\n      pendingOrder.paymentProviderChannelId;\n    orderCreate.userName = pendingOrder.userName;\n    orderCreate.last4Digit = pendingOrder.last4Digit;\n    orderCreate.paymentProviderCardId = pendingOrder.paymentProviderCardId;\n\n    return orderCreate;\n  }\n}\n\nexport class DepositOrderUpdateDto {\n  @ApiProperty()\n  @IsEnum(OrderStatusEnum)\n  status: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  providerOrderId: string;\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { DepositOrderModel } from '../../../models/deposit.order.model';\nimport { DepositOrderService } from './deposit.order.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([DepositOrderModel])],\n  providers: [DepositOrderService, DepositOrderModel],\n  controllers: [],\n  exports: [DepositOrderService],\n})\nexport class DepositOrderModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\n\nimport { DepositOrderCreateDto } from './deposit.order.dto';\n\nimport { CreateOptions, SaveOptions } from 'sequelize';\nimport { DepositOrderModel } from '../../../models/deposit.order.model';\n\n@Injectable()\nexport class DepositOrderService {\n  constructor(\n    @InjectModel(DepositOrderModel)\n    private depositRepository: typeof DepositOrderModel\n  ) {}\n  async create(\n    depositOrderCreateDto: DepositOrderCreateDto,\n    options: CreateOptions\n  ): Promise<DepositOrderModel> {\n    depositOrderCreateDto.date = new Date();\n\n    const createdDepositOrder = new DepositOrderModel(depositOrderCreateDto);\n\n    await createdDepositOrder.save(options);\n\n    return this.sanitizeDeposit(createdDepositOrder);\n  }\n\n  async update(\n    order: DepositOrderModel,\n    options: SaveOptions\n  ): Promise<DepositOrderModel> {\n    return await order.save(options);\n  }\n\n  sanitizeDeposit(Deposit: DepositOrderModel): DepositOrderModel {\n    const sanitized = Deposit;\n    delete sanitized.status;\n    delete sanitized.paymentProviderId;\n    delete sanitized.paymentProviderChannelId;\n    return sanitized;\n  }\n\n  async findByOrderId(orderId: string): Promise<DepositOrderModel> {\n    return this.depositRepository.findOne({\n      where: {\n        orderId: orderId,\n      },\n    });\n  }\n\n  async findByHash(hash: string): Promise<DepositOrderModel> {\n    return this.depositRepository.findOne({\n      where: {\n        hash,\n      },\n    });\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsNotEmpty,\n  Length,\n  IsOptional,\n  IsString,\n  IsNumber,\n  IsEnum,\n  IsDate,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport {\n  OrderStatusEnum,\n  DepositChannelEnum,\n  PaymentProviderEnum,\n} from '@workspace/enums';\nexport const ORDER_NUMBER_PREFIX = 'ORDER';\n\nexport class DepositPendingOrderCreateDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  orderId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDecimal()\n  amount: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsDecimal()\n  usdtExchangeRate: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  userId: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  date: Date;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsNumber()\n  paymentProviderCardId: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  userName: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  last4Digit: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  providerOrderId: string;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsNotEmpty()\n  channelId: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsNotEmpty()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsOptional()\n  paymentProviderChannelId: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsEnum(OrderStatusEnum)\n  status: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  hash: string;\n}\n\nexport class DepositPendingOrderUpdateDto {\n  @ApiProperty()\n  @IsEnum(OrderStatusEnum)\n  status: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  providerId: string;\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { DepositPendingOrderModel } from '../../../models/deposit.pending.order.model';\nimport { DepositPendingOrderService } from './deposit.pending.order.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([DepositPendingOrderModel])],\n  providers: [DepositPendingOrderService, DepositPendingOrderModel],\n  controllers: [],\n  exports: [DepositPendingOrderService],\n})\nexport class DepositPendingOrderModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { CreateOptions, SaveOptions, DestroyOptions } from 'sequelize/types';\nimport { DepositPendingOrderModel } from '../../../models/deposit.pending.order.model';\n\nimport { DepositPendingOrderCreateDto } from './deposit.pending.order.dto';\n\n@Injectable()\nexport class DepositPendingOrderService {\n  constructor(\n    @InjectModel(DepositPendingOrderModel)\n    private depositPendingOrderRepository: typeof DepositPendingOrderModel\n  ) {}\n\n  async create(\n    orderCreate: DepositPendingOrderCreateDto,\n    options: CreateOptions\n  ): Promise<DepositPendingOrderModel> {\n    orderCreate.date = new Date();\n\n    const order = new DepositPendingOrderModel(orderCreate);\n\n    await order.save(options);\n\n    return this.sanitizeDeposit(order);\n  }\n\n  async update(\n    order: DepositPendingOrderModel,\n    options: SaveOptions\n  ): Promise<DepositPendingOrderModel> {\n    return await order.save(options);\n  }\n\n  sanitizeDeposit(Deposit: DepositPendingOrderModel): DepositPendingOrderModel {\n    const sanitized = Deposit;\n    delete sanitized.status;\n    delete sanitized.paymentProviderId;\n    delete sanitized.paymentProviderChannelId;\n    return sanitized;\n  }\n\n  async findByOrderId(orderId: string): Promise<DepositPendingOrderModel> {\n    return this.depositPendingOrderRepository.findOne({\n      where: {\n        orderId: orderId,\n      },\n    });\n  }\n\n  async findByHash(hash: string): Promise<DepositPendingOrderModel> {\n    return this.depositPendingOrderRepository.findOne({\n      where: {\n        hash,\n      },\n    });\n  }\n\n  async destroy(order: DepositPendingOrderModel, options?: DestroyOptions) {\n    await order.destroy(options);\n  }\n}\n","import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../../auth/jwt-auth.guard';\nimport { DepositOrderAllService } from './deposit.order.all.service';\n\n@Controller(apiPathsEnum.depositAllOrders)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class DepositOrderAllController {\n  constructor(private depositOrderAllService: DepositOrderAllService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Get(apiPathsEnum.getDepositAllOrders)\n  async gets() {\n    return this.depositOrderAllService.findAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { DepositOrderAllController } from './deposit.order.all.controller';\nimport { DepositOrderAllService } from './deposit.order.all.service';\n\n@Module({\n  imports: [],\n  providers: [DepositOrderAllService],\n  controllers: [DepositOrderAllController],\n  exports: [DepositOrderAllService],\n})\nexport class DepositOrderAllModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Sequelize } from 'sequelize-typescript';\nimport { QueryTypes } from 'sequelize';\nimport * as numeral from 'numeral';\n\n@Injectable()\nexport class DepositOrderAllService {\n  constructor(private sequelize: Sequelize) {}\n\n  async findAll() {\n    const sql = `\n    select \n        pd.id , pd.\"userId\" , pd.\"date\" , pd.\"orderId\" , pd.\"providerOrderId\" , pd.amount , pd.status , \n        pd.\"channelId\" , pd.\"paymentProviderId\" , c2.\"fromPaymentSystemId\" ,\n        pd.\"paymentProviderChannelId\", pd.\"userName\", pd.\"last4Digit\",\n        pp.\"providerName\", pp.\"isDepositSupport\" , pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n        ppc.\"providerChannelName\" , ppc.\"providerMinAmount\" , ppc.\"providerMaxAmount\", ppc.\"isActive\" , ppc.\"isAvailable\" ,\n        c2.\"channelName\" , c2.\"depositOrWithdrawable\" , c2.\"toPaymentSystemId\" \n      from  \"pendingDeposit\" pd \n      left join channel c2 on pd.\"channelId\"  = c2.id\n      left join \"paymentProviders\" pp on pd.\"paymentProviderId\"  = pp.id \n      left join \"paymentProviderChannel\" ppc on pd.\"paymentProviderChannelId\" = ppc.id \n    union\n    select\n        d2.id , d2.\"userId\" , d2.\"date\" , d2.\"orderId\" , d2.\"providerOrderId\" , d2.amount , d2.status , \n        d2.\"channelId\" , d2.\"paymentProviderId\" , c3.\"fromPaymentSystemId\" ,\n        d2.\"paymentProviderChannelId\", d2.\"userName\", d2.\"last4Digit\",\n        pp.\"providerName\", pp.\"isDepositSupport\" , pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n        ppc.\"providerChannelName\" , ppc.\"providerMinAmount\" , ppc.\"providerMaxAmount\", ppc.\"isActive\" , ppc.\"isAvailable\" ,\n        c3.\"channelName\" , c3.\"depositOrWithdrawable\" , c3.\"toPaymentSystemId\" \n      from deposit d2 \n      left join channel c3 on d2.\"channelId\"  = c3.id \n      left join \"paymentProviders\" pp on d2.\"paymentProviderId\"  = pp.id \n      left join \"paymentProviderChannel\" ppc on d2.\"paymentProviderChannelId\" = ppc.id\n    order by \"date\" desc, \"userId\", \"id\"   `;\n\n    const items = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    const orders = [];\n\n    items.forEach((item) => {\n      const order = <\n        {\n          id: string;\n          userId: number;\n          date: string;\n          orderId: number;\n          providerOrderId: string;\n          amount: number;\n          status: string;\n          userName: string;\n          last4Digit: string;\n          paymentProvider: {\n            id: number;\n            providerName: string;\n            isDepositSupport: boolean;\n            isWithdrawalSupport: boolean;\n            isOnlyCardSupport: boolean;\n          };\n          paymentProviderChannel: {\n            id: number;\n            providerChannelName: string;\n            providerMinAmount: number;\n            providerMaxAmount: number;\n            isActive: boolean;\n            isAvailable: boolean;\n          };\n          channel: {\n            id: number;\n            channelName: string;\n            depositOrWithdrawable: number;\n            fromPaymentSystemId: number;\n            toPaymentSystemId: number;\n          };\n        }\n      >{};\n\n      order.id = item['id'];\n      order.userId = numeral(item['userId']).value();\n      order.date = item['date'];\n      order.orderId = numeral(item['orderId']).value();\n      order.providerOrderId = item['providerOrderId'];\n      order.amount = numeral(item['amount']).value();\n      order.status = item['status'];\n      order.userName = item['userName'];\n      order.last4Digit = item['last4Digit'];\n      order.paymentProvider = {\n        id: numeral(item['paymentProviderId']).value(),\n        providerName: item['providerName'],\n        isDepositSupport: JSON.parse(item['isDepositSupport']),\n        isWithdrawalSupport: JSON.parse(item['isWithdrawalSupport']),\n        isOnlyCardSupport: JSON.parse(item['isOnlyCardSupport']),\n      };\n      order.paymentProviderChannel = {\n        id: numeral(item['paymentProviderChannelId']).value(),\n        providerChannelName: item['providerChannelName'],\n        providerMinAmount: numeral(item['providerMinAmount']).value(),\n        providerMaxAmount: numeral(item['providerMaxAmount']).value(),\n        isActive: JSON.parse(item['isActive']),\n        isAvailable: JSON.parse(item['isAvailable']),\n      };\n      order.channel = {\n        id: numeral(item['channelId']).value(),\n        channelName: item['channelName'],\n        depositOrWithdrawable: numeral(item['depositOrWithdrawable']).value(),\n        fromPaymentSystemId: numeral(item['fromPaymentSystemId']).value(),\n        toPaymentSystemId: numeral(item['toPaymentSystemId']).value(),\n      };\n\n      orders.push(order);\n    });\n\n    return orders;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUUID,\n  IsEnum,\n  IsDate,\n  IsNumber,\n  IsNumberString,\n  MinLength,\n  MaxLength,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { CurrencyEnum, OrderStatusEnum } from '@workspace/enums';\nimport { WithdrawPendingOrderModel } from '../../../models/withdraw.pending.order.model';\nexport const ORDER_NUMBER_PREFIX = 'ORDER';\n\nexport class WithdrawOrderCreateDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  orderId: string;\n\n  @ApiProperty()\n  @IsUUID('4')\n  userId: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  clientOrderId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDecimal()\n  amount: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  date: Date;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  providerOrderId: string;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsOptional()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @IsEnum(CurrencyEnum)\n  @IsNotEmpty()\n  currency: string;\n\n  @ApiProperty()\n  @IsNumberString()\n  @MinLength(32)\n  @MaxLength(32)\n  hashcode: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  bankId: number;\n\n  @IsNotEmpty()\n  @IsString()\n  bankAccountName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  bankAccountNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  province: string;\n\n  @IsNotEmpty()\n  @IsString()\n  city: string;\n\n  @IsOptional()\n  @IsString()\n  branch: string;\n\n  @IsOptional()\n  @IsString()\n  userName: string;\n\n  @IsOptional()\n  @IsString()\n  countryCallingCode: string;\n\n  @IsOptional()\n  @IsString()\n  phoneNumber: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsEnum(OrderStatusEnum)\n  status: string;\n\n  static pendingWithdrawFactory(\n    pendingOrder: WithdrawPendingOrderModel\n  ): WithdrawOrderCreateDto {\n    const orderCreate = new WithdrawOrderCreateDto();\n\n    orderCreate.orderId = pendingOrder.orderId;\n    orderCreate.userId = pendingOrder.userId;\n    orderCreate.clientOrderId = pendingOrder.clientOrderId;\n    orderCreate.amount = pendingOrder.amount;\n    orderCreate.status = pendingOrder.status;\n    orderCreate.providerOrderId = pendingOrder.providerOrderId;\n    orderCreate.date = pendingOrder.date;\n    orderCreate.paymentProviderId = pendingOrder.paymentProviderId;\n    orderCreate.currency = pendingOrder.currency;\n    orderCreate.hashcode = pendingOrder.hashcode;\n\n    orderCreate.bankId = pendingOrder.bankId;\n    orderCreate.bankAccountName = pendingOrder.bankAccountName;\n    orderCreate.bankAccountNumber = pendingOrder.bankAccountNumber;\n    orderCreate.province = pendingOrder.province;\n    orderCreate.city = pendingOrder.city;\n    orderCreate.branch = pendingOrder.branch;\n    orderCreate.userName = pendingOrder.userName;\n    orderCreate.countryCallingCode = pendingOrder.countryCallingCode;\n    orderCreate.phoneNumber = pendingOrder.phoneNumber;\n\n    return orderCreate;\n  }\n}\n\nexport class WithdrawOrderUpdateDto {\n  @ApiProperty()\n  @IsEnum(OrderStatusEnum)\n  status: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  providerId: string;\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { WithdrawOrderModel } from '../../../models/withdraw.order.model';\nimport { WithdrawOrderService } from './withdraw.order.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([WithdrawOrderModel])],\n  providers: [WithdrawOrderService, WithdrawOrderModel],\n  controllers: [],\n  exports: [WithdrawOrderService],\n})\nexport class WithdrawOrderModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\n\nimport { WithdrawOrderCreateDto } from './withdraw.order.dto';\n\nimport { CreateOptions, SaveOptions } from 'sequelize';\nimport { WithdrawOrderModel } from '../../../models/withdraw.order.model';\nimport { PaymentWithdrawQueryRequestDto } from '../../dto/payment.withdraw.request.dto';\n\n@Injectable()\nexport class WithdrawOrderService {\n  constructor(\n    @InjectModel(WithdrawOrderModel)\n    private withdrawRepository: typeof WithdrawOrderModel\n  ) {}\n\n  async create(\n    withdrawOrderCreateDto: WithdrawOrderCreateDto,\n    options?: CreateOptions\n  ): Promise<WithdrawOrderModel> {\n    withdrawOrderCreateDto.date = new Date();\n\n    const order = new WithdrawOrderModel(withdrawOrderCreateDto);\n\n    await order.save(options);\n\n    return order;\n  }\n\n  async update(\n    order: WithdrawOrderModel,\n    options: SaveOptions\n  ): Promise<WithdrawOrderModel> {\n    return await order.save(options);\n  }\n\n  sanitizeWithdraw(Withdraw: WithdrawOrderModel): WithdrawOrderModel {\n    const sanitized = Withdraw;\n    delete sanitized.status;\n    delete sanitized.paymentProviderId;\n    return sanitized;\n  }\n\n  async findByOrderId(orderId: string): Promise<WithdrawOrderModel> {\n    return this.withdrawRepository.findOne({\n      where: {\n        orderId: orderId,\n      },\n    });\n  }\n\n  async findByClientOrderId(\n    clientOrderId: string\n  ): Promise<WithdrawOrderModel> {\n    return this.withdrawRepository.findOne({\n      where: { clientOrderId },\n    });\n  }\n\n  async findByOrder(withdrawQueryRequestDto: PaymentWithdrawQueryRequestDto) {\n    const orderId: string = withdrawQueryRequestDto.orderId;\n    const currency: string = withdrawQueryRequestDto.currency;\n    const amount: number = withdrawQueryRequestDto.amount;\n    return this.withdrawRepository.findOne({\n      where: {\n        orderId: orderId,\n        currency: currency,\n        amount: amount,\n      },\n    });\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDecimal,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUUID,\n  IsEnum,\n  IsDate,\n  IsNumber,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { CurrencyEnum, OrderStatusEnum } from '@workspace/enums';\nexport const ORDER_NUMBER_PREFIX = 'ORDER';\n\nexport class WithdrawPendingOrderCreateDto {\n  @IsNotEmpty()\n  @IsDecimal()\n  amount: number;\n\n  @IsNotEmpty()\n  @IsString()\n  orderId: string;\n\n  @IsNotEmpty()\n  @IsString()\n  userId: string;\n\n  @IsNotEmpty()\n  @IsString()\n  clientOrderId: string;\n\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  date: Date;\n\n  @IsString()\n  @IsOptional()\n  providerOrderId: string;\n\n  @IsNumber()\n  @IsOptional()\n  paymentProviderId: number;\n\n  @IsNotEmpty()\n  @IsEnum(CurrencyEnum)\n  currency: string;\n\n  @IsNotEmpty()\n  @IsString()\n  hashcode: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  bankId: number;\n\n  @IsNotEmpty()\n  @IsString()\n  bankAccountName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  bankAccountNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  province: string;\n\n  @IsNotEmpty()\n  @IsString()\n  city: string;\n\n  @IsOptional()\n  @IsString()\n  branch: string;\n\n  @IsOptional()\n  @IsString()\n  userName: string;\n\n  @IsOptional()\n  @IsString()\n  countryCallingCode: string;\n\n  @IsOptional()\n  @IsString()\n  phoneNumber: string;\n\n  @IsOptional()\n  @IsEnum(OrderStatusEnum)\n  status: string;\n}\n\nexport class WithdrawPendingOrderUpdateDto {\n  @ApiProperty()\n  @IsEnum(OrderStatusEnum)\n  status: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  providerId: string;\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { WithdrawPendingOrderModel } from '../../../models/withdraw.pending.order.model';\nimport { WithdrawPendingOrderService } from './withdraw.pending.order.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([WithdrawPendingOrderModel])],\n  providers: [WithdrawPendingOrderService, WithdrawPendingOrderModel],\n  controllers: [],\n  exports: [WithdrawPendingOrderService],\n})\nexport class WithdrawPendingOrderModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\n\nimport { WithdrawPendingOrderCreateDto } from './withdraw.pending.order.dto';\nimport { CreateOptions, DestroyOptions, SaveOptions } from 'sequelize/types';\nimport { WithdrawPendingOrderModel } from '../../../models/withdraw.pending.order.model';\nimport { PaymentWithdrawQueryRequestDto } from '../../dto/payment.withdraw.request.dto';\n\n@Injectable()\nexport class WithdrawPendingOrderService {\n  constructor(\n    @InjectModel(WithdrawPendingOrderModel)\n    private withdrawPendingRepository: typeof WithdrawPendingOrderModel\n  ) {}\n\n  async create(\n    withdrawOrderCreateDto: WithdrawPendingOrderCreateDto,\n    options: CreateOptions\n  ): Promise<WithdrawPendingOrderModel> {\n    withdrawOrderCreateDto.date = new Date();\n\n    const order = WithdrawPendingOrderModel.build(withdrawOrderCreateDto);\n\n    return await order.save(options);\n  }\n\n  async update(\n    order: WithdrawPendingOrderModel,\n    options: SaveOptions\n  ): Promise<WithdrawPendingOrderModel> {\n    return await order.save(options);\n  }\n\n  async destroy(order: WithdrawPendingOrderModel, options?: DestroyOptions) {\n    await order.destroy(options);\n  }\n\n  async findOne(): Promise<WithdrawPendingOrderModel> {\n    return this.withdrawPendingRepository.findOne();\n  }\n\n  async findByOrderId(orderId: string): Promise<WithdrawPendingOrderModel> {\n    return this.withdrawPendingRepository.findOne({\n      where: {\n        orderId: orderId,\n      },\n    });\n  }\n\n  async findByClientOrderId(\n    clientOrderId: string\n  ): Promise<WithdrawPendingOrderModel> {\n    return this.withdrawPendingRepository.findOne({\n      where: { clientOrderId },\n    });\n  }\n\n  async findByOrder(withdrawQueryRequestDto: PaymentWithdrawQueryRequestDto) {\n    const orderId: string = withdrawQueryRequestDto.orderId;\n    const currency: string = withdrawQueryRequestDto.currency;\n    const amount: number = withdrawQueryRequestDto.amount;\n    return this.withdrawPendingRepository.findOne({\n      where: {\n        orderId: orderId,\n        currency: currency,\n        amount: amount,\n      },\n    });\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { LocaleEnum } from '@workspace/enums';\nimport { SearchDto } from '../../../../shared/dto/Search.dto';\nimport { Type } from 'class-transformer';\nimport { IsEnum, IsNotEmpty, IsString, ValidateNested } from 'class-validator';\n\n\nexport class GetWithdrawOrderAllRequestDto extends SearchDto {\n}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../../auth/jwt-auth.guard';\nimport { GetWithdrawOrderAllRequestDto } from './dto/get.withdraw.order.all.request.dto';\nimport { WithdrawOrderAllService } from './withdraw.order.all.service';\n\n@Controller(apiPathsEnum.withdrawAllOrders)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class WithdrawOrderAllController {\n  constructor(private withdrawOrderAllService: WithdrawOrderAllService) { }\n\n  // @UseGuards(JwtAuthGuard)\n  // @ApiBearerAuth()\n  @Post(apiPathsEnum.getWithdrawAllOrders)\n  async gets(@Body() request: GetWithdrawOrderAllRequestDto) {\n    return this.withdrawOrderAllService.findAll(request);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { WithdrawOrderAllController } from './withdraw.order.all.controller';\nimport { WithdrawOrderAllService } from './withdraw.order.all.service';\n\n@Module({\n  imports: [],\n  providers: [WithdrawOrderAllService],\n  controllers: [WithdrawOrderAllController],\n  exports: [WithdrawOrderAllService],\n})\nexport class WithdrawOrderAllModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Sequelize } from 'sequelize-typescript';\nimport { QueryTypes } from 'sequelize';\nimport * as numeral from 'numeral';\nimport { GetWithdrawOrderAllRequestDto } from './dto/get.withdraw.order.all.request.dto';\n\nconst filterKeys = {\n  userId: { type: 'string' }\n};\n\n@Injectable()\nexport class WithdrawOrderAllService {\n  constructor(private sequelize: Sequelize) { }\n\n  async findAll(request: GetWithdrawOrderAllRequestDto) {\n\n    let sql_where_1 = '';\n    let sql_where_2 = '';\n    let prefix = '';\n    request.filters.forEach(_ => {\n      const filterKey = filterKeys[_.key];\n      if (!filterKey) {\n        return;\n      }\n\n      const value = filterKey.type === 'number' ? _.value : `'${_.value}'`;\n\n      prefix = sql_where_1.length > 0 ? \"AND\" : \"\";\n      sql_where_1 += ` ${prefix} pw.\"${_.key}\" = ${value}`;\n\n      prefix = sql_where_2.length > 0 ? \"AND\" : \"\";\n      sql_where_2 += ` ${prefix} w.\"${_.key}\" = ${value}`;\n    });\n\n    if (sql_where_1.length > 0) sql_where_1 = `where ${sql_where_1}`;\n    if (sql_where_2.length > 0) sql_where_2 = `where ${sql_where_2}`;\n\n    let sql = `\n    select\n        sum(total) total\n      from\n        (\n        select\n          count(pw.*) total\n          from\n            \"pendingWithdraw\" pw\n          ${sql_where_1}\n        union all\n          select\n            count(w.*) total\n          from\n            withdraw w\n          ${sql_where_2} \n        ) x\n    `;\n\n    const totalDatas = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    const total = totalDatas[0]['total'];\n\n    let sql_sorts = '';\n    request.sorts.forEach(_ => {\n      prefix = sql_sorts.length > 0 ? ',' : '';\n      sql_sorts += ` ${prefix} \"${_.property}\" ${_.direction}`;\n    })\n    if (sql_sorts.length > 0) sql_sorts = `order by ${sql_sorts}`;\n\n    sql = `\n      select \n          pw.id , pw.\"userId\" , pw.\"date\" , pw.\"orderId\" , pw.\"clientOrderId\" , pw.amount ,\n          pw.\"providerOrderId\" , pw.status ,\n          pw.\"paymentProviderId\" , pp.\"providerName\", pp.\"isDepositSupport\" , pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n          pw.currency , pw.hashcode , pw.\"errorCode\" , pw.\"errorMessage\" ,\n          pw.\"bankId\", pw.\"bankAccountName\", pw.\"bankAccountNumber\", \n          pw.\"province\", pw.\"city\", pw.\"branch\",\n          pw.\"userName\", pw.\"phoneNumber\", pw.\"countryCallingCode\",\n          ppb.\"paymentProviderBankCode\" , ppb.\"paymentProviderBankName\" , ppb.id \"paymentProviderBankId\",\n          pw.\"currency\", bk.\"bankName\", bk.\"bankCode\"\n        from \"pendingWithdraw\" pw \n        left join \"paymentProviders\" pp on pw.\"paymentProviderId\" = pp.id \n        left join \"paymentProviderBank\" ppb on pw.\"paymentProviderId\" =  ppb.\"paymentProviderId\" AND pw.\"bankId\" = ppb.\"bankId\"\n        left join \"bank\" bk on bk.\"id\" = ppb.\"bankId\"\n        ${sql_where_1}\n      union\n      select\n          w.id, w.\"userId\", w.\"date\" , w.\"orderId\" , w.\"clientOrderId\" , w.amount ,\n          w.\"providerOrderId\" , w.status ,\n          w.\"paymentProviderId\", pp.\"providerName\", pp.\"isDepositSupport\" , pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n          w.currency , w.hashcode , w.\"errorCode\" , w.\"errorMessage\" ,\n          w.\"bankId\", w.\"bankAccountName\", w.\"bankAccountNumber\", \n          w.\"province\", w.\"city\", w.\"branch\",\n          w.\"userName\", w.\"phoneNumber\", w.\"countryCallingCode\",\n          ppb.\"paymentProviderBankCode\" , ppb.\"paymentProviderBankName\" , ppb.id \"paymentProviderBankId\",\n          w.\"currency\", bk.\"bankName\", bk.\"bankCode\"\n        from withdraw w \n        left join \"paymentProviders\" pp on w.\"paymentProviderId\" = pp.id\n        left join \"paymentProviderBank\" ppb on w.\"paymentProviderId\" =  ppb.\"paymentProviderId\" AND w.\"bankId\" = ppb.\"bankId\"\n        left join \"bank\" bk on bk.\"id\" = ppb.\"bankId\"\n        ${sql_where_2}\n      -- order by \"date\" desc, \"userId\", \"id\"\n      ${sql_sorts}\n      limit ${request.pageSize} offset ${request.page * request.pageSize}`;\n\n    const items = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    const orders = [];\n\n    items.forEach((item) => {\n      const order = <\n        {\n          id: string;\n          userId: number;\n          date: string;\n          orderId: number;\n          clientOrderId: number;\n          amount: number;\n          providerOrderId: string;\n          status: string;\n          errorCode: string;\n          errorMessage: string;\n          paymentProvider: {\n            id: number;\n            providerName: string;\n            isDepositSupport: boolean;\n            isWithdrawalSupport: boolean;\n            isOnlyCardSupport: boolean;\n          };\n          paymentProviderBank: {\n            id: number;\n            bankId: number;\n            paymentProviderBankCode: string;\n            paymentProviderBankName: string;\n          };\n          bank: {\n            id: number;\n            bankName: string;\n            bankCode: string;\n          };\n          bankId: number;\n          bankAccountName: string;\n          bankAccountNumber: string;\n          province: string;\n          city: string;\n          branch: string;\n          currency: string;\n          userName: string;\n          countryCallingCode: string;\n          phoneNumber: string;\n        }\n        >{};\n\n      order.id = item['id'];\n      order.userId = numeral(item['userId']).value();\n      order.date = item['date'];\n      order.orderId = numeral(item['orderId']).value();\n      order.clientOrderId = numeral(item['clientOrderId']).value();\n      order.providerOrderId = item['providerOrderId'];\n      order.amount = numeral(item['amount']).value();\n      order.status = item['status'];\n      order.errorCode = item['errorCode'];\n      order.errorMessage = item['errorMessage'];\n      order.paymentProvider = {\n        id: numeral(item['paymentProviderId']).value(),\n        providerName: item['providerName'],\n        isDepositSupport: JSON.parse(item['isDepositSupport']),\n        isWithdrawalSupport: JSON.parse(item['isWithdrawalSupport']),\n        isOnlyCardSupport: JSON.parse(item['isOnlyCardSupport']),\n      };\n      order.paymentProviderBank = {\n        id: numeral(item['paymentProviderBankId']).value(),\n        paymentProviderBankCode: item['paymentProviderBankCode'],\n        paymentProviderBankName: item['paymentProviderBankName'],\n        bankId: item['bankId'],\n      };\n      order.bankId = item['bankId'];\n      order.bankAccountName = item['bankAccountName'];\n      order.bankAccountNumber = item['bankAccountNumber'];\n      order.province = item['province'];\n      order.city = item['city'];\n      order.branch = item['branch'];\n      order.userName = item['usrName'];\n      order.countryCallingCode = item['countryCallingCode'];\n      order.phoneNumber = item['phoneNumber'];\n      order.currency = item['currency'];\n      order.bank = {\n        id: item['bankId'],\n        bankCode: item['bankCode'],\n        bankName: item['bankName'],\n      };\n\n      orders.push(order);\n    });\n\n    return { total, orders };\n  }\n}\n","import { InjectQueue, Process, Processor } from '@nestjs/bull';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Interval } from '@nestjs/schedule';\nimport { Job, Queue } from 'bull';\nimport { BankModel } from '../models/bank.entity';\nimport { ChannelService } from './channel/channel.service';\nimport { PaymentService } from './payment.service';\nimport { PaymentProviderBankService } from './providers/payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderChannelService } from './providers/payment-provider-channel/payment.provider.channel.service';\nimport { PaymentProviderEntityService } from './providers/payment-provider-entity/Payment.provider.entity.service';\n\n@Injectable()\n@Processor('paymentCheckTasks')\nexport class PaymentCheckServie {\n  private performJob: Job;\n\n  constructor(\n    private configService: ConfigService,\n    private channelService: ChannelService,\n    private paymentService: PaymentService,\n    private payProviderEntityService: PaymentProviderEntityService,\n    private payProviderChannelService: PaymentProviderChannelService,\n    private payProviderBankService: PaymentProviderBankService,\n\n    @InjectQueue('paymentCheckTasks') private paymentCheckQueue: Queue\n  ) {}\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform Check Schedule\n  ///////////////////////////////////////////////////////////////////////////////\n  @Interval('paymentCheckScheduler', 900000) // 15mins\n  async intervalEntry() {\n    const paymentChannelCheck = this.configService.get<string>(\n      'PAYMENT_CHANNEL_CHECK'\n    );\n\n    if (!paymentChannelCheck || !JSON.parse(paymentChannelCheck)) {\n      return;\n    }\n\n    this.performPaymentCheck();\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform Payment Check\n  ///////////////////////////////////////////////////////////////////////////////\n  async performPaymentCheck(force?: boolean) {\n    if (this.performJob && !force) {\n      return false;\n    }\n\n    try {\n      if (this.performJob) {\n        await this.performJob.finished();\n      }\n\n      this.performJob = await this.paymentCheckQueue.add(\n        'perform-payment-check-tasks',\n        {},\n        { timeout: 900000, attempts: 1 } // 15mins\n      );\n\n      await this.performJob.finished();\n    } catch (error) {}\n\n    this.performJob = null;\n\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Perform PaymentCheckTasks Consummer\n  ///////////////////////////////////////////////////////////////////////////////\n  @Process('perform-payment-check-tasks')\n  private async performPaymentCheckTasks(job: Job) {\n    // check payment provider channel\n    console.log('check payment provider channel');\n    try {\n      const paymentProviderChannels = await this.payProviderChannelService.getDeposits();\n      if (paymentProviderChannels && paymentProviderChannels.length > 0) {\n        for (let i = 0; i < paymentProviderChannels.length; i++) {\n          const paymentProviderChannel = paymentProviderChannels[i];\n          const isAvaialble = await this.paymentService.getPaymentProviderChannelDepositable(\n            paymentProviderChannel\n          );\n\n          paymentProviderChannel.isAvailable = isAvaialble;\n          await paymentProviderChannel.save();\n\n          if (await job.isFailed()) {\n            return;\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    // check payment provider bank\n    console.log('check payment provider bank');\n    try {\n      const paymentProviders = await this.payProviderEntityService.findAll();\n      for (let i = 0; i < paymentProviders.length; i++) {\n        const paymentProvider = paymentProviders[i];\n\n        const paymentProviderBanks = await this.payProviderBankService.findAll({\n          include: [{ model: BankModel, as: 'bank' }],\n          where: {\n            paymentProviderId: paymentProvider.id,\n          },\n          order: [[{ model: BankModel, as: 'bank' }, 'id', 'ASC']],\n        });\n\n        if (!paymentProviderBanks || paymentProviderBanks.length < 1) {\n          continue;\n        }\n\n        let paymentProviderBank = paymentProviderBanks[0];\n\n        // console.log(\n        //   paymentProviderBank.paymentProviderId,\n        //   ':',\n        //   paymentProviderBank.paymentProviderBankName\n        // );\n\n        const isAvailable = await this.paymentService.getPaymentProviderBankWithdrawable(\n          paymentProviderBank\n        );\n\n        for (let j = 0; j < paymentProviderBanks.length; j++) {\n          paymentProviderBank = paymentProviderBanks[j];\n          paymentProviderBank.isAvailable = isAvailable;\n\n          await paymentProviderBank.save();\n        }\n\n        if (await job.isFailed()) {\n          return;\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    console.log('END OF CHECK');\n  }\n\n  // delay(ms: number) {\n  //   return new Promise((resolve) => setTimeout(resolve, ms));\n  // }\n}\n","import {\n  Controller,\n  Headers,\n  Post,\n  Query,\n  HttpException,\n  HttpStatus,\n  Get,\n  Ip,\n  Req,\n  Body,\n  UseInterceptors,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConsumes,\n  ApiOperation,\n  ApiProperty,\n  ApiTags,\n} from '@nestjs/swagger';\nimport {\n  apiPathsEnum,\n  apiTagsEnum,\n  apiEndpointDecriptionEnum,\n} from '@workspace/enums';\nimport { PaymentService } from './payment.service';\nimport { PaymentProviderDepositRequestDto } from './providers/payment-provider/payment.provider.deposit.request.dto';\nimport { PaymentProviderDepositResult } from './providers/payment-provider/payment.provider.deposit.result';\nimport { PaymentProviderWithdrawResult } from './providers/payment-provider/payment.provider.withdraw.result';\nimport { BetConstructWithdrawalResponse } from './betContruct/betConstruct.withdraw.response';\nimport { DepositableChannel } from './dto/depositable.channel';\nimport { WithdrawableBank } from './dto/withdrawable.banks';\nimport { RequestIpAddress } from '../decorators/request.ip.decorators';\nimport { PaymentSystemModel } from '../models/payment.system.model';\nimport { DepositablePaymentSystem } from './dto/depositable.paymentsystem';\nimport { PaymentProviderWithdrawRequestDto } from './providers/payment-provider/payment.provider.withdraw.request.dto';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { PaymentManualDepositRequestDto } from './dto/payment.manual.deposit.request.dto';\nimport { PaymentManualDepositResultDto } from './dto/payment.manual.deposit.result.dto';\nimport { PaymentMakeDepositSuccessRequestDto } from './dto/payment.make.deposit.success.request.dto';\nimport { PaymentManualWithdrawRequestDto } from './dto/payment.manual.withdraw.request.dto';\nimport { PaymentManualWithdrawResultDto } from './dto/payment.manual.withdraw.result.dto';\nimport { PaymentMakeWithdrawSuccessRequestDto } from './dto/payment.make.withdraw.success.request.dto';\nimport { PaymentTestDepositRequestDto } from './dto/payment.test.deposit.request.dto';\nimport { PaymentTestDepositResultDto } from './dto/payment.test.deposit.result.dto';\nimport { PaymentDepositByCardRequestDto } from './dto/payment.deposit.bycard.request.dto';\nimport { PaymentDepositRequestDto } from './dto/payment.deposit.request.dto';\nimport { PaymentWithdrawRequestDto } from './dto/payment.withdraw.request.dto';\n\n// class BCWithdrawRequest {\n//   @ApiProperty()\n//   @IsString()\n//   @IsNotEmpty()\n//   userId: string;\n\n//   @ApiProperty()\n//   @IsString()\n//   @IsNotEmpty()\n//   orderId: string;\n\n//   @ApiProperty()\n//   @IsNumber()\n//   @IsNotEmpty()\n//   amount: number;\n\n//   @ApiProperty()\n//   @IsString()\n//   @IsNotEmpty()\n//   currency: string;\n// }\n\n@Controller(apiPathsEnum.payment)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class PaymentController {\n  constructor(private paymentService: PaymentService) { }\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // Deposit\n  //////////////////////////////////////////////////////////////////////////////////////\n  @Post(apiPathsEnum.deposit)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.paymentDeposit })\n  // @UseGuards(JwtAuthGuard)\n  // @ApiBearerAuth()\n  async deposit(\n    @Query() depositRequestDto: PaymentDepositRequestDto,\n    @RequestIpAddress() ip: string,\n    @Headers() headers,\n    @Req() req: Request\n  ): Promise<PaymentProviderDepositResult> {\n    const paymentProviderDepositRequestDto = PaymentProviderDepositRequestDto.responseFactory(\n      depositRequestDto,\n      ip,\n      headers\n    );\n    return this.paymentService.deposit(paymentProviderDepositRequestDto);\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // Deposit\n  //////////////////////////////////////////////////////////////////////////////////////\n  @Post(apiPathsEnum.depositByCard)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.paymentDepositByCard,\n  })\n  async getDepositInfo(@Body() requestDto: PaymentDepositByCardRequestDto) {\n    return this.paymentService.depositByCard(requestDto);\n  }\n\n  @Post(apiPathsEnum.manualDeposit)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.paymentManualDeposit })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async manualDeposit(\n    @Body() requestDto: PaymentManualDepositRequestDto,\n    @RequestIpAddress() ip: string,\n    @Headers() headers\n  ): Promise<PaymentManualDepositResultDto> {\n    return this.paymentService.manualDeposit(requestDto, ip, headers);\n  }\n\n  @Post(apiPathsEnum.testDeposit)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.paymentTestDeposit })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async testDeposit(\n    @Body() requestDto: PaymentTestDepositRequestDto,\n    @RequestIpAddress() ip: string,\n    @Headers() headers\n  ): Promise<PaymentTestDepositResultDto> {\n    return this.paymentService.testDeposit(requestDto, ip, headers);\n  }\n\n  @Post(apiPathsEnum.depositMakeSuccess)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.paymentDepositMakeSuccess,\n  })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async depositMakeSuccess(\n    @Body() requestDto: PaymentMakeDepositSuccessRequestDto\n  ) {\n    return this.paymentService.makeDepositSuccess(requestDto);\n  }\n\n  // @Post('getHeaders')\n  // async getHeaders(\n  //   @Headers() headers,\n  //   @Ip() ip,\n  //   @RequestIpAddress() requestIp,\n  //   @Req() request\n  // ) {\n  //   return {\n  //     headers,\n  //     ip,\n  //     requestIp,\n  //     remoteAddress: request.connection.remoteAddress,\n  //     reqIp: request.ip,\n  //     token: process.env.SECRET_TOKEN,\n  //   };\n  // }\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // Withdraw\n  //////////////////////////////////////////////////////////////////////////////////////\n  @Post(apiPathsEnum.withdraw)\n  @ApiConsumes('application/x-www-form-urlencoded')\n  @ApiOperation({ description: apiEndpointDecriptionEnum.paymentWithdraw })\n  // @UseGuards(JwtAuthGuard)\n  // @ApiBearerAuth()\n  async withdraw(\n    @Body() withdrawRequestDto: PaymentWithdrawRequestDto,\n    @RequestIpAddress() ip: string,\n    @Headers()\n    headers\n  ): Promise<PaymentProviderWithdrawResult | Error> {\n    const checkToken = PaymentWithdrawRequestDto.checkToken(\n      withdrawRequestDto.token\n    );\n    if (!checkToken) {\n      throw new HttpException('Unauthorized request', HttpStatus.FORBIDDEN);\n    }\n\n    const paymentProviderWithdrawRequestDto = PaymentProviderWithdrawRequestDto.responseFactory(\n      withdrawRequestDto,\n      ip,\n      headers\n    );\n\n    return this.paymentService.withdraw(paymentProviderWithdrawRequestDto);\n  }\n\n  @Post(apiPathsEnum.manualWithdraw)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.paymentManualWithdraw,\n  })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async manualWithdraw(\n    @Body() requestDto: PaymentManualWithdrawRequestDto,\n    @RequestIpAddress() ip: string,\n    @Headers() headers\n  ): Promise<PaymentManualWithdrawResultDto> {\n    return this.paymentService.manualWithdraw(requestDto, ip, headers);\n  }\n\n  @Post(apiPathsEnum.withdrawMakeSuccess)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.paymentDepositMakeSuccess,\n  })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  async withdrawMakeSuccess(\n    @Body() requestDto: PaymentMakeWithdrawSuccessRequestDto\n  ) {\n    return this.paymentService.makeWithdrawSuccess(requestDto);\n  }\n\n  // @Post('bcwithdraw')\n  // async bcWithdraw(@Body() params: BCWithdrawRequest) {\n  //   return this.paymentService.bcWithdraw(params);\n  // }\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable PaymentSystems\n  //////////////////////////////////////////////////////////////////////////////////////\n  @Get(apiPathsEnum.getDepositablePaymentSystems)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.getDepositablePaymentSystems,\n  })\n  async getDepositablePaymentSystems(): Promise<DepositablePaymentSystem[]> {\n    return this.paymentService.getDepositablePaymentSystems();\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable UsdtProtos\n  //////////////////////////////////////////////////////////////////////////////////////\n  @Get(apiPathsEnum.getDepositableUsdtProtos)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.getDepositableUsdtProtos\n  })\n  async getDepositableUsdtProtos() {\n    return this.paymentService.getDepositableUsdtProts();\n  }\n\n  // ///////////////////////////////////////////////////////////////////////////////////////\n  // // Get DepositableChannels\n  // //////////////////////////////////////////////////////////////////////////////////////\n  // @Get(apiPathsEnum.getDepositableChannels)\n  // @ApiOperation({\n  //   description: apiEndpointDecriptionEnum.getDepositableChannels,\n  // })\n  // async getDepositableChannels(): Promise<DepositableChannel[]> {\n  //   return await this.paymentService.getDepositableChannels();\n  // }\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // Get Withdrawable Banks\n  //////////////////////////////////////////////////////////////////////////////////////\n  @Get(apiPathsEnum.getWithdrawableBanks)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.getWithdrawableBanks,\n  })\n  async getWithdrawableBanks() {\n    return this.paymentService.getWithdrawableBanks();\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // Check Channels Depositables\n  //////////////////////////////////////////////////////////////////////////////////////\n  // @Post(apiPathsEnum.checkChannelsDepositable)\n  // @ApiOperation({})\n  // @UseGuards(JwtAuthGuard)\n  // @ApiBearerAuth()\n  // async checkChannelsDepositable() {\n  //   //return this.paymentService.checkChannelsDepositable();\n  // }\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // Check Banks Withdrawable\n  //////////////////////////////////////////////////////////////////////////////////////\n  // @Post(apiPathsEnum.checkBanksWithdrawable)\n  // @ApiOperation({})\n  // @UseGuards(JwtAuthGuard)\n  // @ApiBearerAuth()\n  // async checkBanksWithdrawable() {\n  //   //return this.paymentService.checkBanksWithdrawable();\n  // }\n}\n","import { HttpException, HttpStatus } from '@nestjs/common';\nexport class DatabaseException extends HttpException {\n  constructor() {\n    super('DatabaseError', HttpStatus.BAD_REQUEST);\n  }\n}\nexport class NoRecordException extends HttpException {\n  constructor() {\n    super('No Record', HttpStatus.NOT_ACCEPTABLE);\n  }\n}\nexport class OrderExistException extends HttpException {\n  constructor() {\n    super('that order Id exists', HttpStatus.NOT_ACCEPTABLE);\n  }\n}\nexport class NoSupportedBankException extends HttpException {\n  constructor() {\n    super('No Supported bank', HttpStatus.NOT_ACCEPTABLE);\n  }\n}\nexport class NoProviderNameException extends HttpException {\n  constructor() {\n    super('No Provider name', HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\nexport class NoProviderException extends HttpException {\n  constructor() {\n    super(\n      'There is no available payment provider',\n      HttpStatus.SERVICE_UNAVAILABLE\n    );\n  }\n}\nexport class NoSupportedChannelException extends HttpException {\n  constructor() {\n    super('There is no supported channel', HttpStatus.SERVICE_UNAVAILABLE);\n  }\n}\nexport class PaymentProviderException extends HttpException {\n  constructor() {\n    super('Bad data from provider', HttpStatus.BAD_GATEWAY);\n  }\n}\nexport class NotSupportedBank extends HttpException {\n  constructor() {\n    super('No supported bank code', HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\nexport class NotSupportedPhoneNumber extends HttpException {\n  constructor() {\n    super('No supported phoneNumber', HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n","import { HttpModule, Module } from '@nestjs/common';\nimport { PaymentService } from './payment.service';\nimport { PaymentController } from './payment.controller';\n\nimport { PaymentProviderModule } from './providers/payment-provider/payment.provider.module';\nimport configuration from './providers/payment-provider/configuration';\nimport { ConfigModule } from '@nestjs/config';\nimport { DepositOrderModule } from './order/deposit-order/deposit.order.module';\nimport { WithdrawOrderModule } from './order/withdraw-order/withdraw.order.module';\nimport { WithdrawPendingOrderModule } from './order/withdraw-pending-order/withdraw.pending.order.module';\nimport { PaymentProviderEntityModule } from './providers/payment-provider-entity/payment.provider.entity.module';\nimport { ChannelModule } from './channel/channel.module';\nimport { PaymentProviderChannelModule } from './providers/payment-provider-channel/payment.provider.channel.module';\nimport { BetConstructModule } from './betContruct/betConsturct.module';\nimport { BankModule } from './bank/bank.module';\nimport { PaymentProviderBankModule } from './providers/payment-provider-bank/payment.provider.bank.module';\nimport { PaymentSystemModule } from './paymentSystem/payment.system.module';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { PaymentCheckServie } from './payment.check.service';\nimport { TestModel } from '../models/test.entity';\nimport { BullModule } from '@nestjs/bull';\nimport { DepositPendingOrderModel } from '../models/deposit.pending.order.model';\nimport { DepositOrderModel } from '../models/deposit.order.model';\nimport { WithdrawPendingOrderModel } from '../models/withdraw.pending.order.model';\nimport { WithdrawOrderModel } from '../models/withdraw.order.model';\nimport { OptionsModel } from '../models/options.model';\nimport { ErrorModule } from '../error/error.module';\nimport { PaymentProviderCardModule } from './providers/payment-provider-card/payment.provider.card.module';\nimport { HuobiModule } from './huobi/huobi.module';\nimport { UsdtProtoModule } from './usdtProtocol/usdt.proto.module';\nimport { PaymentProviderUsdtProtoModule } from './providers/payment-provider-usdt-protocol/payment.provider.usdt.proto.module';\n\n@Module({\n  providers: [PaymentService, PaymentCheckServie],\n  controllers: [PaymentController],\n  imports: [\n    BullModule.registerQueue({ name: 'paymentCheckTasks' }),\n    PaymentProviderModule,\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n    HttpModule.register({\n      timeout: 45000,\n      maxRedirects: 5,\n    }),\n    SequelizeModule.forFeature([\n      TestModel,\n      DepositPendingOrderModel,\n      DepositOrderModel,\n      WithdrawPendingOrderModel,\n      WithdrawOrderModel,\n      OptionsModel,\n    ]),\n    PaymentProviderEntityModule,\n    ChannelModule,\n    BankModule,\n    PaymentProviderChannelModule,\n    PaymentProviderBankModule,\n    PaymentProviderCardModule,\n    PaymentProviderUsdtProtoModule,\n    DepositOrderModule,\n    WithdrawOrderModule,\n    WithdrawPendingOrderModule,\n    BetConstructModule,\n    PaymentSystemModule,\n    ErrorModule,\n    HuobiModule,\n    UsdtProtoModule,\n  ],\n  exports: [PaymentCheckServie],\n})\nexport class PaymentModule { }\n","import { HttpException, HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/sequelize';\nimport {\n  BankCodeEnum,\n  DepositChannelEnum,\n  CurrencyEnum,\n  PaymentProviderEnum,\n  PaymentSystemEnum,\n  OrderStatusEnum,\n} from '@workspace/enums';\nimport * as md5 from 'md5';\nimport * as qs from 'qs';\nimport * as moment from 'moment-timezone';\nimport * as numeral from 'numeral';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize';\nimport { PaymentProviderBankModel } from '../models/payment.provider.bank.entity';\nimport { PaymentProviderChannelModel } from '../models/payment.provider.channel.model';\nimport { TestModel } from '../models/test.entity';\nimport { BankService } from './bank/bank.service';\nimport { BetConstructService } from './betContruct/betConstruct.service';\nimport { BCCheckWithdrawHashInparams } from './betContruct/dto/bc.check.withdraw.hash.in.param';\nimport { BCCheckClientInParams } from './betContruct/dto/bc.checkclient.in.params';\nimport {\n  BCWithdrawInParams,\n  BCWithdrawStatus,\n} from './betContruct/dto/bc.withdraw.in.params';\nimport { ChannelService } from './channel/channel.service';\nimport { DepositableChannel } from './dto/depositable.channel';\nimport { DepositablePaymentSystem } from './dto/depositable.paymentsystem';\nimport { WithdrawableBank } from './dto/withdrawable.banks';\nimport {\n  NoProviderException,\n  PaymentProviderException,\n} from './payment.exception';\nimport { PaymentSystemService } from './paymentSystem/payment.system.service';\nimport { PaymentProviderBankService } from './providers/payment-provider-bank/payment.provider.bank.service';\nimport {\n  DepositOrWithdrawalEnum,\n  PaymentProviderChannelService,\n} from './providers/payment-provider-channel/payment.provider.channel.service';\nimport { PaymentProviderEntityService } from './providers/payment-provider-entity/Payment.provider.entity.service';\nimport { D1FPaymentProviderService } from './providers/payment-provider/d1f/d1f.payment.provider.service';\nimport { MSZFPaymentProviderService } from './providers/payment-provider/mszf/mszf.payment.provider.service';\nimport { PaymentProviderDepositRequestDto } from './providers/payment-provider/payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from './providers/payment-provider/payment.provider.deposit.result';\nimport { PaymentProviderService } from './providers/payment-provider/payment.provider.service';\nimport { PaymentProviderWithdrawRequestDto } from './providers/payment-provider/payment.provider.withdraw.request.dto';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from './providers/payment-provider/payment.provider.withdraw.result';\n//import { SDDPaymentProviderService } from './providers/payment-provider/sdd/sdd.payment.provider.service';\nimport { UzPAYPaymentProviderService } from './providers/payment-provider/uzpay/uzpay.payment.provider.service';\nimport { XingChenPaymentProviderService } from './providers/payment-provider/xingchen/xingchen.payment.provider.service';\nimport { HengXinPaymentProviderService } from './providers/payment-provider/hengxin/hengxin.payment.provider.service';\nimport { ChannelModel } from '../models/channel.model';\nimport { PaymentManualDepositRequestDto } from './dto/payment.manual.deposit.request.dto';\nimport { PaymentManualDepositResultDto } from './dto/payment.manual.deposit.result.dto';\nimport { PaymentProviderEntityModel } from '../models/payment.provider.entity.model';\nimport { PaymentSystemModel } from '../models/payment.system.model';\nimport { PaymentMakeDepositSuccessRequestDto } from './dto/payment.make.deposit.success.request.dto';\nimport { DepositPendingOrderModel } from '../models/deposit.pending.order.model';\nimport { DepositOrderCreateDto } from './order/deposit-order/deposit.order.dto';\nimport { DepositOrderModel } from '../models/deposit.order.model';\nimport { PaymentManualWithdrawRequestDto } from './dto/payment.manual.withdraw.request.dto';\nimport { PaymentManualWithdrawResultDto } from './dto/payment.manual.withdraw.result.dto';\nimport { WithdrawPendingOrderCreateDto } from './order/withdraw-pending-order/withdraw.pending.order.dto';\nimport { WithdrawOrderCreateDto } from './order/withdraw-order/withdraw.order.dto';\nimport { WithdrawOrderService } from './order/withdraw-order/withdraw.order.service';\nimport { PaymentMakeWithdrawSuccessRequestDto } from './dto/payment.make.withdraw.success.request.dto';\nimport { WithdrawPendingOrderModel } from '../models/withdraw.pending.order.model';\nimport { WithdrawOrderModel } from '../models/withdraw.order.model';\nimport { BCDepositInParams } from './betContruct/dto/bc.deposit.in.params';\nimport { JBPPaymentProviderService } from './providers/payment-provider/jbp/jbp.payment.provider.service';\nimport { BCCheckWithdrawIPWhiteListInparams } from './betContruct/dto/bc.check.withdraw.ipwhitelist.in.params';\nimport { OptionsModel } from '../models/options.model';\nimport { ErrorService } from '../error/error.service';\nimport { PaymentTestDepositRequestDto } from './dto/payment.test.deposit.request.dto';\nimport { PaymentTestDepositResultDto } from './dto/payment.test.deposit.result.dto';\nimport { SXCPaymentProviderService } from './providers/payment-provider/sxc/sxc.payment.provider.service';\nimport { PaymentDepositByCardRequestDto } from './dto/payment.deposit.bycard.request.dto';\nimport * as crypto from 'crypto';\nimport { PaymentDepositByCardRequest } from './interface/payment.deposit.bycard.request';\nimport { DBPayPaymentProviderService } from './providers/payment-provider/dbpay/dbpay.payment.provider.service';\nimport { PaymentWithdrawRequestDto } from './dto/payment.withdraw.request.dto';\nimport { BisaPaymentProviderService } from './providers/payment-provider/bisa/bisa.payment.provider.service';\nimport { WithdrawPendingOrderService } from './order/withdraw-pending-order/withdraw.pending.order.service';\nimport { ErrorCodeEnum } from '../error/enums/errorCodeEnum';\nimport { UsdtProtocolModel } from '../models/usdtProtocol';\nimport { PaymentProviderUsdtProtoService } from './providers/payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { UsdtProtoService } from './usdtProtocol/usdt.proto.service';\nimport { DepositableUsdtProto } from './dto/depositable.usdtproto';\n\n@Injectable()\nexport class PaymentService {\n  private payProviderServices: Array<PaymentProviderService>;\n  private payProviderServicesMap: {};\n\n  constructor(\n    private configService: ConfigService,\n    private payProviderEntityService: PaymentProviderEntityService,\n    private paymentSystemService: PaymentSystemService,\n    private usdtProtoService: UsdtProtoService,\n    private channelService: ChannelService,\n    private bankService: BankService,\n    private payProviderChannelService: PaymentProviderChannelService,\n    private payProviderBankService: PaymentProviderBankService,\n    private payProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    private mszfPaymentProviderService: MSZFPaymentProviderService,\n    private d1fPaymentProviderService: D1FPaymentProviderService,\n    private xingchenPaymentProviderService: XingChenPaymentProviderService,\n    private uzpayPaymentProviderService: UzPAYPaymentProviderService,\n    //private sddPaymentProviderService: SDDPaymentProviderService,\n    private hengxinPaymentProviderService: HengXinPaymentProviderService,\n    private jbpPaymentProviderService: JBPPaymentProviderService,\n    private sxcPaymentProviderService: SXCPaymentProviderService,\n    private dbPayPaymentProviderService: DBPayPaymentProviderService,\n    private bisaPaymentProviderService: BisaPaymentProviderService,\n\n    protected betConstructService: BetConstructService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected httpService: HttpService,\n    protected sequelize: Sequelize,\n    protected errorService: ErrorService,\n\n    @InjectModel(DepositPendingOrderModel)\n    private depositPendingOrderRepository: typeof DepositPendingOrderModel,\n\n    @InjectModel(DepositOrderModel)\n    private depositOrderRepository: typeof DepositOrderModel,\n\n    @InjectModel(WithdrawPendingOrderModel)\n    private withdrawPendingOrderRepository: typeof WithdrawPendingOrderModel,\n\n    @InjectModel(WithdrawOrderModel)\n    private withdrawOrderRepository: typeof WithdrawOrderModel,\n\n    @InjectModel(OptionsModel) private optionsRepository: typeof OptionsModel,\n\n    @InjectModel(TestModel) private testRepository: typeof TestModel\n  ) {\n    this.payProviderServices = new Array<PaymentProviderService>();\n    this.registerPaymentProviders();\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Register All Payment Provider Services\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  private async registerPaymentProviders() {\n    const implProviderServices = [\n      this.mszfPaymentProviderService,\n      this.d1fPaymentProviderService,\n      this.xingchenPaymentProviderService,\n      this.uzpayPaymentProviderService,\n      //this.sddPaymentProviderService,\n      this.hengxinPaymentProviderService,\n      this.jbpPaymentProviderService,\n      this.sxcPaymentProviderService,\n      this.dbPayPaymentProviderService,\n      this.bisaPaymentProviderService,\n    ];\n    const providerServicesMap = (this.payProviderServicesMap = {});\n    const providerServices = this.payProviderServices;\n    const paymentProviderEntities = await this.payProviderEntityService.findAll();\n    paymentProviderEntities.forEach((paymentProviderEntity) => {\n      const index = implProviderServices.findIndex(\n        (paymentProviderService) =>\n          paymentProviderService.getPaymentProviderEnum() ===\n          paymentProviderEntity.id\n      );\n\n      if (index < 0) {\n        return;\n      }\n\n      const paymentProviderSerivce = implProviderServices[index];\n\n      paymentProviderSerivce.setPaymentProviderEntity(paymentProviderEntity);\n\n      providerServices.push(paymentProviderSerivce);\n      providerServicesMap[paymentProviderEntity.id] = paymentProviderSerivce;\n\n      implProviderServices.splice(index, 1);\n    });\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Deposit\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async deposit(\n    depositRequest: PaymentProviderDepositRequestDto\n  ): Promise<PaymentProviderDepositResult | any> {\n    let depositResult: PaymentProviderDepositResult;\n\n    // const inParams = new BCCheckClientInParams();\n    // inParams.userId = depositRequest.userId;\n    // inParams.currency = CurrencyEnum[CurrencyEnum.CNY];\n\n    // const bcResult = await this.betConstructService.checkClient(inParams);\n\n    // if (!bcResult.result) {\n    //   depositResult = PaymentProviderDepositResult.bcCheckClientErrorFactory(\n    //     bcResult\n    //   );\n    //   depositResult.errorFront = this.errorService.getMsgDeposit(\n    //     depositRequest,\n    //     depositResult,\n    //     {\n    //       bcFailed: true,\n    //     }\n    //   );\n\n    //   return depositResult;\n    // }\n\n    const providerServices = await this.getDepositPaymentProviderServices(\n      depositRequest\n    );\n\n    for (let i = 0; i < providerServices.length; i++) {\n      const providerService = providerServices[i];\n\n      const is_avaiable = await providerService.isAvailable();\n      if (!is_avaiable) {\n        continue;\n      }\n\n      depositResult = await providerService.depositGeneralWrapper(\n        depositRequest\n      );\n\n      if (!depositResult || !depositResult.result) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (!depositResult) {\n      depositResult = new PaymentProviderDepositResult();\n      depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_NO_AVAILABLE;\n      depositResult.result = false;\n    }\n\n    depositResult.errorFront = this.errorService.getMsgDeposit(\n      depositRequest,\n      depositResult\n    );\n\n    this.errorService.santitizeDeposit(depositRequest, depositResult);\n\n    return depositResult;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Deposit Info\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async depositByCard(request: PaymentDepositByCardRequestDto) {\n    const iv = Buffer.from(decodeURIComponent(request.data2), 'base64');\n    const password = this.configService.get<string>('DEPOSIT_KEY');\n    const key = Buffer.from(password);\n\n    const decipher = crypto.createDecipheriv('aes-256-ctr', key, iv);\n    let decDst = decipher.update(\n      decodeURIComponent(request.data1),\n      'base64',\n      'utf8'\n    );\n    decDst += decipher.final('utf8');\n\n    const data = <\n      { paymentProviderId: number; amount: number; userId: number }\n      >JSON.parse(decDst);\n\n    const paymentProviderService: PaymentProviderService = this\n      .payProviderServicesMap[data.paymentProviderId];\n\n    if (!paymentProviderService) {\n      return;\n    }\n\n    const params: PaymentDepositByCardRequest = {\n      userId: data.userId,\n      amount: data.amount,\n      userName: request.userName,\n      last4Digit: '', // request.last4Digit,\n      hash: md5(\n        `${decodeURIComponent(request.data1)}` +\n        `${decodeURIComponent(request.data2)}`\n      ),\n    };\n\n    return paymentProviderService.depositByCard(params);\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Manual Deposit\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async manualDeposit(\n    manualDepositRequest: PaymentManualDepositRequestDto,\n    ip: string,\n    headers\n  ): Promise<PaymentManualDepositResultDto> {\n    const response = new PaymentManualDepositResultDto();\n    response.result = false;\n\n    const paymentProviderService = <PaymentProviderService>(\n      this.payProviderServicesMap[manualDepositRequest.paymentProviderId]\n    );\n\n    if (!paymentProviderService) {\n      throw new NoProviderException();\n    }\n\n    const paymentProviderChannels = await this.payProviderChannelService.findAll(\n      {\n        include: [\n          {\n            model: PaymentProviderEntityModel,\n            as: 'paymentProvider',\n          },\n          {\n            model: ChannelModel,\n            as: 'channel',\n            include: [\n              { model: PaymentSystemModel, as: 'fromPaymentSystem' },\n              { model: PaymentSystemModel, as: 'toPaymentSystem' },\n            ],\n          },\n        ],\n        where: { id: manualDepositRequest.paymentProviderChannelId },\n      }\n    );\n\n    if (!paymentProviderChannels || paymentProviderChannels.length < 1) {\n      throw new NoProviderException();\n    }\n\n    const paymentProviderChannel = paymentProviderChannels[0];\n\n    const depositRequest = new PaymentProviderDepositRequestDto();\n\n    depositRequest.userId = `${manualDepositRequest.userId}`;\n    depositRequest.amount = numeral(manualDepositRequest.amount).value();\n    depositRequest.headers = headers;\n    depositRequest.ip = ip;\n    depositRequest.paymentSystem =\n      PaymentSystemEnum[paymentProviderChannel.channel.fromPaymentSystemId];\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        const channelDepositResultBundle = await paymentProviderService.depositByPaymentProviderChannel(\n          depositRequest,\n          paymentProviderChannel,\n          null,\n          transaction\n        );\n\n        if (!channelDepositResultBundle) {\n          throw new PaymentProviderException();\n        }\n\n        await paymentProviderService.updateOrderAfterDeposit(\n          channelDepositResultBundle.order,\n          channelDepositResultBundle.depositResult,\n          transaction\n        );\n\n        const channelDepositResult = channelDepositResultBundle.depositResult;\n\n        response.result = channelDepositResult.result;\n\n        if (!response.result) {\n          response.errorCode = channelDepositResult.errorCode;\n          response.errorMessage = channelDepositResult.errorMessage;\n        }\n        response.requestJson = channelDepositResult.channelRequestJson;\n        response.responseJson = channelDepositResult.channelResponseJson;\n        response.requestTime = channelDepositResult.channelRequestTime;\n\n        if (!response.result) {\n          throw new PaymentProviderException();\n        }\n      });\n    } catch (error) {\n      response.error = error;\n      return response;\n    }\n\n    return response;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Manual Deposit\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async testDeposit(\n    request: PaymentTestDepositRequestDto,\n    ip: string,\n    headers\n  ): Promise<PaymentTestDepositResultDto> {\n    const response = new PaymentTestDepositResultDto();\n    response.result = false;\n\n    const paymentProviderChannels = await this.payProviderChannelService.findAll(\n      {\n        include: [\n          {\n            model: PaymentProviderEntityModel,\n            as: 'paymentProvider',\n          },\n          {\n            model: ChannelModel,\n            as: 'channel',\n            include: [\n              { model: PaymentSystemModel, as: 'fromPaymentSystem' },\n              { model: PaymentSystemModel, as: 'toPaymentSystem' },\n            ],\n          },\n        ],\n        where: { id: request.paymentProviderChannelId },\n      }\n    );\n\n    if (!paymentProviderChannels || paymentProviderChannels.length < 1) {\n      throw new NoProviderException();\n    }\n\n    const paymentProviderChannel = paymentProviderChannels[0];\n\n    const paymentProviderService = <PaymentProviderService>(\n      this.payProviderServicesMap[paymentProviderChannel.paymentProviderId]\n    );\n\n    if (!paymentProviderService) {\n      throw new NoProviderException();\n    }\n\n    const bank = request.bankId\n      ? await this.bankService.findById(request.bankId)\n      : null;\n\n    const depositRequest = new PaymentProviderDepositRequestDto();\n\n    depositRequest.userId = this.configService.get<string>(\n      'testUserId'\n    ) /* `${request.userId}` */;\n    depositRequest.amount = numeral(request.amount).value();\n    depositRequest.headers = headers;\n    depositRequest.ip = ip;\n    depositRequest.paymentSystem =\n      PaymentSystemEnum[paymentProviderChannel.channel.fromPaymentSystemId];\n\n    if (request.userName) {\n      depositRequest.userName = request.userName;\n    }\n\n    if (request.phoneNumber) {\n      depositRequest.phoneNumber = request.phoneNumber;\n    }\n\n    if (request.countryCallingCode) {\n      depositRequest.countryCallingCode = request.countryCallingCode;\n    }\n\n    if (bank) {\n      depositRequest.bankCode = bank.bankCode;\n    }\n\n    try {\n      paymentProviderChannel.testedAt = moment().toDate();\n      await paymentProviderChannel.save();\n\n      await this.sequelize.transaction(async (transaction) => {\n        const channelDepositResultBundle = await paymentProviderService.depositByPaymentProviderChannel(\n          depositRequest,\n          paymentProviderChannel,\n          null,\n          transaction\n        );\n\n        if (!channelDepositResultBundle) {\n          throw new PaymentProviderException();\n        }\n\n        await paymentProviderService.updateOrderAfterDeposit(\n          channelDepositResultBundle.order,\n          channelDepositResultBundle.depositResult,\n          transaction\n        );\n\n        const channelDepositResult = channelDepositResultBundle.depositResult;\n\n        response.result = channelDepositResult.result;\n\n        if (!response.result) {\n          response.errorCode = channelDepositResult.errorCode;\n          response.errorMessage = channelDepositResult.errorMessage;\n        }\n        response.requestJson = channelDepositResult.channelRequestJson;\n        response.responseJson = channelDepositResult.channelResponseJson;\n        response.requestTime = channelDepositResult.channelRequestTime;\n\n        //console.log(response);\n\n        if (!response.result) {\n          throw new PaymentProviderException();\n        }\n\n        response.url = channelDepositResult.data.url;\n\n        throw new PaymentProviderException();\n      });\n    } catch (error) {\n      response.error = error;\n      return response;\n    }\n\n    return response;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Manual Withdraw\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async manualWithdraw(\n    manualWithdrawRequest: PaymentManualWithdrawRequestDto,\n    ip: string,\n    headers\n  ): Promise<PaymentManualWithdrawResultDto> {\n    const response = new PaymentManualWithdrawResultDto();\n    response.result = false;\n\n    const paymentProviderService = <PaymentProviderService>(\n      this.payProviderServicesMap[manualWithdrawRequest.paymentProviderId]\n    );\n\n    if (!paymentProviderService) {\n      throw new NoProviderException();\n    }\n\n    const paymentProviderChannels = await this.payProviderChannelService.findAll(\n      {\n        include: [\n          {\n            model: PaymentProviderEntityModel,\n            as: 'paymentProvider',\n          },\n          {\n            model: ChannelModel,\n            as: 'channel',\n            include: [\n              { model: PaymentSystemModel, as: 'fromPaymentSystem' },\n              { model: PaymentSystemModel, as: 'toPaymentSystem' },\n            ],\n          },\n        ],\n        where: {\n          paymentProviderId: manualWithdrawRequest.paymentProviderId,\n          '$channel.depositOrWithdrawable$': DepositOrWithdrawalEnum.WITHDRAWAL,\n        },\n      }\n    );\n\n    if (!paymentProviderChannels || paymentProviderChannels.length < 1) {\n      throw new NoProviderException();\n    }\n\n    const paymentProviderChannel = paymentProviderChannels[0];\n\n    const bank = await this.bankService.findById(manualWithdrawRequest.bankId);\n    if (!bank) {\n      throw new NoProviderException();\n    }\n\n    const withdrawRequest = new PaymentProviderWithdrawRequestDto();\n    withdrawRequest.ip = ip;\n    withdrawRequest.headers = headers;\n    withdrawRequest.amount = numeral(manualWithdrawRequest.amount).value();\n    withdrawRequest.orderId = manualWithdrawRequest.orderId;\n    withdrawRequest.userId = `${manualWithdrawRequest.userId}`;\n    withdrawRequest.bankCode = bank.bankCode;\n    withdrawRequest.bankAccountName = manualWithdrawRequest.bankAccountName;\n    withdrawRequest.bankAccountNumber = manualWithdrawRequest.bankAccountNumber;\n    withdrawRequest.province = manualWithdrawRequest.province;\n    withdrawRequest.city = manualWithdrawRequest.city;\n    withdrawRequest.branch = manualWithdrawRequest.branch;\n    withdrawRequest.currency = manualWithdrawRequest.currency;\n    withdrawRequest.userName = manualWithdrawRequest.userName;\n    withdrawRequest.countryCallingCode =\n      manualWithdrawRequest.countryCallingCode;\n    withdrawRequest.phoneNumber = manualWithdrawRequest.phoneNumber;\n    withdrawRequest.hashcode = '';\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        const ppcWithdrawResultBundle = await paymentProviderService.withdrawByPaymentProviderChannel(\n          withdrawRequest,\n          paymentProviderChannel,\n          transaction\n        );\n\n        if (!ppcWithdrawResultBundle) {\n          throw new PaymentProviderException();\n        }\n\n        await paymentProviderService.updateOrderAfterWithdraw(\n          ppcWithdrawResultBundle.order,\n          ppcWithdrawResultBundle.withdrawResult,\n          transaction\n        );\n\n        const ppcWithdrawResult = ppcWithdrawResultBundle.withdrawResult;\n\n        response.result = ppcWithdrawResult.result;\n\n        if (!response.result) {\n          response.errorCode = ppcWithdrawResult.errorCode;\n          response.errorMessage = ppcWithdrawResult.errorMessage;\n        }\n        response.requestJson = ppcWithdrawResult.channelRequestJson;\n        response.responseJson = ppcWithdrawResult.channelResponseJson;\n        response.requestTime = ppcWithdrawResult.channelRequestTime;\n\n        if (!response.result) {\n          throw new PaymentProviderException();\n        }\n      });\n    } catch (error) {\n      response.error = error;\n      return response;\n    }\n\n    return response;\n\n    // const response = new PaymentManualWithdrawResultDto();\n    // response.result = false;\n\n    // const orderCreate = new WithdrawOrderCreateDto();\n\n    // orderCreate.orderId =\n    //   `${(numeral(Math.random().toString(10).substr(2, 1)).value() % 9) + 1}` +\n    //   `${Math.random().toString(10).substr(2, 7)}`;\n\n    // orderCreate.userId = `${manualWithdrawRequest.userId}`;\n    // orderCreate.clientOrderId = `${manualWithdrawRequest.orderId}`;\n    // orderCreate.currency = CurrencyEnum.CNY;\n    // orderCreate.amount = numeral(manualWithdrawRequest.amount).value();\n\n    // orderCreate.status = OrderStatusEnum.SUCCESS;\n\n    // try {\n    //   await this.sequelize.transaction(async (transaction) => {\n    //     const order = await this.withdrawOrderService.create(orderCreate, {\n    //       transaction,\n    //     });\n\n    //     if (!order) {\n    //       throw new Error('creating withdraw order is failed');\n    //     }\n\n    //     const params = new BCWithdrawInParams();\n\n    //     params.userId = numeral(order.userId).value();\n    //     params.orderId = numeral(order.clientOrderId).value();\n    //     params.amount = order.amount;\n    //     params.currency = order.currency;\n    //     params.reason = this.configService.get<string>(\n    //       'betConstruct.withdraw.reason'\n    //     );\n    //     params.status = this.betConstructService.getBCWithdrawStatusByOrderStatus(\n    //       <OrderStatusEnum>order.status\n    //     );\n\n    //     const bcOrder = await this.betConstructService.addWithdrawBcOrder(\n    //       params,\n    //       { transaction }\n    //     );\n\n    //     if (!bcOrder) {\n    //       throw new Error('creating bcOrder record is failed');\n    //     }\n    //   });\n    // } catch (error) {\n    //   response.error = error;\n    //   return response;\n    // }\n\n    // response.result = true;\n    // return response;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Make Deposit Success\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async makeDepositSuccess(\n    request: PaymentMakeDepositSuccessRequestDto\n  ): Promise<boolean> {\n    const pendingOrder = await this.depositPendingOrderRepository.findOne({\n      where: { orderId: `${request.orderId}` },\n    });\n\n    if (!pendingOrder) {\n      return false;\n    }\n\n    pendingOrder.status = OrderStatusEnum.SUCCESS;\n\n    const orderCreate = DepositOrderCreateDto.pendingDepositFactory(\n      pendingOrder\n    );\n\n    orderCreate.date = new Date();\n\n    if (request.amount !== undefined) {\n      orderCreate.amount = numeral(request.amount).value();\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await pendingOrder.destroy({ transaction });\n\n        const order = new this.depositOrderRepository(orderCreate);\n\n        await order.save({ transaction });\n\n        const params = new BCDepositInParams();\n        params.userId = numeral(order.userId).value();\n        params.orderId = numeral(order.orderId).value();\n        params.amount = numeral(order.amount).value();\n        params.currency = CurrencyEnum[CurrencyEnum.CNY];\n\n        const bcOrder = await this.betConstructService.addDepositBcOrder(\n          params\n        );\n      });\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Make Withdraw Success\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async makeWithdrawSuccess(\n    request: PaymentMakeWithdrawSuccessRequestDto\n  ): Promise<boolean> {\n    const pendingOrder = await this.withdrawPendingOrderRepository.findOne({\n      where: { orderId: `${request.orderId}` },\n    });\n\n    if (!pendingOrder) {\n      return false;\n    }\n\n    pendingOrder.status = OrderStatusEnum.SUCCESS;\n\n    const orderCreate = WithdrawOrderCreateDto.pendingWithdrawFactory(\n      pendingOrder\n    );\n\n    orderCreate.date = new Date();\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await pendingOrder.destroy({ transaction });\n\n        const order = new this.withdrawOrderRepository(orderCreate);\n\n        await order.save({ transaction });\n\n        // create BC Order\n        const params = new BCWithdrawInParams();\n\n        params.userId = numeral(order.userId).value();\n        params.orderId = numeral(order.clientOrderId).value();\n        params.amount = order.amount;\n        params.currency = order.currency;\n        params.reason = this.configService.get<string>(\n          'betConstruct.withdraw.reason'\n        );\n        params.status = this.betConstructService.getBCWithdrawStatusByOrderStatus(\n          <OrderStatusEnum>order.status\n        );\n\n        const bcOrder = await this.betConstructService.addWithdrawBcOrder(\n          params,\n          { transaction }\n        );\n\n        if (!bcOrder) {\n          throw new Error('creating bcOrder record is failed');\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Withdraw\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async withdraw(\n    withdrawRequest: PaymentProviderWithdrawRequestDto\n  ): Promise<PaymentProviderWithdrawResult> {\n    let withdrawResult: PaymentProviderWithdrawResult;\n\n    await this.testRepository.create({ a: JSON.stringify(withdrawRequest) });\n\n    // check withdraw ipwhitelist\n    const inParamsIP = new BCCheckWithdrawIPWhiteListInparams();\n    inParamsIP.ip = withdrawRequest.ip;\n    const checkWithdrawIPOut = this.betConstructService.checkWithdrawIPWhitelist(\n      inParamsIP\n    );\n\n    if (!checkWithdrawIPOut.result) {\n      // console.log(inParamsIP.ip);\n      // return PaymentProviderWithdrawResult.bcCheckIPWhiteListErrorFactory(\n      //   checkWithdrawIPOut\n      // );\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_IP_INVALID;\n      withdrawResult.result = false;\n      this.errorService.santitizeWithdraw(withdrawRequest, withdrawResult);\n\n      return withdrawResult;\n    }\n\n    // check withdraw hash\n    const inParamsHash = new BCCheckWithdrawHashInparams();\n    inParamsHash.amount = withdrawRequest.amount;\n    inParamsHash.bankAccountName = withdrawRequest.bankAccountName;\n    inParamsHash.bankAccountNumber = withdrawRequest.bankAccountNumber;\n    inParamsHash.bankCode = withdrawRequest.bankCode;\n    inParamsHash.branch = withdrawRequest.branch;\n    inParamsHash.city = withdrawRequest.city;\n    inParamsHash.currency = withdrawRequest.currency;\n    inParamsHash.hashCode = withdrawRequest.hashcode;\n    inParamsHash.orderId = withdrawRequest.orderId;\n    inParamsHash.province = withdrawRequest.province;\n    inParamsHash.userId = withdrawRequest.userId;\n    inParamsHash.userName = withdrawRequest.userName;\n    inParamsHash.phoneNumber = withdrawRequest.phoneNumberRaw;\n\n    const checkWithdrawHashOut = this.betConstructService.checkWithdrawHash(\n      inParamsHash\n    );\n\n    if (!checkWithdrawHashOut.result) {\n      // return PaymentProviderWithdrawResult.bcCheckWithdrawHashErrorFactory(\n      //   checkWithdrawHashOut\n      // );\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_SIGN_INVALID;\n      withdrawResult.result = false;\n    }\n\n    withdrawResult = new PaymentProviderWithdrawResult();\n    //withdrawResult.response = { code: 0, message: 'OK' };\n\n    // get Withdrawable PaymentProviderServices\n    const providerServices = await this.getWithdrawPaymentProviderServices(\n      withdrawRequest\n    );\n\n    let withdrawResultProvider: PaymentProviderWithdrawResult;\n    for (let i = 0; i < providerServices.length; i++) {\n      const providerService = providerServices[i];\n\n      const is_avaiable = await providerService.isAvailable();\n      if (!is_avaiable) {\n        continue;\n      }\n\n      withdrawResultProvider = await providerService.withdrawGeneralWrapper(\n        withdrawRequest\n      );\n\n      if (!withdrawResultProvider || !withdrawResultProvider.result) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (!withdrawResultProvider) {\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_NO_AVAILABLE;\n      withdrawResult.result = false;\n      this.errorService.santitizeWithdraw(withdrawRequest, withdrawResult);\n      return withdrawResult;\n    }\n\n    if (!withdrawResult.result) {\n      const pendingOrder = await PaymentProviderService.createPendingWithdrawOrderByRequest(\n        withdrawRequest,\n        {\n          bankService: this.bankService,\n          withdrawPendingOrderService: this.withdrawPendingOrderService,\n        }\n      );\n\n      pendingOrder.status = OrderStatusEnum.FAILED;\n      pendingOrder.errorCode = '100';\n      pendingOrder.errorMessage = 'No PaymentProvider';\n\n      await pendingOrder.save();\n\n      withdrawResult.code = withdrawResultProvider.code;\n      this.errorService.santitizeWithdraw(withdrawRequest, withdrawResult);\n      return withdrawResult;\n\n      // withdrawResult.response = withdrawResultProvider\n      //   ? {\n      //     code: withdrawResultProvider.response.code,\n      //     message: withdrawResultProvider.response.message,\n      //   }\n      //   : { code: 100, message: 'There is no payment provider' };\n    }\n\n    // create bcOrders Item\n    // if (\n    //   !withdrawResultProvider ||\n    //   `${withdrawResultProvider.response.code}` !== `0`\n    // ) {\n    //   const bcWithdrawInParams = new BCWithdrawInParams();\n\n    //   bcWithdrawInParams.amount = withdrawRequest.amount;\n    //   bcWithdrawInParams.currency = withdrawRequest.currency;\n    //   bcWithdrawInParams.orderId = numeral(withdrawRequest.orderId).value();\n    //   bcWithdrawInParams.reason = this.configService.get<string>(\n    //     'betConstruct.withdraw.reason'\n    //   );\n    //   bcWithdrawInParams.status = BCWithdrawStatus.FAILED;\n    //   bcWithdrawInParams.userId = withdrawRequest.userId;\n\n    //   const bcOrder = await this.betConstructService.addWithdrawBcOrder(\n    //     bcWithdrawInParams\n    //   );\n\n    //   console.log(':BCOrder Created');\n    // }\n\n    // if (!withdrawResult) {\n    //   throw new NoProviderException();\n    // }\n    withdrawResult.code = 0;\n    withdrawResult.msg = \"Success\";\n    return withdrawResult;\n  }\n\n  async bcWithdraw(request) {\n    const params = new BCWithdrawInParams();\n\n    params.amount = request.amount;\n    params.currency = request.currency;\n    params.orderId = request.orderId;\n    params.reason = 'this is test reason';\n    params.status = BCWithdrawStatus.FAILED;\n    params.userId = request.userId;\n\n    const withdrawOut = await this.betConstructService.withdraw(params);\n\n    if (withdrawOut) {\n      return {\n        response: {\n          code: withdrawOut.result ? 0 : 101,\n          message: withdrawOut.result ? null : withdrawOut.errorMessage,\n        },\n      };\n    }\n\n    return null;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Deposit Payment Provider Service List\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  private async getDepositPaymentProviderServices(\n    depositRequest: PaymentProviderDepositRequestDto\n  ): Promise<PaymentProviderService[]> {\n    const depositProviderServices = [];\n\n    const paymetnSystemId: number =\n      PaymentSystemEnum[depositRequest.paymentSystem];\n\n    const depositProviderEntities = await this.payProviderEntityService.findDepositAvailableProvider();\n\n    if (!depositProviderEntities || depositProviderEntities.length < 1) {\n      return depositProviderServices;\n    }\n\n    for (let i = 0; i < depositProviderEntities.length; i++) {\n      const providerEntity = depositProviderEntities[i];\n      const providerService = this.payProviderServicesMap[providerEntity.id];\n\n      if (!providerService) {\n        continue;\n      }\n\n      const providerChannels = await this.payProviderChannelService.getDepositablesByPaymentSystem(\n        paymetnSystemId,\n        providerEntity.id,\n        depositRequest.amount\n      );\n\n      if (!providerChannels || providerChannels.length < 1) {\n        continue;\n      }\n\n      depositProviderServices.push(providerService);\n    }\n\n    return depositProviderServices;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Withdraw Payment Provider Service List\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  private async getWithdrawPaymentProviderServices(\n    withdrawRequest: PaymentWithdrawRequestDto\n  ): Promise<PaymentProviderService[]> {\n    const withdrawProviderServices = [];\n\n    const withdrawProviderEntities = await this.payProviderEntityService.findWithdrawalAvailableProvider();\n\n    if (!withdrawProviderEntities || withdrawProviderEntities.length < 1) {\n      return withdrawProviderServices;\n    }\n\n    for (let i = 0; i < withdrawProviderEntities.length; i++) {\n      const providerEntity = withdrawProviderEntities[i];\n      const providerService = this.payProviderServicesMap[providerEntity.id];\n\n      if (!providerService) {\n        continue;\n      }\n\n      const providerChannels = await this.payProviderChannelService.getWithdrawablesByPaymentProvider(\n        providerEntity.id,\n        withdrawRequest.amount\n      );\n\n      if (!providerChannels || providerChannels.length < 1) {\n        continue;\n      }\n\n      withdrawProviderServices.push(providerService);\n    }\n\n    return withdrawProviderServices;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get PaymentProviderChannel Depositable\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  public async getPaymentProviderChannelDepositable(\n    paymentProviderChannel: PaymentProviderChannelModel\n  ): Promise<boolean> {\n    const paymentProvider = await this.payProviderEntityService.findById(\n      paymentProviderChannel.paymentProviderId\n    );\n\n    if (!paymentProvider) {\n      return false;\n    }\n\n    const paymentProviderService: PaymentProviderService = this\n      .payProviderServicesMap[paymentProvider.id];\n\n    if (!paymentProviderService) {\n      return false;\n    }\n\n    const depositRequest = new PaymentProviderDepositRequestDto();\n    depositRequest.paymentSystem =\n      PaymentSystemEnum[paymentProviderChannel.channel.fromPaymentSystemId];\n    depositRequest.amount = this.configService.get<number>('minDeposit.AMOUNT');\n    depositRequest.userId = this.configService.get<string>('minDeposit.USERID');\n\n    if (paymentProviderChannel.paymentProviderId === PaymentProviderEnum.D1F) {\n      const channel = await this.channelService.findById(\n        paymentProviderChannel.channelId\n      );\n      if (!channel) {\n        return false;\n      }\n      if (channel.fromPaymentSystem.isBank && channel.toPaymentSystem.isBank) {\n        depositRequest.bankCode =\n          BankCodeEnum[this.configService.get<number>('minDeposit.D1FBANKID')];\n      }\n    }\n\n    depositRequest.headers = {\n      'user-agent': this.configService.get<number>('minDeposit.USERAGENT'),\n    };\n    depositRequest.ip = this.configService.get<string>('minDeposit.IP');\n\n    // console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>: ', paymentProviderChannel.providerChannelName);\n    // console.log(depositRequest);\n\n    const depositResult = await paymentProviderService.channelDepositPreTryWrapper(\n      depositRequest,\n      paymentProviderChannel\n    );\n\n    // console.log(depositResult);\n    // console.log('===========================');\n\n    const isAvailable = this.getDepositableByDepositResult(\n      paymentProviderChannel,\n      depositResult\n    );\n\n    return isAvailable;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get PaymentProviderBank Withdrawable\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  public async getPaymentProviderBankWithdrawable(\n    payProviderBank: PaymentProviderBankModel\n  ): Promise<boolean> {\n    const paymentProviderId = payProviderBank.paymentProviderId;\n\n    if (paymentProviderId === PaymentProviderEnum.HENGXIN) {\n      return true;\n    }\n\n    const payProviderService: PaymentProviderService = this\n      .payProviderServicesMap[paymentProviderId];\n    if (!payProviderService) {\n      return false;\n    }\n\n    const paymentProviderChannels = await this.payProviderChannelService.findAll(\n      {\n        include: [{ model: ChannelModel, as: 'channel' }],\n        where: {\n          paymentProviderId,\n          '$channel.depositOrWithdrawable$': DepositOrWithdrawalEnum.WITHDRAWAL,\n        },\n      }\n    );\n\n    const bank = await this.bankService.findById(payProviderBank.bankId);\n    if (!bank) {\n      return false;\n    }\n\n    const withdrawRequest = new PaymentWithdrawRequestDto();\n\n    withdrawRequest.bankCode = BankCodeEnum[payProviderBank.bankId];\n\n    withdrawRequest.amount = this.configService.get<number>(\n      'minWithdraw.AMOUNT'\n    );\n    withdrawRequest.userId =\n      this.configService.get<string>('minWithdraw.USERID_PREFIX') +\n      Math.random().toString(10).substr(2, 5);\n    withdrawRequest.currency = this.configService.get<CurrencyEnum>(\n      'minWithdraw.CURRENCY'\n    );\n    withdrawRequest.bankAccountName =\n      this.configService.get<string>('minWithdraw.BANKACCOUNTNAME_PREFIX') +\n      Math.random().toString(36).substring(2, 7);\n    withdrawRequest.bankAccountNumber =\n      this.configService.get<string>('minWithdraw.BANKACCOUNTNUMBER_PREFIX') +\n      Math.random().toString(10).substr(2, 10);\n    withdrawRequest.city =\n      this.configService.get<string>('minWithdraw.CITY') +\n      Math.random().toString(36).substring(2, 7);\n    withdrawRequest.province =\n      this.configService.get<string>('minWithdraw.PROVINCE') +\n      Math.random().toString(36).substring(2, 7);\n    withdrawRequest.orderId =\n      Date.now() + Math.random().toString(36).substring(2, 7);\n    withdrawRequest.hashcode =\n      this.configService.get<string>('minWithdraw.HASHCODE') +\n      Math.random().toString(10).substr(2, 10);\n\n    let isAvailableFinal = false;\n    for (let i = 0; i < paymentProviderChannels.length; i++) {\n      const paymentProviderChannel = paymentProviderChannels[i];\n\n      console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>');\n      console.log(withdrawRequest);\n\n      const withdrawResult = await payProviderService.channelWithdrawPreTryWrapper(\n        withdrawRequest,\n        paymentProviderChannel\n      );\n\n      console.log(withdrawResult);\n      console.log('===========================');\n\n      const isAvailable = this.getWithdrawableByWithdrawResult(\n        payProviderBank,\n        withdrawResult\n      );\n\n      paymentProviderChannel.isAvailable = isAvailable;\n\n      await paymentProviderChannel.save();\n\n      if (isAvailable) {\n        isAvailableFinal = true;\n      }\n    }\n\n    return isAvailableFinal;\n  }\n\n  private getWithdrawableByWithdrawResult(\n    paymentProviderBank: PaymentProviderBankModel,\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    if (!withdrawResult) {\n      return false;\n    }\n\n    if (withdrawResult.result) {\n      return true;\n    }\n\n    const errorCode = withdrawResult.errorCode;\n    let minAmountErrorCode: number;\n\n    switch (paymentProviderBank.paymentProviderId) {\n      case PaymentProviderEnum.MSZF:\n        minAmountErrorCode = this.configService.get<number>(\n          'mszf.WITHDRAW_MINAMOUNT_ERROR_CODE'\n        );\n        return `${errorCode}` === `${minAmountErrorCode}`;\n      case PaymentProviderEnum.D1F:\n        return false;\n      case PaymentProviderEnum.XINGCHEN:\n        minAmountErrorCode = this.configService.get<number>(\n          'xingchen.WITHDRAW_MINAMOUNT_ERROR_CODE'\n        );\n        return `${errorCode}` === `${minAmountErrorCode}`;\n      case PaymentProviderEnum.UZPAY:\n        minAmountErrorCode = this.configService.get<number>(\n          'uzpay.WITHDRAW_MINAMOUNT_ERROR_CODE'\n        );\n        return `${errorCode}` === `${minAmountErrorCode}`;\n      default:\n        break;\n    }\n    return true;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable By DepositResult\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  private getDepositableByDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    if (!depositResult) {\n      return false;\n    }\n\n    if (depositResult.result) {\n      return true;\n    }\n\n    const errorCode = depositResult.errorCode;\n    let minAmountErrorCode: number;\n\n    switch (paymentProviderChannel.paymentProviderId) {\n      case PaymentProviderEnum.MSZF:\n        minAmountErrorCode = this.configService.get<number>(\n          'mszf.DEPOSIT_MINAMOUNT_ERROR_CODE'\n        );\n        return `${errorCode}` === `${minAmountErrorCode}`;\n      case PaymentProviderEnum.D1F:\n        return false;\n      case PaymentProviderEnum.XINGCHEN:\n        minAmountErrorCode = this.configService.get<number>(\n          'xingchen.DEPOSIT_MINAMOUNT_ERROR_CODE'\n        );\n        return `${errorCode}` === `${minAmountErrorCode}`;\n      case PaymentProviderEnum.UZPAY:\n        minAmountErrorCode = this.configService.get<number>(\n          'uzpay.DEPOSIT_MINAMOUNT_ERROR_CODE'\n        );\n        return `${errorCode}` === `${minAmountErrorCode}`;\n      default:\n        break;\n    }\n\n    return false;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable PaymentSystems\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async getDepositablePaymentSystems(): Promise<DepositablePaymentSystem[]> {\n    return this.paymentSystemService.getDepositables(true);\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable PaymentSystems\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async getDepositableUsdtProts(): Promise<DepositableUsdtProto[]> {\n    return this.usdtProtoService.getDepositables(true);\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable Channels\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async getDepositableChannels(): Promise<DepositableChannel[]> {\n    return this.payProviderChannelService.getDepositables();\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable Channels\n  //\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  async getWithdrawableBanks() {\n    const response = {\n      options: {\n        withdrawDefaultMinAmount: null,\n        withdrawDefaultMaxAmount: null,\n        dailyMaxNumWithdraw: null,\n        dailyMaxAmountWithdraw: null,\n      },\n      banks: await this.payProviderBankService.getWithdrawableBanks(true),\n    };\n\n    const optWithdrawDefaultMinAmount = await this.optionsRepository.findOne({\n      where: { optName: 'withdrawDefaultMinAmount' },\n    });\n    if (optWithdrawDefaultMinAmount != null) {\n      response.options.withdrawDefaultMinAmount = numeral(\n        optWithdrawDefaultMinAmount.optValue\n      ).value();\n    }\n\n    const optWithdrawDefaultMaxAmount = await this.optionsRepository.findOne({\n      where: { optName: 'withdrawDefaultMaxAmount' },\n    });\n    if (optWithdrawDefaultMaxAmount != null) {\n      response.options.withdrawDefaultMaxAmount = numeral(\n        optWithdrawDefaultMaxAmount.optValue\n      ).value();\n    }\n\n    const optDailyMaxNumWithdraw = await this.optionsRepository.findOne({\n      where: { optName: 'dailyMaxNumWithdraw' },\n    });\n    if (optDailyMaxNumWithdraw != null) {\n      response.options.dailyMaxNumWithdraw = numeral(\n        optDailyMaxNumWithdraw.optValue\n      ).value();\n    }\n\n    const optDailyMaxAmountWithdraw = await this.optionsRepository.findOne({\n      where: { optName: 'dailyMaxAmountWithdraw' },\n    });\n    if (optDailyMaxAmountWithdraw != null) {\n      response.options.dailyMaxAmountWithdraw = numeral(\n        optDailyMaxAmountWithdraw.optValue\n      ).value();\n    }\n\n    return response;\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { PaymentSystemLocaleModel } from '../../models/payment.system.locale.model';\nimport { PaymentSystemModel } from '../../models/payment.system.model';\nimport { PaymentSystemService } from './payment.system.service';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([PaymentSystemModel, PaymentSystemLocaleModel]),\n  ],\n  providers: [PaymentSystemService, PaymentSystemModel],\n  controllers: [],\n  exports: [PaymentSystemService],\n})\nexport class PaymentSystemModule {}\n","import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { FindOptions, QueryTypes } from 'sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { ChannelModel } from '../../models/channel.model';\nimport { PaymentProviderChannelModel } from '../../models/payment.provider.channel.model';\nimport { PaymentProviderEntityModel } from '../../models/payment.provider.entity.model';\nimport { PaymentSystemModel } from '../../models/payment.system.model';\nimport { DepositOrWithdrawalEnum } from '../providers/payment-provider-channel/payment.provider.channel.service';\nimport * as moment from 'moment-timezone';\nimport * as numeral from 'numeral';\nimport { DepositablePaymentSystem } from '../dto/depositable.paymentsystem';\nimport { PaymentSystemLocaleModel } from '../../models/payment.system.locale.model';\n\n@Injectable()\nexport class PaymentSystemService {\n  constructor(\n    @InjectModel(PaymentSystemModel)\n    private paymentSystemRepository: typeof PaymentSystemModel,\n\n    @InjectModel(PaymentSystemLocaleModel)\n    private paymentSystemLocaleRepository: typeof PaymentSystemLocaleModel,\n\n    private configService: ConfigService,\n    private sequelize: Sequelize\n  ) {}\n\n  public async getDepositables(\n    frozenRestrict: boolean\n  ): Promise<DepositablePaymentSystem[]> {\n    const depositablePaymentSystems: DepositablePaymentSystem[] = [];\n\n    let sqlFrozenFlexible = ``;\n\n    if (!frozenRestrict) {\n      const frozenPeriod = this.configService.get<number>('FROZEN_PERIOD');\n      const frozenPeriodBegin = moment()\n        .subtract(frozenPeriod, 'minutes')\n        .format();\n      const frozenPeriodEnd = moment().add(frozenPeriod, 'minutes').format();\n      //sqlFrozenFlexible = `and ( not \"channels->paymentProviderChannels\".\"isFrozen\" or \"channels->paymentProviderChannels\".\"frozenCheckedDate\" not between '${frozenPeriodBegin}' and '${frozenPeriodEnd}' )`;\n      sqlFrozenFlexible = `and ( not \"ppc\".\"isFrozen\" or \"ppc\".\"frozenCheckedDate\" not between '${frozenPeriodBegin}' and '${frozenPeriodEnd}' )`;\n    } else {\n      //sqlFrozenFlexible = `and not \"channels->paymentProviderChannels\".\"isFrozen\"`;\n      sqlFrozenFlexible = `and not \"ppc\".\"isFrozen\"`;\n    }\n\n    //const sqlIsAvailable = `\"channels->paymentProviderChannels->paymentProvider\".\"isDepositSupport\" and \"channels->paymentProviderChannels\".\"isAvailable\" ${sqlFrozenFlexible}`;\n    const sqlIsAvailable = `\"pp\".\"isDepositSupport\" and \"ppc\".\"isActive\" and \"ppc\".\"isAvailable\" ${sqlFrozenFlexible}`;\n\n    // const items = await this.paymentSystemRepository.findAll({\n    //   attributes: [\n    //     'PaymentSystemModel.id',\n    //     'paymentSystemName',\n    //     [Sequelize.literal(`bool_or(${sqlIsAvailable})`), 'isAvailable'],\n    //     [\n    //       Sequelize.literal(\n    //         `min(case when (${sqlIsAvailable}) then \"channels->paymentProviderChannels\".\"providerMinAmount\" end)`\n    //       ),\n    //       'minAmount',\n    //     ],\n    //     [\n    //       Sequelize.literal(\n    //         `max(case when (${sqlIsAvailable}) then \"channels->paymentProviderChannels\".\"providerMaxAmount\" end)`\n    //       ),\n    //       'maxAmount',\n    //     ],\n    //   ],\n    //   include: [\n    //     {\n    //       model: ChannelModel,\n    //       as: 'channels',\n    //       attributes: [],\n    //       include: [\n    //         {\n    //           model: PaymentProviderChannelModel,\n    //           as: 'paymentProviderChannels',\n    //           attributes: [],\n    //           include: [\n    //             {\n    //               model: PaymentProviderEntityModel,\n    //               as: 'paymentProvider',\n    //               attributes: [],\n    //             },\n    //           ],\n    //         },\n    //       ],\n    //     },\n    //   ],\n    //   where: {\n    //     '$channels.depositOrWithdrawable$': DepositOrWithdrawalEnum.DEPOSIT,\n    //   },\n    //   group: ['PaymentSystemModel.id'],\n    //   raw: true,\n    // });\n\n    const sql = `\n      select \n        ps.id , ps.\"paymentSystemName\" , \n        bool_or(${sqlIsAvailable}) \"isAvailable\",\n        min(case when (${sqlIsAvailable}) then \"ppc\".\"providerMinAmount\" end) \"minAmount\",\n        max(case when (${sqlIsAvailable}) then \"ppc\".\"providerMaxAmount\" end) \"maxAmount\"\n      from \"paymentSystem\" ps \n      left join channel c on ps.id  = c.\"fromPaymentSystemId\" \n      left join \"paymentProviderChannel\" ppc on c.id = ppc.\"channelId\" \n      left join \"paymentProviders\" pp on ppc.\"paymentProviderId\" = pp .id \n      where c.\"depositOrWithdrawable\" = ${DepositOrWithdrawalEnum.DEPOSIT}\n      group by ps.id `;\n\n    const items = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    for (let i = 0; i < items.length; i++) {\n      const item = <\n        {\n          id: number;\n          paymentSystemName: string;\n          isAvailable: boolean;\n          minAmount: string;\n          maxAmount: string;\n        }\n      >(<unknown>items[i]);\n\n      const depositablePaymentSystem = new DepositablePaymentSystem();\n\n      depositablePaymentSystem.id = item.id;\n      depositablePaymentSystem.paymentMethodName = item.paymentSystemName;\n      depositablePaymentSystem.isAvailable = item.isAvailable;\n      depositablePaymentSystem.minAmount = numeral(item.minAmount).value();\n      depositablePaymentSystem.maxAmount = numeral(item.maxAmount).value();\n\n      const paymentSystemLocales = await this.paymentSystemLocaleRepository.findAll(\n        {\n          where: {\n            paymentSystemId: item.id,\n          },\n          include: ['locale'],\n        }\n      );\n\n      const locales: { [key: string]: string } = {};\n      paymentSystemLocales.forEach((paymentSystemLocale) => {\n        locales[paymentSystemLocale.locale.localeName] =\n          paymentSystemLocale.label;\n      });\n\n      depositablePaymentSystem.locales = locales;\n\n      depositablePaymentSystems.push(depositablePaymentSystem);\n    }\n\n    return depositablePaymentSystems;\n  }\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsIn, IsNumber, IsOptional } from 'class-validator';\n\nexport class PaymentProviderBankGetRequestDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  paymentProviderId: number;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  ValidateNested,\n} from 'class-validator';\n\nexport class PaymentProviderBankUpdateRequestItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  id: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isActive: boolean;\n}\n\nexport class PaymentProviderBankUpdateRequestDto {\n  @ApiProperty({\n    type: [PaymentProviderBankUpdateRequestItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => PaymentProviderBankUpdateRequestItem)\n  paymentProviderBanks: PaymentProviderBankUpdateRequestItem[];\n}\n","export class PaymentProviderBankUpdateResponseDto {\n  result: boolean;\n  errorMessage: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { PaymentProviderBankModel } from '../../../../models/payment.provider.bank.entity';\nimport { IsBoolean, IsNotEmpty, IsOptional } from 'class-validator';\nimport { PaymentProviderBankUpdateRequestItem } from './payment.provider.bank.update.request.dto';\n\nexport class UpdatePaymentProviderBankDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isActive: boolean;\n\n  public static updateRequestFactory(\n    item: PaymentProviderBankModel,\n    requestItem: PaymentProviderBankUpdateRequestItem\n  ): PaymentProviderBankModel {\n    if (requestItem.isActive !== undefined) {\n      item.isActive = requestItem.isActive;\n    }\n\n    return item;\n  }\n}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../../auth/jwt-auth.guard';\nimport { PaymentProviderBankGetRequestDto } from './dto/payment.provider.bank.get.request.dto';\nimport { PaymentProviderBankUpdateRequestDto } from './dto/payment.provider.bank.update.request.dto';\nimport { PaymentProviderBankUpdateResponseDto } from './dto/payment.provider.bank.update.response.dto';\nimport { PaymentProviderBankService } from './payment.provider.bank.service';\n\n@Controller(apiPathsEnum.paymentProviderBank)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class PaymentProviderBankController {\n  constructor(private paymentProviderBankService: PaymentProviderBankService) {}\n\n  @Get(apiPathsEnum.getPaymentProviderBanks)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  gets(@Query() query: PaymentProviderBankGetRequestDto) {\n    return this.paymentProviderBankService.findAllByQuery(query);\n  }\n\n  @Post(apiPathsEnum.updatePaymentProviderBanks)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  update(\n    @Body() updateRequestDto: PaymentProviderBankUpdateRequestDto\n  ): Promise<PaymentProviderBankUpdateResponseDto> {\n    return this.paymentProviderBankService.updateByRequest(updateRequestDto);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BankModel } from '../../../models/bank.entity';\nimport { PaymentProviderBankModel } from '../../../models/payment.provider.bank.entity';\nimport { PaymentProviderBankController } from './payment.provider.bank.controller';\nimport { PaymentProviderBankService } from './payment.provider.bank.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([PaymentProviderBankModel, BankModel])],\n  providers: [PaymentProviderBankService, PaymentProviderBankModel],\n  controllers: [PaymentProviderBankController],\n  exports: [PaymentProviderBankService],\n})\nexport class PaymentProviderBankModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { FindOptions, QueryTypes, SaveOptions } from 'sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { WithdrawableBank } from '../../dto/withdrawable.banks';\nimport * as moment from 'moment-timezone';\nimport * as numeral from 'numeral';\nimport { DepositOrWithdrawalEnum } from '../payment-provider-channel/payment.provider.channel.service';\nimport { BankModel } from '../../../models/bank.entity';\nimport { PaymentProviderBankModel } from '../../../models/payment.provider.bank.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { PaymentProviderBankGetRequestDto } from './dto/payment.provider.bank.get.request.dto';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { ChannelModel } from '../../../models/channel.model';\nimport { PaymentProviderBankUpdateRequestDto } from './dto/payment.provider.bank.update.request.dto';\nimport { PaymentProviderBankUpdateResponseDto } from './dto/payment.provider.bank.update.response.dto';\nimport { UpdatePaymentProviderBankDto } from './dto/update-payment.provider.bank.dto';\n\n@Injectable()\nexport class PaymentProviderBankService {\n  constructor(\n    @InjectModel(PaymentProviderBankModel)\n    private pyamentProviderBankRepository: typeof PaymentProviderBankModel,\n\n    @InjectModel(BankModel)\n    private bankRepository: typeof BankModel,\n\n    private sequelize: Sequelize,\n    private configService: ConfigService\n  ) {}\n\n  public async get(\n    paymentProviderId: number,\n    bankId: number\n  ): Promise<PaymentProviderBankModel> {\n    return await this.pyamentProviderBankRepository.findOne({\n      where: {\n        bankId,\n        paymentProviderId,\n      },\n    });\n  }\n\n  async update(\n    paymentProviderChannel: PaymentProviderBankModel,\n    options: SaveOptions\n  ): Promise<PaymentProviderBankModel> {\n    return await paymentProviderChannel.save(options);\n  }\n\n  async updateByRequest(\n    updateRequest: PaymentProviderBankUpdateRequestDto\n  ): Promise<PaymentProviderBankUpdateResponseDto> {\n    const response = new PaymentProviderBankUpdateResponseDto();\n\n    for (let i = 0; i < updateRequest.paymentProviderBanks.length; i++) {\n      const requestItem = updateRequest.paymentProviderBanks[i];\n\n      const paymentProviderChannel = await this.pyamentProviderBankRepository.findByPk(\n        requestItem.id\n      );\n\n      if (!paymentProviderChannel) {\n        continue;\n      }\n\n      const paymentProviderChannelUpdated = UpdatePaymentProviderBankDto.updateRequestFactory(\n        paymentProviderChannel,\n        requestItem\n      );\n\n      await paymentProviderChannelUpdated.save();\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  public async findAll(options?: FindOptions) {\n    return await this.pyamentProviderBankRepository.findAll(options);\n  }\n\n  public async findAllByQuery(query: PaymentProviderBankGetRequestDto) {\n    const findOptions: FindOptions = {\n        include: [\n          { model: PaymentProviderEntityModel, as: 'paymentProvider' },\n          { model: BankModel, as: 'bank' },\n        ],\n        order: [\n          ['paymentProviderId', 'asc'],\n          ['bankId', 'asc'],\n        ],\n      },\n      where: {} = {};\n\n    if (query.paymentProviderId !== undefined) {\n      where['paymentProviderId'] = query.paymentProviderId;\n    }\n\n    findOptions.where = where;\n\n    return this.pyamentProviderBankRepository.findAll(findOptions);\n  }\n\n  public async getWithdrawableBanks(\n    frozenRestrict?: boolean\n  ): Promise<WithdrawableBank[]> {\n    const withdrawableBanks: WithdrawableBank[] = [];\n\n    let sqlFrozenFlexible = ``;\n\n    // if (!frozenRestrict) {\n    //   const frozenPeriod = this.configService.get<number>('FROZEN_PERIOD');\n    //   const frozenPeriodBegin = moment()\n    //     .subtract(frozenPeriod, 'minutes')\n    //     .format();\n    //   const frozenPeriodEnd = moment().add(frozenPeriod, 'minutes').format();\n    //   sqlFrozenFlexible = `and ( not ppc.\"isFrozen\" or ppc.\"frozenCheckedDate\" between '${frozenPeriodBegin}' and '${frozenPeriodEnd}')`;\n    // } else {\n    //   sqlFrozenFlexible = `and not ppc.\"isFrozen\"`;\n    // }\n\n    const sqlIsAvailable = `pp.\"isWithdrawalSupport\" and ppc.\"isActive\" and ppc.\"isAvailable\" ${sqlFrozenFlexible}`;\n\n    const sql = `\n        select\n            b.id as \"bankId\",\n            b.\"bankCode\" ,\n            b.\"bankName\" ,\n            bool_or(${sqlIsAvailable}) \"isAvailable\" ,\n            min(case when (${sqlIsAvailable}) then ppc.\"providerMinAmount\" end)  \"minAmount\",\n            min(case when (${sqlIsAvailable}) then ppc.\"providerMaxAmount\" end)  \"maxAmount\"\n          from bank b \n          left join \"paymentProviderBank\" ppb on b.id = ppb.\"bankId\" \n          left join \"paymentProviders\" pp on ppb.\"paymentProviderId\" = pp.id \n          left join \"paymentProviderChannel\" ppc on pp.id  = ppc.\"paymentProviderId\"\n          left join channel c on ppc.\"channelId\"  = c.id \n          where c.\"depositOrWithdrawable\" = ${DepositOrWithdrawalEnum.WITHDRAWAL}\n          group by b.id \n          order by b.id `;\n\n    const bankItmes = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    for (let i = 0; i < bankItmes.length; i++) {\n      const bankItem = <\n        {\n          bankId: number;\n          bankCode: string;\n          bankName: string;\n          isAvailable: boolean;\n          minAmount: string;\n          maxAmount: string;\n        }\n      >bankItmes[i];\n\n      const withdrawableBank = new WithdrawableBank();\n\n      withdrawableBank.bankId = bankItem.bankId;\n      withdrawableBank.minAmount = numeral(bankItem.minAmount).value();\n      withdrawableBank.maxAmount = numeral(bankItem.maxAmount).value();\n      withdrawableBank.isAvailable = bankItem.isAvailable;\n      withdrawableBank.bankCode = bankItem.bankCode;\n      withdrawableBank.bankName = bankItem.bankName;\n\n      withdrawableBanks.push(withdrawableBank);\n    }\n\n    return withdrawableBanks;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { PaymentProviderCardModel } from '../../../../models/payment.provider.card.model';\nimport {\n  IsBoolean,\n  IsDecimal,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { PaymentProviderCardCreateRequestItem } from './payment.provider.card.create.request.dto';\n\nexport class CreatePaymentProviderCardDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  bankId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bankAccountName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  bankAccountNumber: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  province: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  city: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  branch: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsNumber()\n  maxDailyAmount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  minAmount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  maxAmount: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  active: boolean;\n\n  public static createRequestFactory(\n    requestItem: PaymentProviderCardCreateRequestItem\n  ): CreatePaymentProviderCardDto {\n    const item = new CreatePaymentProviderCardDto();\n\n    item.paymentProviderId = requestItem.paymentProviderId;\n    item.bankId = requestItem.bankId;\n    item.bankAccountName = requestItem.bankAccountName;\n    item.bankAccountNumber = requestItem.bankAccountNumber;\n\n    if (requestItem.branch) {\n      item.branch = requestItem.branch;\n    }\n\n    item.province = requestItem.province;\n    item.city = requestItem.city;\n\n    if (requestItem.active) {\n      item.active = requestItem.active;\n    }\n\n    if (requestItem.maxDailyAmount) {\n      item.maxDailyAmount = requestItem.maxDailyAmount;\n    }\n\n    item.minAmount = requestItem.minAmount;\n    item.maxAmount = requestItem.maxAmount;\n\n    return item;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n  ValidateNested,\n  IsDecimal,\n  IsInt,\n} from 'class-validator';\n\nexport class PaymentProviderCardCreateRequestItem {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsNumber()\n  id: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  bankId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bankAccountName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  bankAccountNumber: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  province: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  city: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  branch: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsNumber()\n  maxDailyAmount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  minAmount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  maxAmount: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsBoolean()\n  active: boolean;\n}\n\nexport class PaymentProviderCardCreateRequestDto {\n  @ApiProperty({\n    type: [PaymentProviderCardCreateRequestItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => PaymentProviderCardCreateRequestItem)\n  paymentProviderCards: PaymentProviderCardCreateRequestItem[];\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class PaymentProviderCardItemDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  id: number;\n}\n\nexport class PaymentProviderCardDeleteRequestDto {\n  @ApiProperty({\n    type: [PaymentProviderCardItemDto],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => PaymentProviderCardItemDto)\n  cards: PaymentProviderCardItemDto[];\n}\n","export class PaymentProviderCardDeleteResponseDto {\n  result: boolean;\n  message: string;\n  error: any;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsIn, IsNumber, IsOptional } from 'class-validator';\n\nexport class PaymentProviderCardGetRequestDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  paymentProviderId: number;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n  ValidateNested,\n  IsDecimal,\n  IsInt,\n} from 'class-validator';\n\nexport class PaymentProviderCardUpdateRequestItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  id: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  bankId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bankAccountName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  bankAccountNumber: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  province: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  city: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  branch: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsDecimal()\n  maxDailyAmount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  minAmount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  maxAmount: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  active: boolean;\n}\n\nexport class PaymentProviderCardUpdateRequestDto {\n  @ApiProperty({\n    type: [PaymentProviderCardUpdateRequestItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => PaymentProviderCardUpdateRequestItem)\n  paymentProviderCards: PaymentProviderCardUpdateRequestItem[];\n}\n","export class PaymentProviderCardUpdateResponseDto {\n  result: boolean;\n  errorMessage: string;\n  error: any;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { PaymentProviderCardModel } from '../../../../models/payment.provider.card.model';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n  IsDecimal,\n  IsInt,\n} from 'class-validator';\nimport { PaymentProviderCardUpdateRequestItem } from './payment.provider.card.update.request.dto';\n\nexport class UpdatePaymentProviderCardDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  paymentProviderId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  bankId: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bankAccountName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  bankAccountNumber: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  province: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  city: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  branch: boolean;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsNumber()\n  maxDailyAmount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsInt()\n  noUsed: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsNumber()\n  maxAmount: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  active: boolean;\n\n  public static updateRequestFactory(\n    item: PaymentProviderCardModel,\n    requestItem: PaymentProviderCardUpdateRequestItem\n  ): PaymentProviderCardModel {\n    if (requestItem.paymentProviderId !== undefined) {\n      item.paymentProviderId = requestItem.paymentProviderId;\n    }\n\n    if (requestItem.bankId !== undefined) {\n      item.bankId = requestItem.bankId;\n    }\n\n    if (requestItem.bankAccountName !== undefined) {\n      item.bankAccountName = requestItem.bankAccountName;\n    }\n\n    if (requestItem.bankAccountNumber !== undefined) {\n      item.bankAccountNumber = requestItem.bankAccountNumber;\n    }\n\n    if (requestItem.branch !== undefined) {\n      item.branch = requestItem.branch;\n    }\n\n    if (requestItem.province !== undefined) {\n      item.province = requestItem.province;\n    }\n\n    if (requestItem.city !== undefined) {\n      item.city = requestItem.city;\n    }\n\n    if (requestItem.maxDailyAmount !== undefined) {\n      item.maxDailyAmount = requestItem.maxDailyAmount;\n    }\n\n    if (requestItem.minAmount !== undefined) {\n      item.minAmount = requestItem.minAmount;\n    }\n\n    if (requestItem.maxAmount !== undefined) {\n      item.maxAmount = requestItem.maxAmount;\n    }\n\n    if (requestItem.active !== undefined) {\n      item.active = requestItem.active;\n    }\n\n    return item;\n  }\n}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport * as moment from 'moment';\nimport { JwtAuthGuard } from '../../../auth/jwt-auth.guard';\nimport { PaymentProviderCardCreateRequestDto } from './dto/payment.provider.card.create.request.dto';\nimport { PaymentProviderCardCreateResponseDto } from './dto/payment.provider.card.create.response.dto';\nimport { PaymentProviderCardDeleteRequestDto } from './dto/payment.provider.card.delete.request.dto';\nimport { PaymentProviderCardDeleteResponseDto } from './dto/payment.provider.card.delete.response.dto';\nimport { PaymentProviderCardGetRequestDto } from './dto/payment.provider.card.get.request.dto';\nimport { PaymentProviderCardUpdateRequestDto } from './dto/payment.provider.card.update.request.dto';\nimport { PaymentProviderCardUpdateResponseDto } from './dto/payment.provider.card.update.response.dto';\nimport { PaymentProviderCardService } from './payment.provider.card.service';\n\n@Controller(apiPathsEnum.paymentProviderCard)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class PaymentProviderCardController {\n  constructor(private paymentProviderCardService: PaymentProviderCardService) {}\n\n  @Get(apiPathsEnum.getPaymentProviderCards)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  gets(@Query() query: PaymentProviderCardGetRequestDto) {\n    //return this.paymentProviderCardService.findAllByQuery(query);\n    return this.paymentProviderCardService.findAllWithUsed({\n      day: moment().utcOffset('+08:00').format('MM/DD/YYYY'),\n      providerId: query.paymentProviderId,\n    });\n  }\n\n  @Post(apiPathsEnum.createPaymentProviderCards)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  create(\n    @Body() createRequestDto: PaymentProviderCardCreateRequestDto\n  ): Promise<PaymentProviderCardCreateResponseDto> {\n    return this.paymentProviderCardService.createByRequest(createRequestDto);\n  }\n\n  @Post(apiPathsEnum.updatePaymentProviderCards)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  update(\n    @Body() updateRequestDto: PaymentProviderCardUpdateRequestDto\n  ): Promise<PaymentProviderCardUpdateResponseDto> {\n    return this.paymentProviderCardService.updateByRequest(updateRequestDto);\n  }\n\n  @Post(apiPathsEnum.deletePaymentProviderCards)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  delete(\n    @Body()\n    deleteRequest: PaymentProviderCardDeleteRequestDto\n  ): Promise<PaymentProviderCardDeleteResponseDto> {\n    return this.paymentProviderCardService.deleteByRequest(deleteRequest);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BankModel } from '../../../models/bank.entity';\nimport { PaymentProviderCardModel } from '../../../models/payment.provider.card.model';\nimport { PaymentProviderSharedModule } from '../payment-provider-shared/payment.provider.shared.module';\nimport { PaymentProviderCardController } from './payment.provider.card.controller';\nimport { PaymentProviderCardService } from './payment.provider.card.service';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([PaymentProviderCardModel, BankModel]),\n    PaymentProviderSharedModule,\n  ],\n  providers: [PaymentProviderCardService],\n  controllers: [PaymentProviderCardController],\n  exports: [PaymentProviderCardService],\n})\nexport class PaymentProviderCardModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { FindOptions, Op, QueryTypes, SaveOptions } from 'sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { WithdrawableBank } from '../../dto/withdrawable.banks';\nimport * as moment from 'moment-timezone';\nimport * as numeral from 'numeral';\nimport { DepositOrWithdrawalEnum } from '../payment-provider-channel/payment.provider.channel.service';\nimport { BankModel } from '../../../models/bank.entity';\nimport { PaymentProviderCardModel } from '../../../models/payment.provider.card.model';\nimport { ConfigService } from '@nestjs/config';\nimport { PaymentProviderCardGetRequestDto } from './dto/payment.provider.card.get.request.dto';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { ChannelModel } from '../../../models/channel.model';\nimport { PaymentProviderCardUpdateRequestDto } from './dto/payment.provider.card.update.request.dto';\nimport { PaymentProviderCardUpdateResponseDto } from './dto/payment.provider.card.update.response.dto';\nimport { UpdatePaymentProviderCardDto } from './dto/update-payment.provider.card.dto';\nimport { PaymentProviderCardCreateRequestDto } from './dto/payment.provider.card.create.request.dto';\nimport { PaymentProviderCardCreateResponseDto } from './dto/payment.provider.card.create.response.dto';\nimport { CreatePaymentProviderCardDto } from './dto/create-payment.provider.card.dto';\nimport { PaymentProviderCardDeleteRequestDto } from './dto/payment.provider.card.delete.request.dto';\nimport { PaymentProviderCardDeleteResponseDto } from './dto/payment.provider.card.delete.response.dto';\nimport { PaymentProviderCardMinMaxAmount } from './interface/payment.provider.card.minmaxamont';\nimport { PaymentProviderSharedService } from '../payment-provider-shared/payment.provider.shared.service';\n\n@Injectable()\nexport class PaymentProviderCardService {\n  constructor(\n    @InjectModel(PaymentProviderCardModel)\n    private pyamentProviderCardRepository: typeof PaymentProviderCardModel,\n\n    @InjectModel(BankModel)\n    private bankRepository: typeof BankModel,\n\n    private sequelize: Sequelize,\n    private configService: ConfigService,\n\n    private paymentProviderSharedService: PaymentProviderSharedService\n  ) {}\n\n  public async get(\n    paymentProviderId: number,\n    bankId: number\n  ): Promise<PaymentProviderCardModel> {\n    return await this.pyamentProviderCardRepository.findOne({\n      where: {\n        bankId,\n        paymentProviderId,\n      },\n    });\n  }\n\n  async updateByRequest(\n    updateRequest: PaymentProviderCardUpdateRequestDto\n  ): Promise<PaymentProviderCardUpdateResponseDto> {\n    const response = new PaymentProviderCardUpdateResponseDto();\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        for (let i = 0; i < updateRequest.paymentProviderCards.length; i++) {\n          const requestItem = updateRequest.paymentProviderCards[i];\n\n          const paymentProviderChannel = await this.pyamentProviderCardRepository.findByPk(\n            requestItem.id\n          );\n\n          if (!paymentProviderChannel) {\n            continue;\n          }\n\n          const paymentProviderChannelUpdated = UpdatePaymentProviderCardDto.updateRequestFactory(\n            paymentProviderChannel,\n            requestItem\n          );\n\n          const paymentProviderCardUpdated = await paymentProviderChannelUpdated.save(\n            { transaction }\n          );\n\n          await this.paymentProviderSharedService.uptodateChannelMinMaxAmountForCardProvider(\n            paymentProviderCardUpdated.paymentProviderId,\n            { transaction }\n          );\n        }\n      });\n    } catch (error) {\n      response.error = error;\n      return response;\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  async createByRequest(\n    createRequest: PaymentProviderCardCreateRequestDto\n  ): Promise<PaymentProviderCardCreateResponseDto> {\n    const response = new PaymentProviderCardUpdateResponseDto();\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        for (let i = 0; i < createRequest.paymentProviderCards.length; i++) {\n          const requestItem = createRequest.paymentProviderCards[i];\n\n          if (requestItem.id) {\n            const paymentProviderCard = await this.pyamentProviderCardRepository.findByPk(\n              requestItem.id\n            );\n\n            if (!paymentProviderCard) {\n              continue;\n            }\n\n            const paymentProviderCardUpdated = UpdatePaymentProviderCardDto.updateRequestFactory(\n              paymentProviderCard,\n              requestItem\n            );\n\n            await paymentProviderCardUpdated.save({ transaction });\n\n            await this.paymentProviderSharedService.uptodateChannelMinMaxAmountForCardProvider(\n              paymentProviderCardUpdated.paymentProviderId,\n              { transaction }\n            );\n\n            continue;\n          }\n\n          const createPaymentProviderCard = CreatePaymentProviderCardDto.createRequestFactory(\n            requestItem\n          );\n\n          const paymentProviderCardCreated = await this.pyamentProviderCardRepository.create(\n            createPaymentProviderCard,\n            { transaction }\n          );\n\n          await this.paymentProviderSharedService.uptodateChannelMinMaxAmountForCardProvider(\n            createPaymentProviderCard.paymentProviderId,\n            { transaction }\n          );\n        }\n      });\n    } catch (error) {\n      response.error = error;\n      return response;\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  async deleteByRequest(\n    deleteRequest: PaymentProviderCardDeleteRequestDto\n  ): Promise<PaymentProviderCardDeleteResponseDto> {\n    const response = new PaymentProviderCardDeleteResponseDto();\n    response.result = false;\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        const cardItems = deleteRequest.cards;\n\n        for (let i = 0; i < cardItems.length; i++) {\n          const cardItem = cardItems[i];\n\n          const paymentProviderCard = await this.pyamentProviderCardRepository.findOne(\n            {\n              where: {\n                id: cardItem.id,\n              },\n            }\n          );\n\n          if (!paymentProviderCard) {\n            continue;\n          }\n\n          await paymentProviderCard.destroy({ transaction });\n\n          await this.paymentProviderSharedService.uptodateChannelMinMaxAmountForCardProvider(\n            paymentProviderCard.paymentProviderId,\n            { transaction }\n          );\n        }\n      });\n    } catch (error) {\n      response.error = error;\n      return response;\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  public async findAll(options?: FindOptions) {\n    return await this.pyamentProviderCardRepository.findAll(options);\n  }\n\n  public async findAllByQuery(query: PaymentProviderCardGetRequestDto) {\n    const findOptions: FindOptions = {\n        include: [\n          { model: PaymentProviderEntityModel, as: 'paymentProvider' },\n          { model: BankModel, as: 'bank' },\n        ],\n        order: [\n          ['paymentProviderId', 'asc'],\n          ['bankId', 'asc'],\n          ['bankAccountName', 'asc'],\n        ],\n      },\n      where: {} = {};\n\n    if (query.paymentProviderId !== undefined) {\n      where['paymentProviderId'] = query.paymentProviderId;\n    }\n\n    findOptions.where = where;\n\n    return this.pyamentProviderCardRepository.findAll(findOptions);\n  }\n\n  public async findAllWithUsed(options: { day: string; providerId: number }) {\n    const whereProvider = options.providerId\n      ? `ppc.\"paymentProviderId\" = ${options.providerId}`\n      : 'true';\n    const sql = `select \n      ppc.*, coalesce(sum(d.amount),0) \"usedDay\",\n      pp.\"providerName\", pp.\"isDepositSupport\", pp.\"isWithdrawalSupport\", pp.\"isOnlyCardSupport\",\n      bk.\"bankCode\", bk.\"bankName\"\n    from \"paymentProviderCard\" ppc \n    left join \"paymentProviders\" pp on ppc.\"paymentProviderId\" = pp.\"id\"\n    left join \"bank\" bk on ppc.\"bankId\" = bk.\"id\"\n    left join deposit d on \n      ppc.id  = d.\"paymentProviderCardId\"  and \n      d.\"date\" >= to_date('${options.day}', 'MM/DD/YYYY' )  and d.\"date\"  < (to_date('${options.day}', 'MM/DD/YYYY' ) + interval '1 day')\n    where ${whereProvider}\n    group by ppc.id, pp.id, bk.id `;\n\n    const items = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    const providerCards = [];\n    items.forEach((item) =>\n      providerCards.push({\n        id: item['id'],\n        bankAccountName: item['bankAccountName'],\n        bankAccountNumber: item['bankAccountNumber'],\n        province: item['province'],\n        city: item['city'],\n        branch: item['branch'],\n        minAmount: numeral(item['minAmount']).value(),\n        maxAmount: numeral(item['maxAmount']).value(),\n        maxDailyAmount: numeral(item['maxDailyAmount']).value(),\n        usedDay: numeral(item['usedDay']).value(),\n        active: item['active'],\n        paymentProvider: {\n          id: item['paymentProviderId'],\n          providerName: item['providerName'],\n          isDepositSupport: item['isDepositSupport'],\n          isWithdrawalSupport: item['isWithdrawalSupport'],\n          isOnlyCardSupport: item['isOnlyCardSupport'],\n        },\n        bank: {\n          id: item['bankId'],\n          bankCode: item['bankCode'],\n          bankName: item['bankName'],\n        },\n      })\n    );\n\n    return providerCards;\n  }\n\n  public async findActiveByDateAndAmount(options: {\n    day: string;\n    amount: string;\n    providerId: number;\n  }) {\n    const sql = `select \n      ppc.id\n    from \"paymentProviderCard\" ppc \n    left join deposit d on \n      ppc.id  = d.\"paymentProviderCardId\"  and \n      d.\"date\" >= to_date('${options.day}', 'MM/DD/YYYY' )  and d.\"date\"  < (to_date('${options.day}', 'MM/DD/YYYY' ) + interval '1 day')\n    where ppc.\"paymentProviderId\" = ${options.providerId} and ppc.active and ppc.\"minAmount\" <= ${options.amount}\n    group by ppc.id  having \n      case \n        when ppc.\"maxDailyAmount\" is null then ppc.\"maxAmount\" \n        else least (ppc.\"maxAmount\", ppc.\"maxDailyAmount\"-coalesce(sum(d.amount),0) ) \n      end >= ${options.amount}`;\n\n    const items = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    const ids = [];\n    items.forEach((item) => ids.push(item['id']));\n\n    return this.pyamentProviderCardRepository.findAll({\n      include: [{ model: BankModel, as: 'bank' }],\n      where: { id: { [Op.in]: ids } },\n    });\n  }\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsIn, IsNumber, IsOptional } from 'class-validator';\n\nexport class PaymentProviderChannelGetRequestDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  paymentProviderId: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  @IsIn([1, 2])\n  depositOrWithdrawable: number;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  ValidateNested,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\n\nexport class PaymentProviderChannelUpdateRequestItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  id: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isActive: boolean;\n\n  @ApiProperty()\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  providerMinAmount: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  providerMaxAmount: number;\n}\n\nexport class PaymentProviderChannelUpdateRequestDto {\n  @ApiProperty({\n    type: [PaymentProviderChannelUpdateRequestItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => PaymentProviderChannelUpdateRequestItem)\n  paymentProviderChannels: PaymentProviderChannelUpdateRequestItem[];\n}\n","export class PaymentProviderChannelUpdateResponseDto {\n  result: boolean;\n  errorMessage: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { PaymentProviderChannelModel } from '../../../../models/payment.provider.channel.model';\nimport { IsBoolean, IsNotEmpty, IsOptional } from 'class-validator';\nimport { PaymentProviderChannelUpdateRequestItem } from './payment.provider.channel.update.request.dto';\n\nexport class UpdatePaymentProviderChannelDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isActive: boolean;\n\n  public static updateRequestFactory(\n    item: PaymentProviderChannelModel,\n    requestItem: PaymentProviderChannelUpdateRequestItem\n  ): PaymentProviderChannelModel {\n    if (requestItem.isActive !== undefined) {\n      item.isActive = requestItem.isActive;\n    }\n\n    if (requestItem.providerMinAmount !== undefined) {\n      item.providerMinAmount = requestItem.providerMinAmount;\n    }\n\n    if (requestItem.providerMaxAmount !== undefined) {\n      item.providerMaxAmount = requestItem.providerMaxAmount;\n    }\n\n    return item;\n  }\n}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../../auth/jwt-auth.guard';\nimport { ChannelModel } from '../../../models/channel.model';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { PaymentProviderChannelGetRequestDto } from './dto/payment.provider.channel.get.request.dto';\nimport { PaymentProviderChannelUpdateRequestDto } from './dto/payment.provider.channel.update.request.dto';\nimport { PaymentProviderChannelUpdateResponseDto } from './dto/payment.provider.channel.update.response.dto';\nimport { PaymentProviderChannelService } from './payment.provider.channel.service';\n\n@Controller(apiPathsEnum.paymentProviderChannel)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class PaymentProviderChannelController {\n  constructor(\n    private paymentProviderChannelService: PaymentProviderChannelService\n  ) {}\n\n  @Get(apiPathsEnum.getPaymentProviderChannels)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  gets(@Query() query: PaymentProviderChannelGetRequestDto) {\n    return this.paymentProviderChannelService.findAllByQuery(query);\n  }\n\n  @Post(apiPathsEnum.updatePaymentProviderChannels)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  update(\n    @Body() updateRequestDto: PaymentProviderChannelUpdateRequestDto\n  ): Promise<PaymentProviderChannelUpdateResponseDto> {\n    return this.paymentProviderChannelService.updateByRequest(updateRequestDto);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { ChannelLocaleModel } from '../../../models/channel.locale.model';\nimport { ChannelModel } from '../../../models/channel.model';\nimport { LocaleModel } from '../../../models/locale.model';\nimport { PaymentProviderChannelModel } from '../../../models/payment.provider.channel.model';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { PaymentProviderChannelController } from './payment.provider.channel.controller';\nimport { PaymentProviderChannelService } from './payment.provider.channel.service';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([\n      PaymentProviderChannelModel,\n      ChannelModel,\n      PaymentProviderEntityModel,\n      LocaleModel,\n      ChannelLocaleModel,\n    ]),\n  ],\n  providers: [PaymentProviderChannelService, PaymentProviderChannelModel],\n  controllers: [PaymentProviderChannelController],\n  exports: [PaymentProviderChannelService],\n})\nexport class PaymentProviderChannelModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\n\nimport { FindOptions, Op, QueryTypes, SaveOptions } from 'sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { DepositableChannel } from '../../dto/depositable.channel';\n\nimport * as numeral from 'numeral';\nimport * as moment from 'moment-timezone';\nimport { ConfigService } from '@nestjs/config';\nimport { ChannelLocaleModel } from '../../../models/channel.locale.model';\nimport { ChannelModel } from '../../../models/channel.model';\nimport { LocaleModel } from '../../../models/locale.model';\nimport { PaymentProviderChannelModel } from '../../../models/payment.provider.channel.model';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { PaymentProviderChannelUpdateRequestDto } from './dto/payment.provider.channel.update.request.dto';\nimport { PaymentProviderChannelUpdateResponseDto } from './dto/payment.provider.channel.update.response.dto';\nimport { UpdatePaymentProviderChannelDto } from './dto/update-payment.provider.channel.dto';\nimport { PaymentProviderChannelGetRequestDto } from './dto/payment.provider.channel.get.request.dto';\nimport { PaymentSystemModel } from '../../../models/payment.system.model';\nimport { PaymentSystemEnum } from '@workspace/enums';\n\nexport enum DepositOrWithdrawalEnum {\n  DEPOSIT = 1,\n  WITHDRAWAL = 2,\n}\n\n@Injectable()\nexport class PaymentProviderChannelService {\n  constructor(\n    @InjectModel(PaymentProviderEntityModel)\n    private paymentProviderRepository: typeof PaymentProviderEntityModel,\n\n    @InjectModel(PaymentProviderChannelModel)\n    private paymentProviderChannelRepository: typeof PaymentProviderChannelModel,\n\n    @InjectModel(ChannelModel)\n    private channelRepository: typeof ChannelModel,\n\n    @InjectModel(LocaleModel)\n    private localeRepository: typeof LocaleModel,\n\n    @InjectModel(ChannelLocaleModel)\n    private channelLocaleRepository: typeof ChannelLocaleModel,\n\n    protected sequelize: Sequelize,\n    protected configService: ConfigService\n  ) {}\n\n  async update(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    options: SaveOptions\n  ): Promise<PaymentProviderChannelModel> {\n    return await paymentProviderChannel.save(options);\n  }\n\n  async updateByRequest(\n    updateRequest: PaymentProviderChannelUpdateRequestDto\n  ): Promise<PaymentProviderChannelUpdateResponseDto> {\n    const response = new PaymentProviderChannelUpdateResponseDto();\n\n    for (let i = 0; i < updateRequest.paymentProviderChannels.length; i++) {\n      const requestItem = updateRequest.paymentProviderChannels[i];\n\n      const paymentProviderChannel = await this.paymentProviderChannelRepository.findByPk(\n        requestItem.id\n      );\n\n      if (!paymentProviderChannel || paymentProviderChannel.isMinMaxAuto) {\n        continue;\n      }\n\n      const paymentProviderChannelUpdated = UpdatePaymentProviderChannelDto.updateRequestFactory(\n        paymentProviderChannel,\n        requestItem\n      );\n\n      await paymentProviderChannelUpdated.save();\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  // Find All Channels\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  public async findAll(options?: FindOptions) {\n    return await this.paymentProviderChannelRepository.findAll(options);\n  }\n\n  public async findAllByQuery(query: PaymentProviderChannelGetRequestDto) {\n    const findOptions: FindOptions = {\n        include: [\n          { model: PaymentProviderEntityModel, as: 'paymentProvider' },\n          {\n            model: ChannelModel,\n            as: 'channel',\n            include: [\n              { model: PaymentSystemModel, as: 'fromPaymentSystem' },\n              { model: PaymentSystemModel, as: 'toPaymentSystem' },\n            ],\n          },\n        ],\n        order: [\n          ['paymentProviderId', 'asc'],\n          ['channel', 'depositOrWithdrawable', 'asc'],\n          ['channelId', 'asc'],\n        ],\n      },\n      where: {} = {};\n\n    if (query.depositOrWithdrawable !== undefined) {\n      where['$channel.depositOrWithdrawable$'] = query.depositOrWithdrawable;\n    }\n\n    if (query.paymentProviderId !== undefined) {\n      where['paymentProviderId'] = query.paymentProviderId;\n    }\n\n    findOptions.where = where;\n\n    return this.paymentProviderChannelRepository.findAll(findOptions);\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  // Find One Deposit USDT USDT Channel\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  public async findOneDepositUsdtToUsdt(paymentProviderId: number) {\n    return this.paymentProviderChannelRepository.findOne({\n      include: [{ model: ChannelModel, as: 'channel' }],\n      where: {\n        paymentProviderId,\n        '$channel.fromPaymentSystemId$': PaymentSystemEnum.USDT,\n        '$channel.toPaymentSystemId$': PaymentSystemEnum.USDT,\n        '$channel.depositOrWithdrawable$': DepositOrWithdrawalEnum.DEPOSIT,\n      },\n    });\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  // Find One Withdraw USDT USDT Channel\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  public async findOneWithdrawUsdtToUsdt(paymentProviderId: number) {\n    return this.paymentProviderChannelRepository.findOne({\n      include: [{ model: ChannelModel, as: 'channel' }],\n      where: {\n        paymentProviderId,\n        '$channel.fromPaymentSystemId$': PaymentSystemEnum.USDT,\n        '$channel.toPaymentSystemId$': PaymentSystemEnum.USDT,\n        '$channel.depositOrWithdrawable$': DepositOrWithdrawalEnum.WITHDRAWAL,\n      },\n    });\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Channel By Provider Channel Name\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  async getChannelIdByProviderChannelName(\n    paymentProviderId: number,\n    providerChannelName: string\n  ): Promise<number> {\n    const paymentProviderChannel = await this.paymentProviderChannelRepository.findOne(\n      {\n        where: {\n          paymentProviderId,\n          providerChannelName,\n        },\n      }\n    );\n\n    if (!paymentProviderChannel) {\n      return null;\n    }\n\n    return paymentProviderChannel.channelId;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable Channels\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  async getDepositables(): Promise<DepositableChannel[]> {\n    const depositableChannels: DepositableChannel[] = [];\n\n    const sql = `\n      select \n          c.id \"channelId\",\n          c.\"channelName\",\n          bool_or (case when (pp.\"isDepositSupport\" and ppc.\"isAvailable\") then true else false end) \"isAvailable\",\n          min(case when (pp.\"isDepositSupport\" and ppc.\"isAvailable\") then ppc.\"providerMinAmount\" end) \"minAmount\" ,\n          max(case when (pp.\"isDepositSupport\" and ppc.\"isAvailable\") then ppc.\"providerMaxAmount\" end) \"maxAmount\" \n        from channel c \n        left join \"paymentProviderChannel\" ppc on c.id  = ppc.\"channelId\" \n        left join \"paymentProviders\" pp on ppc.\"paymentProviderId\"  = pp.id \n        where ppc.\"depositOrWithdrawal\"  = ${DepositOrWithdrawalEnum.DEPOSIT}\n        group by c.id  \n    `;\n\n    const channels = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    for (let i = 0; i < channels.length; i++) {\n      const channel = <\n        {\n          channelId: number;\n          channelName: string;\n          isAvailable: boolean;\n          minAmount: string;\n          maxAmount: string;\n        }\n      >channels[i];\n\n      const depositableChannel = new DepositableChannel();\n\n      depositableChannel.channelId = channel.channelId;\n      depositableChannel.isAvailable = channel.isAvailable;\n      depositableChannel.channelName = channel.channelName;\n      depositableChannel.minAmount = numeral(channel.minAmount).value();\n      depositableChannel.maxAmount = numeral(channel.maxAmount).value();\n\n      const channelLocales = await this.channelLocaleRepository.findAll({\n        where: {\n          channelId: depositableChannel.channelId,\n        },\n        include: ['locale'],\n      });\n\n      const locales: { [key: string]: string } = {};\n      channelLocales.forEach((channelLocale) => {\n        locales[channelLocale.locale.localeName] = channelLocale.label;\n      });\n\n      depositableChannel.locales = locales;\n\n      depositableChannels.push(depositableChannel);\n    }\n\n    return depositableChannels;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  // GetDepositablesByPaymentSystem\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  async getDepositablesByPaymentSystem(\n    paymentSystemId: number,\n    paymentProviderId: number,\n    amount: number\n  ): Promise<PaymentProviderChannelModel[]> {\n    const frozenPeriod = this.configService.get<number>('FROZEN_PERIOD');\n    const paymentProviderChannels = await this.paymentProviderChannelRepository.findAll(\n      {\n        include: [{ model: ChannelModel, as: 'channel' }],\n        where: {\n          isAvailable: true, // check isAvailable\n          isActive: true,\n          [Op.or]: [\n            { isFrozen: false },\n            {\n              frozenCheckedDate: {\n                [Op.notBetween]: [\n                  moment().subtract(frozenPeriod, 'minutes').format(),\n                  moment().add(frozenPeriod, 'minutes').format(),\n                ],\n              },\n            },\n          ], // check frozen flexible\n          '$channel.depositOrWithdrawable$': DepositOrWithdrawalEnum.DEPOSIT, // check channel depositable\n          '$channel.fromPaymentSystemId$': paymentSystemId,\n          paymentProviderId: paymentProviderId,\n          providerMinAmount: {\n            [Op.lte]: amount,\n          },\n          providerMaxAmount: {\n            [Op.gte]: amount,\n          },\n        },\n        order: [['isFrozen', 'DESC']],\n      }\n    );\n\n    return paymentProviderChannels;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  // Get Depositable Entities By Channel\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  async getDeposits(\n    channelId?: number,\n    paymentProviderId?: number\n  ): Promise<PaymentProviderChannelModel[]> {\n    const findOptions: FindOptions = {\n      include: [{ model: ChannelModel, as: 'channel' }],\n      where: {\n        '$channel.depositOrWithdrawable$': DepositOrWithdrawalEnum.DEPOSIT,\n      },\n    };\n\n    if (channelId) {\n      findOptions.where['channelId'] = channelId;\n    }\n\n    if (paymentProviderId) {\n      findOptions.where['paymentProviderId'] = paymentProviderId;\n    }\n\n    return this.paymentProviderChannelRepository.findAll(findOptions);\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  // GetWithdrawables\n  /////////////////////////////////////////////////////////////////////////////////////////////\n  async getWithdrawablesByPaymentProvider(\n    paymentProviderId: number,\n    amount?: number\n  ): Promise<PaymentProviderChannelModel[]> {\n    const frozenPeriod = this.configService.get<number>('FROZEN_PERIOD');\n    const findOptions: FindOptions = {\n      include: [{ model: ChannelModel, as: 'channel' }],\n      where: {\n        isAvailable: true,\n        isActive: true,\n        [Op.or]: [\n          { isFrozen: false },\n          {\n            frozenCheckedDate: {\n              [Op.notBetween]: [\n                moment().subtract(frozenPeriod, 'minutes').format(),\n                moment().add(frozenPeriod, 'minutes').format(),\n              ],\n            },\n          },\n        ], // check frozen\n        '$channel.depositOrWithdrawable$': DepositOrWithdrawalEnum.WITHDRAWAL,\n        paymentProviderId: paymentProviderId,\n      },\n      order: [\n        ['isFrozen', 'DESC'],\n        ['paymentProviderId', 'ASC'],\n      ],\n    };\n\n    if (amount) {\n      findOptions.where['providerMinAmount'] = {\n        [Op.lte]:\n          amount +\n          (this.configService.get<number>('withdrawMinAmountDelta') || 0),\n      };\n      findOptions.where['providerMaxAmount'] = {\n        [Op.gte]: amount,\n      };\n    }\n\n    const paymentProviderChannels = await this.paymentProviderChannelRepository.findAll(\n      findOptions\n    );\n\n    return paymentProviderChannels;\n  }\n\n  async findAvailableChannel(\n    channelId: number,\n    paymentProviderId: number,\n    amount: number,\n    depositOrWithdrawal: number = 1\n  ): Promise<PaymentProviderChannelModel> {\n    return this.paymentProviderChannelRepository.findOne({\n      include: [{ model: ChannelModel, as: 'channel' }],\n      where: {\n        '$channel.depositOrWithdrawable$': depositOrWithdrawal,\n        channelId: channelId,\n        paymentProviderId: paymentProviderId,\n        providerMinAmount: {\n          [Op.lte]: amount,\n        },\n        providerMaxAmount: {\n          [Op.gte]: amount,\n        },\n        isAvailable: true,\n      },\n    });\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { FindOptions } from 'sequelize/types';\nimport { QueryTypes } from 'sequelize';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { PaymentProviderGetRequestDto } from './dto/payment.provider.get.request.dto';\nimport { PaymentProviderUpdateRequestDto } from './dto/payment.provider.update.request.dto';\nimport { PaymentProviderUpdateResponseDto } from './dto/payment.provider.update.response.dto';\nimport { UpdatePaymentProviderDto } from './dto/update-payment.provider.dto';\nimport { PaymentProviderCardService } from '../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderChannelService } from '../payment-provider-channel/payment.provider.channel.service';\nimport { ChannelModel } from '../../../models/channel.model';\nimport { PaymentSystemModel } from '../../../models/payment.system.model';\nimport * as numeral from 'numeral';\n\n@Injectable()\nexport class PaymentProviderEntityService {\n  constructor(\n    private sequelize: Sequelize,\n    @InjectModel(PaymentProviderEntityModel)\n    private paymentProvidersRepository: typeof PaymentProviderEntityModel,\n    private paymentProviderCardService: PaymentProviderCardService,\n    private paymentProviderChannelService: PaymentProviderChannelService\n  ) {}\n\n  async findAll(options?: FindOptions): Promise<PaymentProviderEntityModel[]> {\n    return await this.paymentProvidersRepository.findAll(options);\n  }\n\n  async findAllByQuery(\n    query: PaymentProviderGetRequestDto\n  ): Promise<IPaymentProvider[]> {\n    let sqlWhere = `where true`;\n\n    if (query.isDepositSupport !== undefined) {\n      sqlWhere += ` and vpp.\"isDepositSupport\" `;\n    }\n\n    if (query.isWithdrawalSupport !== undefined) {\n      sqlWhere += ` and vpp.\"isWithdrawalSupport\" `;\n    }\n\n    if (query.isOnlyCardSupport !== undefined) {\n      sqlWhere += ` and vpp.\"isOnlyCardSupport\"`;\n    }\n\n    const sql = `select * from \"v_paymentProvider\" vpp ${sqlWhere}`;\n\n    const items = <IPaymentProvider[]>await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    return items;\n\n    // const findOptions: FindOptions = {\n    //     order: [['id', 'asc']],\n    //   },\n    //   where: {} = {};\n\n    // if (query.isDepositSupport !== undefined) {\n    //   where['isDepositSupport'] = query.isDepositSupport;\n    // }\n\n    // if (query.isWithdrawalSupport !== undefined) {\n    //   where['isWithdrawalSupport'] = query.isWithdrawalSupport;\n    // }\n\n    // findOptions.where = where;\n\n    // return this.paymentProvidersRepository.findAll(findOptions);\n  }\n\n  async findById(\n    paymentProviderId: number\n  ): Promise<PaymentProviderEntityModel> {\n    return await this.paymentProvidersRepository.findByPk(paymentProviderId);\n  }\n\n  async findByProviderName(\n    providerName: string\n  ): Promise<PaymentProviderEntityModel> {\n    return await this.paymentProvidersRepository.findOne({\n      where: {\n        providerName: providerName,\n      },\n    });\n  }\n\n  async findDepositAvailableProvider(\n    isAvailable: boolean = true\n  ): Promise<PaymentProviderEntityModel[]> {\n    return await this.paymentProvidersRepository.findAll({\n      where: {\n        isDepositSupport: isAvailable,\n      },\n    });\n  }\n\n  async findWithdrawalAvailableProvider(\n    isAvailable: boolean = true\n  ): Promise<PaymentProviderEntityModel[]> {\n    return await this.paymentProvidersRepository.findAll({\n      where: {\n        isWithdrawalSupport: isAvailable,\n      },\n    });\n  }\n\n  async update(\n    updateRequest: PaymentProviderUpdateRequestDto\n  ): Promise<PaymentProviderUpdateResponseDto> {\n    const response = new PaymentProviderUpdateResponseDto();\n\n    for (let i = 0; i < updateRequest.paymentProviders.length; i++) {\n      const requestItem = updateRequest.paymentProviders[i];\n\n      const paymentProvider = await this.paymentProvidersRepository.findByPk(\n        requestItem.id\n      );\n\n      if (!paymentProvider) {\n        continue;\n      }\n\n      const paymentProviderUpdated = UpdatePaymentProviderDto.updateRequestFactory(\n        paymentProvider,\n        requestItem\n      );\n\n      await paymentProviderUpdated.save();\n    }\n\n    response.result = true;\n    return response;\n  }\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsBoolean, IsOptional } from 'class-validator';\n\nexport class PaymentProviderGetRequestDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => /true/i.test(params.value))\n  @IsBoolean()\n  isDepositSupport: boolean;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => /true/i.test(params.value))\n  @IsBoolean()\n  isWithdrawalSupport: boolean;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => /true/i.test(params.value))\n  @IsBoolean()\n  isOnlyCardSupport: boolean;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  ValidateNested,\n} from 'class-validator';\n\nexport class PaymentProviderUpdateRequestItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  id: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isDepositSupport: boolean;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isWithdrawalSupport: boolean;\n}\n\nexport class PaymentProviderUpdateRequestDto {\n  @ApiProperty({\n    type: [PaymentProviderUpdateRequestItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => PaymentProviderUpdateRequestItem)\n  paymentProviders: PaymentProviderUpdateRequestItem[];\n}\n","export class PaymentProviderUpdateResponseDto {\n  result: boolean;\n  errorMessage: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { PaymentProviderEntityModel } from '../../../../models/payment.provider.entity.model';\nimport { IsBoolean, IsNotEmpty, IsOptional } from 'class-validator';\nimport { PaymentProviderUpdateRequestItem } from './payment.provider.update.request.dto';\n\nexport class UpdatePaymentProviderDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isDepositSupport: boolean;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isWithdrawalSupport: boolean;\n\n  public static updateRequestFactory(\n    item: PaymentProviderEntityModel,\n    requestItem: PaymentProviderUpdateRequestItem\n  ): PaymentProviderEntityModel {\n    if (requestItem.isDepositSupport !== undefined) {\n      item.isDepositSupport = requestItem.isDepositSupport;\n    }\n\n    if (requestItem.isWithdrawalSupport !== undefined) {\n      item.isWithdrawalSupport = requestItem.isWithdrawalSupport;\n    }\n\n    return item;\n  }\n}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../../auth/jwt-auth.guard';\nimport { PaymentProviderEntityService } from '../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderGetRequestDto } from './dto/payment.provider.get.request.dto';\nimport { PaymentProviderUpdateRequestDto } from './dto/payment.provider.update.request.dto';\nimport { PaymentProviderUpdateResponseDto } from './dto/payment.provider.update.response.dto';\n\nimport { FindOptions, Op } from 'sequelize';\n\n@Controller(apiPathsEnum.paymentProvider)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class PaymentProviderEntityController {\n  constructor(private payProviderEntityService: PaymentProviderEntityService) {}\n\n  @Get(apiPathsEnum.getPaymentProviders)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  gets(@Query() query: PaymentProviderGetRequestDto) {\n    return this.payProviderEntityService.findAllByQuery(query);\n  }\n\n  @Post(apiPathsEnum.updatePaymentProviders)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  update(\n    @Body() updateRequestDto: PaymentProviderUpdateRequestDto\n  ): Promise<PaymentProviderUpdateResponseDto> {\n    return this.payProviderEntityService.update(updateRequestDto);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { PaymentProviderCardModule } from '../payment-provider-card/payment.provider.card.module';\nimport { PaymentProviderChannelModule } from '../payment-provider-channel/payment.provider.channel.module';\nimport { PaymentProviderEntityController } from './payment.provider.entity.controller';\nimport { PaymentProviderEntityService } from './Payment.provider.entity.service';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([PaymentProviderEntityModel]),\n    PaymentProviderCardModule,\n    PaymentProviderChannelModule,\n  ],\n  providers: [PaymentProviderEntityService, PaymentProviderEntityModel],\n  controllers: [PaymentProviderEntityController],\n  exports: [PaymentProviderEntityService],\n})\nexport class PaymentProviderEntityModule {}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { PaymentProviderCardModel } from '../../../models/payment.provider.card.model';\nimport { PaymentProviderChannelModel } from '../../../models/payment.provider.channel.model';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { PaymentProviderCardModule } from '../payment-provider-card/payment.provider.card.module';\nimport { PaymentProviderChannelModule } from '../payment-provider-channel/payment.provider.channel.module';\nimport { PaymentProviderSharedService } from './payment.provider.shared.service';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([\n      PaymentProviderChannelModel,\n      PaymentProviderCardModel,\n    ]),\n  ],\n  providers: [PaymentProviderSharedService],\n  controllers: [],\n  exports: [PaymentProviderSharedService],\n})\nexport class PaymentProviderSharedModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { FindOptions } from 'sequelize/types';\nimport { QueryTypes } from 'sequelize';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { PaymentProviderCardService } from '../payment-provider-card/payment.provider.card.service';\nimport {\n  DepositOrWithdrawalEnum,\n  PaymentProviderChannelService,\n} from '../payment-provider-channel/payment.provider.channel.service';\nimport { ChannelModel } from '../../../models/channel.model';\nimport { PaymentSystemModel } from '../../../models/payment.system.model';\nimport * as numeral from 'numeral';\nimport { PaymentProviderChannelModel } from '../../../models/payment.provider.channel.model';\nimport { PaymentProviderCardModel } from '../../../models/payment.provider.card.model';\nimport { PaymentProviderCardMinMaxAmount } from '../payment-provider-card/interface/payment.provider.card.minmaxamont';\nimport { Transaction } from 'sequelize';\n\n@Injectable()\nexport class PaymentProviderSharedService {\n  constructor(\n    private sequelize: Sequelize,\n\n    @InjectModel(PaymentProviderChannelModel)\n    private paymentProviderChannelRepository: typeof PaymentProviderChannelModel,\n\n    @InjectModel(PaymentProviderCardModel)\n    private pyamentProviderCardRepository: typeof PaymentProviderCardModel\n  ) {}\n\n  /**\n   * Get Min, Max Value\n   */\n  public async getMinMaxAmountByProvider(\n    paymentProviderId: number,\n    options?: {\n      transaction: Transaction;\n    }\n  ) {\n    const transaction =\n      options && options.transaction ? options.transaction : null;\n\n    const items = await this.sequelize.query(\n      `select \n            min(ppc.\"minAmount\") \"minAmount\" , max(ppc.\"maxAmount\") \"maxAmount\" \n          from \"paymentProviderCard\" ppc \n          where ppc.\"paymentProviderId\" = ${paymentProviderId} and ppc.active`,\n      { type: QueryTypes.SELECT, transaction: transaction }\n    );\n\n    const item = <PaymentProviderCardMinMaxAmount>items[0];\n\n    return item;\n  }\n\n  public async uptodateChannelMinMaxAmountForCardProvider(\n    paymentProviderId: number,\n    options?: {\n      transaction: Transaction;\n    }\n  ) {\n    const transaction =\n      options && options.transaction ? options.transaction : null;\n\n    const minMaxAmount = await this.getMinMaxAmountByProvider(\n      paymentProviderId,\n      transaction ? { transaction } : null\n    );\n\n    const ppcs = await this.paymentProviderChannelRepository.findAll({\n      include: [\n        {\n          model: ChannelModel,\n          as: 'channel',\n          include: [\n            { model: PaymentSystemModel, as: 'fromPaymentSystem' },\n            { model: PaymentSystemModel, as: 'toPaymentSystem' },\n          ],\n        },\n      ],\n      where: {\n        paymentProviderId,\n        '$channel.fromPaymentSystem.isBank$': true,\n        '$channel.toPaymentSystem.isBank$': true,\n        '$channel.depositOrWithdrawable$': DepositOrWithdrawalEnum.DEPOSIT,\n      },\n    });\n\n    if (!ppcs || ppcs.length < 1) {\n      return;\n    }\n\n    const paymentProviderChannel = ppcs[0];\n\n    paymentProviderChannel.providerMinAmount =\n      numeral(minMaxAmount.minAmount).value() || null;\n    paymentProviderChannel.providerMaxAmount =\n      numeral(minMaxAmount.maxAmount).value() || null;\n\n    await paymentProviderChannel.save(transaction ? { transaction } : null);\n  }\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsIn, IsNumber, IsOptional } from 'class-validator';\n\nexport class PaymentProviderUsdtProtoGetRequestDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @Transform((params) => Number(params.value))\n  @IsNumber()\n  paymentProviderId: number;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  ValidateNested,\n} from 'class-validator';\n\nexport class PaymentProviderUsdtProtoUpdateRequestItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  id: number;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isActive: boolean;\n}\n\nexport class PaymentProviderUsdtProtoUpdateRequestDto {\n  @ApiProperty({\n    type: [PaymentProviderUsdtProtoUpdateRequestItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => PaymentProviderUsdtProtoUpdateRequestItem)\n  paymentProviderUsdtProtos: PaymentProviderUsdtProtoUpdateRequestItem[];\n}\n","export class PaymentProviderUsdtProtoUpdateResponseDto {\n  result: boolean;\n  errorMessage: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { PaymentProviderUsdtProtocolModel } from '../../../../models/payment.provider.usdt.protocol.model';\nimport { IsBoolean, IsNotEmpty, IsOptional } from 'class-validator';\nimport { PaymentProviderUsdtProtoUpdateRequestItem } from './payment.provider.usdt.proto.update.request.dto';\n\nexport class UpdatePaymentProviderUsdtProtoDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: number;\n\n  public static updateRequestFactory(\n    item: PaymentProviderUsdtProtocolModel,\n    requestItem: PaymentProviderUsdtProtoUpdateRequestItem\n  ): PaymentProviderUsdtProtocolModel {\n    return item;\n  }\n}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../../auth/jwt-auth.guard';\nimport { PaymentProviderUsdtProtoGetRequestDto } from './dto/payment.provider.usdt.proto.get.request.dto';\nimport { PaymentProviderUsdtProtoUpdateRequestDto } from './dto/payment.provider.usdt.proto.update.request.dto';\nimport { PaymentProviderUsdtProtoUpdateResponseDto } from './dto/payment.provider.usdt.proto.update.response.dto';\nimport { PaymentProviderUsdtProtoService } from './payment.provider.usdt.proto.service';\n\n@Controller(apiPathsEnum.paymentProviderUsdtProto)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class PaymentProviderUsdtProtoController {\n  constructor(\n    private paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService\n  ) {}\n\n  @Get(apiPathsEnum.getPaymentProviderUsdtProtos)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  gets(@Query() query: PaymentProviderUsdtProtoGetRequestDto) {\n    return this.paymentProviderUsdtProtoService.findAllByQuery(query);\n  }\n\n  @Post(apiPathsEnum.updatePaymentProviderUsdtProtos)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  update(\n    @Body() updateRequestDto: PaymentProviderUsdtProtoUpdateRequestDto\n  ): Promise<PaymentProviderUsdtProtoUpdateResponseDto> {\n    return this.paymentProviderUsdtProtoService.updateByRequest(\n      updateRequestDto\n    );\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { PaymentProviderUsdtProtocolModel } from '../../../models/payment.provider.usdt.protocol.model';\nimport { UsdtProtocolModel } from '../../../models/usdtProtocol';\nimport { PaymentProviderUsdtProtoController } from './payment.provider.usdt.proto.controller';\nimport { PaymentProviderUsdtProtoService } from './payment.provider.usdt.proto.service';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([\n      PaymentProviderUsdtProtocolModel,\n      UsdtProtocolModel,\n    ]),\n  ],\n  providers: [\n    PaymentProviderUsdtProtoService,\n    PaymentProviderUsdtProtocolModel,\n  ],\n  controllers: [PaymentProviderUsdtProtoController],\n  exports: [PaymentProviderUsdtProtoService],\n})\nexport class PaymentProviderUsdtProtoModule {}\n","import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { PaymentProviderUsdtProtocolModel } from '../../../models/payment.provider.usdt.protocol.model';\nimport { UsdtProtocolModel } from '../../../models/usdtProtocol';\nimport { FindOptions, QueryTypes, SaveOptions } from 'sequelize';\nimport { PaymentProviderUsdtProtoUpdateRequestDto } from './dto/payment.provider.usdt.proto.update.request.dto';\nimport { PaymentProviderUsdtProtoUpdateResponseDto } from './dto/payment.provider.usdt.proto.update.response.dto';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { PaymentProviderUsdtProtoGetRequestDto } from './dto/payment.provider.usdt.proto.get.request.dto';\nimport { UpdatePaymentProviderUsdtProtoDto } from './dto/update-payment.provider.usdt.proto.dto';\nimport { DepositOrWithdrawalEnum } from '../payment-provider-channel/payment.provider.channel.service';\n\n@Injectable()\nexport class PaymentProviderUsdtProtoService {\n  constructor(\n    @InjectModel(PaymentProviderUsdtProtocolModel)\n    private pyamentProviderUsdtProtoRepository: typeof PaymentProviderUsdtProtocolModel,\n\n    @InjectModel(UsdtProtocolModel)\n    private usdtProtoRepository: typeof UsdtProtocolModel,\n\n    private sequelize: Sequelize,\n    private configService: ConfigService\n  ) {}\n\n  public async findAll(options?: FindOptions) {\n    return await this.pyamentProviderUsdtProtoRepository.findAll(options);\n  }\n\n  public async findAllByQuery(query: PaymentProviderUsdtProtoGetRequestDto) {\n    const findOptions: FindOptions = {\n        include: [\n          { model: PaymentProviderEntityModel, as: 'paymentProvider' },\n          { model: UsdtProtocolModel, as: 'bank' },\n        ],\n        order: [\n          ['paymentProviderId', 'asc'],\n          ['usdtProtoId', 'asc'],\n        ],\n      },\n      where: {} = {};\n\n    if (query.paymentProviderId !== undefined) {\n      where['paymentProviderId'] = query.paymentProviderId;\n    }\n\n    findOptions.where = where;\n\n    return this.pyamentProviderUsdtProtoRepository.findAll(findOptions);\n  }\n\n  public async getDepositMinMaxAmount(paymentProviderId) {\n    const sql = `\n      select \n        min(ppup.\"providerMinAmount\") \"providerMinAmount\" , \n        max(ppup.\"providerMaxAmount\") \"providerMaxAmount\" \n      from \"paymentProviderUsdtProtocol\" ppup\n      where \n        ppup.\"isAvailable\" and \n        ppup.\"paymentProviderId\" =${paymentProviderId} and \n        ppup.\"depositOrWithdrawable\"=${DepositOrWithdrawalEnum.DEPOSIT}`;\n\n    const items = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    if (items.length < 1) {\n      return null;\n    }\n\n    const item = <{ providerMinAmount: number; providerMaxAmount: number }>(\n      items[0]\n    );\n\n    return item;\n  }\n\n  public async getWithdrawMinMaxAmount(paymentProviderId) {\n    const sql = `\n      select \n        min(ppup.\"providerMinAmount\") \"providerMinAmount\" , \n        max(ppup.\"providerMaxAmount\") \"providerMaxAmount\" \n      from \"paymentProviderUsdtProtocol\" ppup\n      where \n        ppup.\"isAvailable\" and \n        ppup.\"paymentProviderId\" =${paymentProviderId} and \n        ppup.\"depositOrWithdrawable\"=${DepositOrWithdrawalEnum.WITHDRAWAL}`;\n\n    const items = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    if (items.length < 1) {\n      return null;\n    }\n\n    const item = <{ providerMinAmount: number; providerMaxAmount: number }>(\n      items[0]\n    );\n\n    return item;\n  }\n\n  async update(\n    paymentProviderChannel: PaymentProviderUsdtProtocolModel,\n    options: SaveOptions\n  ): Promise<PaymentProviderUsdtProtocolModel> {\n    return await paymentProviderChannel.save(options);\n  }\n\n  async updateByRequest(\n    updateRequest: PaymentProviderUsdtProtoUpdateRequestDto\n  ): Promise<PaymentProviderUsdtProtoUpdateResponseDto> {\n    const response = new PaymentProviderUsdtProtoUpdateResponseDto();\n\n    for (let i = 0; i < updateRequest.paymentProviderUsdtProtos.length; i++) {\n      const requestItem = updateRequest.paymentProviderUsdtProtos[i];\n\n      const paymentProviderChannel = await this.pyamentProviderUsdtProtoRepository.findByPk(\n        requestItem.id\n      );\n\n      if (!paymentProviderChannel) {\n        continue;\n      }\n\n      const paymentProviderChannelUpdated = UpdatePaymentProviderUsdtProtoDto.updateRequestFactory(\n        paymentProviderChannel,\n        requestItem\n      );\n\n      await paymentProviderChannelUpdated.save();\n    }\n\n    response.result = true;\n    return response;\n  }\n}\n","import {\n  Body,\n  Controller,\n  HttpCode,\n  Inject,\n  Logger,\n  Post,\n  Headers,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  apiEndpointDecriptionEnum,\n  apiPathsEnum,\n  apiTagsEnum,\n} from '@workspace/enums';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { BisaDepositStatusResponseDto } from './dto/bisa.deposit.status.response.dto';\nimport { BisaWithdrawStatusResponseDto } from './dto/bisa.withdraw.status.response.dto';\nimport { BisaPaymentProviderService } from './bisa.payment.provider.service';\nimport { RequestIpAddress } from '../../../../decorators/request.ip.decorators';\n\n@Controller(apiPathsEnum.payment)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class BisaPaymentProviderController {\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    private bisaPaymentProviderService: BisaPaymentProviderService\n  ) {}\n\n  @Post(apiPathsEnum.bisacallbackDeposit)\n  @HttpCode(200)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.depositBisaCallback,\n  })\n  async depositCallback(\n    @Body() depositStatusResponse: BisaDepositStatusResponseDto,\n    @RequestIpAddress() ip: string,\n    @Headers() headers\n  ) {\n    return this.bisaPaymentProviderService.depositCallback(\n      depositStatusResponse,\n      ip,\n      headers\n    );\n  }\n\n  @Post(apiPathsEnum.bisacallbackWithdraw)\n  @HttpCode(200)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.withdrawBisaCallback,\n  })\n  async withdrawCallback(\n    @Body() withdrawStatusResponse: BisaWithdrawStatusResponseDto,\n    @RequestIpAddress() ip: string,\n    @Headers() headers\n  ) {\n    return this.bisaPaymentProviderService.withdrawCallback(\n      withdrawStatusResponse,\n      ip,\n      headers\n    );\n  }\n}\n","import {\n  Injectable,\n  HttpService,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { PaymentProviderEnum, OrderStatusEnum } from '@workspace/enums';\nimport { BankModel } from '../../../../models/bank.entity';\nimport { PaymentProviderChannelModel } from '../../../../models/payment.provider.channel.model';\nimport { PaymentProviderUsdtProtocolModel } from '../../../../models/payment.provider.usdt.protocol.model';\nimport { TestModel } from '../../../../models/test.entity';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize/types';\nimport { BankService } from '../../../bank/bank.service';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { PaymentWithdrawRequestDto } from '../../../dto/payment.withdraw.request.dto';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderDepositRequestDto } from '../payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from '../payment.provider.deposit.result';\nimport {\n  PaymentProviderChannelDepositResultBundle,\n  PaymentProviderChannelWithdrawResultBundle,\n  PaymentProviderService,\n} from '../payment.provider.service';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../payment.provider.withdraw.result';\nimport {\n  BisaChannelDepositResult,\n  BisaDepositResult,\n} from './dto/bisa.deposit.result';\nimport {\n  BisaChannelWithdrawResult,\n  BisaWithdrawResult,\n} from './dto/bisa.withdraw.result';\nimport { DepositPendingOrderModel } from '../../../../models/deposit.pending.order.model';\nimport { BisaDepositRequestParams } from './dto/bisa.deposit.request.params';\nimport * as moment from 'moment-timezone';\nimport * as crypto from 'crypto';\nimport * as numeral from 'numeral';\nimport { BisaDepositStatusResponseDto } from './dto/bisa.deposit.status.response.dto';\nimport { BisaWithdrawStatusResponseDto } from './dto/bisa.withdraw.status.response.dto';\nimport { PaymentProviderWithdrawRequestDto } from '../payment.provider.withdraw.request.dto';\nimport {\n  NotSupportedBank,\n  PaymentProviderException,\n} from '../../../payment.exception';\nimport { BisaWithdrawRequestParams } from './dto/bisa.withdraw.request.params';\nimport { OptionsService } from '../../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../../error/enums/errorCodeEnum';\n\n@Injectable()\nexport class BisaPaymentProviderService extends PaymentProviderService {\n  constructor(\n    @InjectModel(BankModel)\n    private bankRepository: typeof BankModel,\n\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    private httpService: HttpService,\n\n    @InjectModel(TestModel)\n    private testRepository: typeof TestModel\n  ) {\n    super(\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.Bisa;\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  public async depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle> {\n    const channelDepositResultBundle = new PaymentProviderChannelDepositResultBundle();\n\n    let depositResult: BisaChannelDepositResult;\n    let order: DepositPendingOrderModel;\n\n    const channelDepositResultDefault = { providerName: this.getPaymentProviderName() };\n\n    order = await this.createOrderBeforeDeposit(\n      depositRequest,\n      paymentProviderChannel,\n      transaction\n    );\n    if (!order) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const optItem = await this.optionsService.findOne({\n      where: { optName: 'huobiExchangeData' },\n    });\n    if (!optItem) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_USDT_RATE_NOT_FOUND },\n        order\n      };\n    }\n\n    const huobiExchangeData = <\n      { data_time: string; name: string; rate: number; time: string }\n      >JSON.parse(optItem.optValue.toString('utf8'));\n\n    const usdtExchangeRate = huobiExchangeData.rate;\n    order.usdtExchangeRate = usdtExchangeRate;\n\n    const params = new BisaDepositRequestParams();\n    params.order_key = order.orderId;\n    params.coin = paymentProviderUsdtProto.providerUsdtProtoCurrency;\n    params.notification_link =\n      this.getBaseUrl(depositRequest.headers['host']) +\n      this.configService.get<string>('bisa.DEPOSIT_SUCCESS_URL');\n    params.amount = numeral(order.amount / usdtExchangeRate).format('0.00');\n    params.expired_at = numeral(moment().add(1, 'hour').format('x')).value();\n    params.scale = 0;\n\n    const host = this.configService.get<string>('BISA_HOST');\n    const url = this.configService.get<string>('BISA_DEPOSIT_URL');\n\n    const algo = 'sha512'; // sha256 or sha384 are also supported\n    const secret = this.configService.get('BISA_SECRET'); // your api secret\n    const body = JSON.stringify({ ...params, timestamp: Date.now() }); // current timestamp is required\n    const digest = crypto.createHmac(algo, secret).update(body).digest('hex');\n\n    // console.log(body);\n    // console.log(`${algo}=${digest}`);\n\n    const response = await this.httpService\n      .post(`https://${host}/${url}`, body, {\n        headers: {\n          'content-type': 'application/json',\n          'x-bisa-version': 1,\n          'x-bisa-token': this.configService.get<string>('BISA_TOKEN'),\n          'x-bisa-signature': `${algo}=${digest}`,\n        },\n      })\n      .toPromise();\n\n    depositResult = BisaChannelDepositResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!depositResult.result) {\n      depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_FAILED;\n    }\n\n    depositResult.channelRequestTime = moment()\n      .utcOffset('+08:00')\n      .format('YYYY-MM-DD HH:mm:ss');\n    depositResult.channelRequestJson = JSON.stringify(params);\n    depositResult.channelResponseJson = JSON.stringify(response.data);\n\n    channelDepositResultBundle.depositResult = depositResult;\n    channelDepositResultBundle.order = order;\n\n    return channelDepositResultBundle;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async depositCallback(\n    depositStatusResponse: BisaDepositStatusResponseDto,\n    ip: string,\n    headers: {}\n  ) {\n    await this.testRepository.create({\n      a: JSON.stringify({ ip, res: JSON.stringify(depositStatusResponse) }),\n    });\n\n    if (!(await this.beforeDepositCallback(depositStatusResponse, ip))) {\n      throw new HttpException('ip is invalid', HttpStatus.BAD_REQUEST);\n    }\n\n    const bisaToken = headers['x-bisa-token'];\n    const bisaSignature = headers['x-bisa-signature'];\n\n    if (this.configService.get<string>('BISA_NOTIFY_TOKEN') !== bisaToken) {\n      throw new HttpException(\n        'notify token is invalid',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    const algo = 'sha512'; // sha256 or sha384 are also supported\n    const secret = this.configService.get('BISA_NOTIFY_SECRET'); // your api secret\n    const body = JSON.stringify(depositStatusResponse); // current timestamp is required\n    const digest = crypto.createHmac(algo, secret).update(body).digest('hex');\n\n    if (`${algo}=${digest}` !== bisaSignature) {\n      throw new HttpException('signature is invalid', HttpStatus.BAD_REQUEST);\n    }\n\n    const order = await this.depositPendingOrderService.findByOrderId(\n      depositStatusResponse.order_key\n    );\n\n    if (!order) {\n      const orderAlready = await this.depositOrderService.findByOrderId(\n        depositStatusResponse.order_key\n      );\n\n      if (orderAlready) {\n        return true;\n      }\n\n      throw new HttpException('orderKey is invalid', HttpStatus.BAD_REQUEST);\n    }\n\n    if (order.providerOrderId !== depositStatusResponse.id) {\n      throw new HttpException('deposit id is invalid', HttpStatus.BAD_REQUEST);\n    }\n\n    order.status = OrderStatusEnum.SUCCESS;\n\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      const bcOrder = await this.depositBCAfterDepositCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterDepositCallback(order, transaction);\n      });\n    } catch (error) {\n      throw new HttpException(\n        'system error(transaction)',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    return true;\n  }\n\n  public async withdrawByPaymentProviderChannel(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle> {\n    const withdrawProcResult = new PaymentProviderChannelWithdrawResultBundle();\n\n    let withdrawResult: BisaChannelWithdrawResult;\n\n    const channelWithdrawResultDefault = { providerName: this.getPaymentProviderName() };\n\n    const order = await this.createOrderBeforeWithdraw(\n      withdrawRequest,\n      transaction\n    );\n    if (!order) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.WITHDRAW_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const address = '0x756F45E3FA69347A9A973A725E3C98bC4db0b5a0';\n\n    const optItem = await this.optionsService.findOne({\n      where: { optName: 'huobiExchangeData' },\n    });\n    if (!optItem) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.WITHDRAW_PROVIDER_USDT_RATE_NOT_FOUND },\n        order\n      };\n    }\n\n    const huobiExchangeData = <\n      { data_time: string; name: string; rate: number; time: string }\n      >JSON.parse(optItem.optValue.toString('utf8'));\n\n    const usdtExchangeRate = huobiExchangeData.rate;\n    //order.usdtExchangeRate = usdtExchangeRate;\n\n    const params = new BisaWithdrawRequestParams();\n    params.address = address;\n    params.coin = 'usdt@erc20';\n    params.tag = null;\n    params.withdrawal_key = order.orderId;\n    params.notification_link =\n      this.getBaseUrl(withdrawRequest.headers['host']) +\n      this.configService.get<string>('bisa.WITHDRAWAL_SUCCESS_URL');\n    params.amount = numeral(order.amount / usdtExchangeRate).format('0.00');\n    params.scale = 0;\n\n    const host = this.configService.get<string>('BISA_HOST');\n    const url = this.configService.get<string>('BISA_WITHDRAW_URL');\n\n    const algo = 'sha512'; // sha256 or sha384 are also supported\n    const secret = this.configService.get('BISA_SECRET'); // your api secret\n    const body = JSON.stringify({ ...params, timestamp: Date.now() }); // current timestamp is required\n    const digest = crypto.createHmac(algo, secret).update(body).digest('hex');\n\n    // console.log(body);\n    // console.log(`${algo}=${digest}`);\n\n    const response = await this.httpService\n      .post(`https://${host}/${url}`, body, {\n        headers: {\n          'content-type': 'application/json',\n          'x-bisa-version': 1,\n          'x-bisa-token': this.configService.get<string>('BISA_TOKEN'),\n          'x-bisa-signature': `${algo}=${digest}`,\n        },\n      })\n      .toPromise();\n\n    withdrawResult = BisaChannelWithdrawResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    withdrawProcResult.withdrawResult = withdrawResult;\n    withdrawProcResult.order = order;\n\n    if (!withdrawResult.result) {\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED;\n    }\n\n    return withdrawProcResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawCallback(\n    withdrawStatusResponse: BisaWithdrawStatusResponseDto,\n    ip: string,\n    headers: {}\n  ) {\n    await this.testRepository.create({\n      a: JSON.stringify({ ip, res: JSON.stringify(withdrawStatusResponse) }),\n    });\n\n    if (!(await this.beforeWithdrawCallback(withdrawStatusResponse, ip))) {\n      throw new HttpException('ip is invalid', HttpStatus.BAD_REQUEST);\n    }\n\n    const order = await this.withdrawPendingOrderService.findByOrderId(\n      withdrawStatusResponse.withdrawal_key\n    );\n\n    if (!order) {\n      const orderAlready = await this.withdrawOrderService.findByOrderId(\n        withdrawStatusResponse.withdrawal_key\n      );\n\n      if (orderAlready) {\n        return true;\n      }\n\n      throw new HttpException(\n        'withdrawalKey is invalid',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    order.status = OrderStatusEnum.SUCCESS;\n\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      await this.withdrawBCAfterWithdrawCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterWithdrawCallback(order, transaction);\n      });\n    } catch (error) {\n      throw new HttpException(\n        'system error(transaction)',\n        HttpStatus.BAD_REQUEST\n      );\n    }\n\n    return true;\n  }\n\n  public depositErrorFactory(error: any): PaymentProviderDepositResult {\n    return BisaDepositResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('bisa.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  public withdrawErrorFactory(error: any): PaymentProviderWithdrawResult {\n    return BisaWithdrawResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('bisa.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum {\n    throw new Error('Method not implemented.');\n  }\n\n  getOrderStatusByWithdrawStatus(argWithdrawStatus: {}): OrderStatusEnum {\n    throw new Error('Method not implemented.');\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    const errorCode = depositResult\n      ? numeral(depositResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('bisa.DEPOSIT_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel WithdrawResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelWithdrawResult(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    const errorCode = withdrawResult\n      ? numeral(withdrawResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('bisa.WITHDRAW_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n}\n","export class BisaDepositRequestParams {\n  order_key: string;\n  coin: string;\n  notification_link: string;\n  amount: number;\n  expired_at: number;\n  scale: number;\n}\n","import { paymentProviderEnum } from '@workspace/enums';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n  PaymentProviderDepositResultData,\n} from '../../payment.provider.deposit.result';\n\nexport class BisaDepositResult extends PaymentProviderDepositResult {}\n\nexport class BisaDepositResultData extends PaymentProviderDepositResultData {}\n\n// {\n//   \"id\": \"cc66a05f-29e0-4356-98de-1dfdea385c14\",\n//   \"coin\": \"usdt@trc20\",\n//   \"amount\": \"19.64\",\n//   \"scaled_amount\": \"19640000\",\n//   \"cumulative_amount\": \"0\",\n//   \"scaled_cumulative_amount\": \"0\",\n//   \"created_at\": 1622710723902,\n//   \"expired_at\": 1622714323581,\n//   \"payment_link\": \"https://www.bisacrypto.com/payment/orders/cc66a05f-29e0-4356-98de-1dfdea385c14\",\n//   \"order_key\": \"70831922\",\n//   \"address\": \"TYqg2YUY8Zn37ExNFRJpSURkhJTabtPhdt\",\n//   \"tag\": null,\n//   \"notification_link\": \"https://localhost/api/payment/bisacallback/deposit\"\n// }\n\nexport class BisaChannelDepositResult extends PaymentProviderChannelDepositResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): BisaChannelDepositResult {\n    const data: {\n      id: string;\n      coin: string;\n      amount: string;\n      scaled_amount: string;\n      payment_link: string;\n      address: string;\n      notification_link: string;\n    } = response.data;\n\n    const result = new BisaChannelDepositResult();\n    result.result = true;\n    result.providerName = providerName;\n\n    // if (result.result !== true) {\n    //   result.errorMessage = '';\n    //   result.errorCode = '';\n\n    //   return result;\n    // }\n\n    result.providerOrderId = data.id;\n\n    result.data = new BisaDepositResultData();\n    result.data.url = data.payment_link;\n\n    result.result = true;\n    return result;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): BisaChannelDepositResult {\n    const result = new BisaChannelDepositResult();\n    result.result = false;\n    result.providerName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderDepositResult(): PaymentProviderChannelDepositResult {\n    if (this.data !== undefined) {\n      const data = <BisaDepositResultData>this.data;\n    }\n\n    if (this.providerOrderId !== undefined) {\n      delete this.providerOrderId;\n    }\n\n    if (this.result && this.errorMessage !== undefined) {\n      delete this.errorMessage;\n    }\n\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsNumber,\n  IsInt,\n  IsNumberString,\n} from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\nimport { Transform } from 'class-transformer';\n\nexport enum BisaDepositStatusEnum {}\n\nexport class BisaDepositStatusResponseDto extends PaymentStatusResponseDto {\n  id: string;\n  coin: string;\n  transaction_hash: string;\n  address: string;\n  amount: number;\n  scaled_amount: number;\n  fee: number;\n  scaled_fee: number;\n  created_at: number;\n  confirmed_at: number;\n  on_chain_at: number;\n  last_tried_at: number;\n  notified_at: number;\n  error_count: number;\n  last_error?: {\n    status: number;\n    text: string;\n    body: string;\n  };\n  order_id: string;\n  order_key: string;\n  cumulative_amount: number;\n  scaled_cumulative_amount: number;\n}\n","export class BisaWithdrawRequestParams {\n  withdrawal_key: string;\n  coin: string;\n  address: string;\n  tag: string;\n  notification_link: string;\n  amount: number;\n  scale: number;\n}\n","import {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../../payment.provider.withdraw.result';\n\nexport class BisaWithdrawResult extends PaymentProviderWithdrawResult {}\n\nexport class BisaChannelWithdrawResult extends PaymentProviderChannelWithdrawResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): BisaChannelWithdrawResult {\n    const withdrawResult = new BisaChannelWithdrawResult();\n    withdrawResult.result = true;\n    withdrawResult.providerName = providerName;\n\n    const { id } = response.data || {};\n\n    // if (code !== 200 || !data || !success) {\n    //   withdrawResult.errorCode = code;\n    //   withdrawResult.errorMessage = msg;\n    //   return withdrawResult;\n    // }\n\n    withdrawResult.providerId = id;\n    return withdrawResult;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): BisaChannelWithdrawResult {\n    const result = new BisaChannelWithdrawResult();\n    result.result = false;\n    result.providerId = null;\n    result.providerName = providerName;\n\n    const { message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderWithdrawResult(): PaymentProviderChannelWithdrawResult {\n    delete this.providerId;\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsNumber,\n  IsNumberString,\n  IsInt,\n} from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport enum BisaWithdrawStatusEnum {}\n\nexport class BisaWithdrawStatusResponseDto extends PaymentStatusResponseDto {\n  id: string;\n  transaction_hash: string;\n  scaled_amount: number;\n  fee: number;\n  scaled_fee: number;\n  created_at: number;\n  status: string;\n  withdrawal_key: string;\n  coin: string;\n  address: string;\n  tag: string;\n  notification_link: string;\n  amount: number;\n}\n","import { Injectable, HttpService } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/sequelize';\nimport {\n  PaymentSystemEnum,\n  OrderStatusEnum,\n  PaymentProviderEnum,\n} from '@workspace/enums';\nimport { environment } from '../../../../environments/environment';\nimport * as moment from 'moment';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize/types';\nimport { BankModel } from '../../../models/bank.entity';\nimport { PaymentProviderChannelModel } from '../../../models/payment.provider.channel.model';\nimport { TestModel } from '../../../models/test.entity';\nimport { BankService } from '../../bank/bank.service';\nimport { BetConstructService } from '../../betContruct/betConstruct.service';\nimport { ChannelService } from '../../channel/channel.service';\nimport { PaymentDepositByCardRequest } from '../../interface/payment.deposit.bycard.request';\nimport { DepositOrderService } from '../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { PaymentProviderBankService } from '../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderCardService } from '../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderChannelService } from '../payment-provider-channel/payment.provider.channel.service';\nimport { PaymentProviderEntityService } from '../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../payment-provider-shared/payment.provider.shared.service';\nimport {\n  CardChannelDepositResult,\n  CardDepositResultData,\n} from './dto/card.deposit.result';\nimport { PaymentProviderDepositRequestDto } from './payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderDepositResult,\n  PaymentProviderChannelDepositResult,\n} from './payment.provider.deposit.result';\nimport {\n  PaymentProviderService,\n  PaymentProviderChannelDepositResultBundle,\n  PaymentProviderChannelWithdrawResultBundle,\n} from './payment.provider.service';\nimport { PaymentProviderWithdrawRequestDto } from './payment.provider.withdraw.request.dto';\nimport {\n  PaymentProviderWithdrawResult,\n  PaymentProviderChannelWithdrawResult,\n} from './payment.provider.withdraw.result';\nimport * as crypto from 'crypto';\nimport { CardDepositByCardResult } from './dto/card.deposit.bycard.deposit.result';\nimport { CardChannelWithdrawResult } from './dto/card.withdraw.result';\nimport { PaymentProviderUsdtProtoService } from '../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderUsdtProtocolModel } from '../../../models/payment.provider.usdt.protocol.model';\nimport { OptionsService } from '../../../options/options.service';\n\n@Injectable()\nexport class CardPaymentProviderService extends PaymentProviderService {\n  constructor(\n    //protected bankRepository: typeof BankModel,\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    protected httpService: HttpService //protected testRepository: typeof TestModel\n  ) {\n    super(\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService\n    );\n\n    //this.bankRepository.find\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return null;\n  }\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  public async depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle> {\n    let depositResult: CardChannelDepositResult;\n    const channelDepositResultBundle = new PaymentProviderChannelDepositResultBundle();\n\n    const paymentProviderCards = await this.paymentProviderCardService.findActiveByDateAndAmount(\n      {\n        day: moment().utcOffset('+08:00').format('MM/DD/YYYY'),\n        amount: `${depositRequest.amount}`,\n        providerId: this.getPaymentProviderId(),\n      }\n    );\n\n    if (!paymentProviderCards || paymentProviderCards.length < 1) {\n      depositResult = CardChannelDepositResult.errorFactory(\n        {\n          code: 101,\n          message: 'No Provider Cards',\n          error: null,\n        },\n        this.getPaymentProviderName()\n      );\n      channelDepositResultBundle.depositResult = depositResult;\n      return channelDepositResultBundle;\n    }\n\n    depositResult = new CardChannelDepositResult();\n    depositResult.providerName = this.getPaymentProviderName();\n\n    try {\n      const paymentProviderCard = paymentProviderCards[0];\n      const amount = depositRequest.amount;\n      const userId = depositRequest.userId;\n\n      const iv = crypto.randomBytes(16);\n      const password = this.configService.get<string>('DEPOSIT_KEY');\n      const key = Buffer.from(password);\n      const cipher = crypto.createCipheriv('aes-256-ctr', key, iv);\n\n      const txtSrc = JSON.stringify({\n        paymentProviderId: paymentProviderCard.paymentProviderId,\n        amount,\n        userId,\n      });\n\n      let encDst = cipher.update(txtSrc, 'utf8', 'base64');\n      encDst += cipher.final('base64');\n\n      const url =\n        `${environment.settings.baseUrl}/dashboard/bank-account-details/` +\n        `${encodeURIComponent(encDst)}/` +\n        `${encodeURIComponent(iv.toString('base64'))}`;\n\n      depositResult.result = true;\n      depositResult.data = new CardDepositResultData();\n      depositResult.data.url = url;\n    } catch (error) {\n      depositResult = CardChannelDepositResult.errorFactory(\n        {\n          code: 102,\n          message: 'unknown',\n          error: error,\n        },\n        this.getPaymentProviderName()\n      );\n    }\n\n    channelDepositResultBundle.depositResult = depositResult;\n\n    return channelDepositResultBundle;\n  }\n\n  public async depositByCard(request: PaymentDepositByCardRequest) {\n    const result = new CardDepositByCardResult();\n\n    const paymentProviderChannels = await this.paymentProviderChannelService.getDepositablesByPaymentSystem(\n      PaymentSystemEnum.BANK,\n      this.getPaymentProviderId(),\n      request.amount\n    );\n\n    if (!paymentProviderChannels || paymentProviderChannels.length < 1) {\n      result.result = false;\n      result.errorCode = 201;\n      result.errorMessage = 'No Provider Channels';\n      return result;\n    }\n\n    const paymentProviderChannel = paymentProviderChannels[0];\n\n    const paymentProviderCards = await this.paymentProviderCardService.findActiveByDateAndAmount(\n      {\n        day: moment().utcOffset('+08:00').format('MM/DD/YYYY'),\n        amount: `${request.amount}`,\n        providerId: this.getPaymentProviderId(),\n      }\n    );\n\n    if (!paymentProviderCards || paymentProviderCards.length < 1) {\n      result.result = false;\n      result.errorCode = 202;\n      result.errorMessage = 'No Provider Cards';\n      return result;\n    }\n\n    const paymentProviderCard = paymentProviderCards[0];\n\n    const order = await this.createOrderBeforeDepositByCard(\n      request,\n      paymentProviderChannel,\n      paymentProviderCard,\n      null\n    );\n    if (!order) {\n      return null;\n    }\n\n    result.result = true;\n    result.bankInfo = {\n      bankAccountName: paymentProviderCard.bankAccountName,\n      bankAccountNumber: paymentProviderCard.bankAccountNumber,\n      bank: {\n        bankName: paymentProviderCard.bank.bankName,\n        bankCode: paymentProviderCard.bank.bankCode,\n      },\n      amount: request.amount,\n    };\n\n    return result;\n  }\n\n  public async withdrawByPaymentProviderChannel(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle> {\n    const withdrawProcResult = new PaymentProviderChannelWithdrawResultBundle();\n\n    let withdrawResult: CardChannelWithdrawResult;\n\n    const order = await this.createOrderBeforeWithdraw(\n      withdrawRequest,\n      transaction\n    );\n\n    // const paymentProviderBank = await this.getPaymentProviderBank(\n    //   withdrawRequest.bankCode\n    // );\n    // if (!paymentProviderBank) {\n    //   withdrawResult.errorCode = '301';\n    //   withdrawResult.errorMessage = 'No Payment Provider Bank';\n    // }\n\n    withdrawResult = new CardChannelWithdrawResult();\n    withdrawResult.result = true;\n    withdrawResult.providerName = this.getPaymentProviderName();\n\n    withdrawProcResult.withdrawResult = withdrawResult;\n    withdrawProcResult.order = order;\n\n    return withdrawProcResult;\n  }\n\n  public depositErrorFactory(error: any): PaymentProviderDepositResult {\n    return null;\n  }\n\n  public withdrawErrorFactory(error: any): PaymentProviderWithdrawResult {\n    return null;\n  }\n\n  getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum {\n    return null;\n  }\n\n  getOrderStatusByWithdrawStatus(argWithdrawStatus: {}): OrderStatusEnum {\n    return null;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    return false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel WithdrawResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelWithdrawResult(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    return false;\n  }\n}\n","import { CurrencyEnum } from '@workspace/enums';\n\nexport default () => ({\n  ORDER_NUMBER_PREFIX: 'ORDER',\n  FROZEN_PERIOD: 1, // MINUTES\n  PAYMENTPROVIDER_DEBUG: true,\n  testUserId: 323172552,\n  withdrawMinAmountDelta: 5,\n  betConstruct: {\n    numberOfTasksProcessed: 20,\n    checkClient: {\n      command: 'check',\n    },\n    alreadySuccessProcessedBCOrderErrorCode: 602,\n    alreadySuccessProcessedBCOrderErrorMessage:\n      'This Order is already processed with success',\n    badStatusErrorCode: 603,\n    badStatusErrorMessage: 'Unknown Status',\n    deposit: {\n      command: 'pay',\n      notCreateBCOrdersRecordErrorCode: 601,\n      notCreateBCOrdersRecordErrorMessage: 'Can not create BC Order Record',\n    },\n    withdraw: {\n      command: 'withdraw',\n      checkIPWhiteListErrorCode: 500,\n      checkIPWhiteListErrorMessage: 'Invalid IP',\n      checkHashErrorCode: 501,\n      checkHashErrorMessage: 'Invalid HashCode',\n      reason: '100Bet Withdraw Default Reason',\n      serviceErrorCode: 502,\n      serviceErrorMessage: 'Bet Construct Service has withdraw problem',\n      defaultReason: '100Bet Withdraw Reason',\n    },\n  },\n  minDeposit: {\n    AMOUNT: 1,\n    USERID: 123456,\n    D1FBANKID: 1,\n    USERAGENT:\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36',\n    IP: '192.169.1.101',\n  },\n  minWithdraw: {\n    AMOUNT: 1,\n    USERID_PREFIX: '12345',\n    HASHCODE: '1234567890123456789012',\n    BANKACCOUNTNUMBER_PREFIX: '1234567890',\n    BANKACCOUNTNAME_PREFIX: 'testBankAccount',\n    CITY: 'testCity',\n    PROVINCE: 'testProvince',\n    CURRENCY: CurrencyEnum.CNY,\n  },\n  mszf: {\n    DEPOSIT_SUCCESS_URL: '/payment/mszfcallback/deposit',\n    WITHDRAWAL_SUCCESS_URL: '/payment/mszfcallback/withdraw',\n    SIGN_ERROR_CODE: -1000,\n    DEPOSIT_MINAMOUNT_ERROR_CODE: 101,\n    WITHDRAW_MINAMOUNT_ERROR_CODE: 101,\n    DEFAULT_ERROR_CODE: -1,\n    DEPOSIT_FROZEN_CODE: [999, 102, 202],\n    WITHDRAW_FROZEN_CODE: [999, 102, 202],\n  },\n  d1f: {\n    DEPOSIT_SUCCESS_URL: '/payment/d1fcallback/deposit',\n    WITHDRAWAL_SUCCESS_URL: '/payment/d1fcallback/withdraw',\n    DEFAULT_ERROR_CODE: -1,\n    FROZEN_CODE: [101],\n  },\n  xingchen: {\n    DEPOSIT_SUCCESS_URL: '/payment/xingchencallback/deposit',\n    WITHDRAWAL_SUCCESS_URL: '/payment/xingchencallback/withdraw',\n    DEPOSIT_MINAMOUNT_ERROR_CODE: 115,\n    WITHDRAW_MINAMOUNT_ERROR_CODE: 109,\n    DEFAULT_ERROR_CODE: -1,\n    DEPOSIT_FROZEN_CODE: [111],\n    WITHDRAW_FROZEN_CODE: [111],\n  },\n  uzpay: {\n    DEPOSIT_SUCCESS_URL: '/payment/uzpaycallback/deposit',\n    WITHDRAWAL_SUCCESS_URL: '/payment/uzpaycallback/withdraw',\n    DEPOSIT_MINAMOUNT_ERROR_CODE: 102,\n    WITHDRAW_MINAMOUNT_ERROR_CODE: 204,\n    DEFAULT_ERROR_CODE: -1,\n    OTHER_BANKFLAG: '二维码',\n    DEPOSIT_FROZEN_CODE: [104, 106],\n    WITHDRAW_FROZEN_CODE: [205],\n  },\n  sdd: {\n    DEPOSIT_SUCCESS_URL: '/payment/sddcallback/deposit',\n    WITHDRAWAL_SUCCESS_URL: '/payment/sddcallback/withdraw',\n    DEPOSIT_MINAMOUNT_ERROR_CODE: 100,\n    WITHDRAW_MINAMOUNT_ERROR_CODE: 200,\n    DEFAULT_ERROR_CODE: -1,\n  },\n  hengxin: {\n    DEPOSIT_SUCCESS_URL: '/payment/hengxincallback/deposit',\n    WITHDRAWAL_SUCCESS_URL: '/payment/hengxincallback/withdraw',\n    remarks: 'xxRemarks',\n    DEFAULT_ERROR_CODE: -1,\n    DEPOSIT_FROZEN_CODE: [],\n    WITHDRAW_FROZEN_CODE: [556, 559, 562],\n  },\n  jbp: {\n    DEPOSIT_SUCCESS_URL: '/payment/jbpcallback/deposit',\n    WITHDRAWAL_SUCCESS_URL: '/payment/jbpcallback/withdraw',\n    DEFAULT_ERROR_CODE: -1,\n    DEPOSIT_FROZEN_CODE: [6020],\n    WITHDRAW_FROZEN_CODE: [6020],\n  },\n  bisa: {\n    DEPOSIT_SUCCESS_URL: '/payment/bisacallback/deposit',\n    WITHDRAWAL_SUCCESS_URL: '/payment/bisacallback/withdraw',\n    DEFAULT_ERROR_CODE: -1,\n    DEPOSIT_FROZEN_CODE: [],\n    WITHDRAW_FROZEN_CODE: [],\n  },\n});\n","import { Body, Controller, Param, Post, Query } from '@nestjs/common';\nimport { ApiConsumes, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  apiEndpointDecriptionEnum,\n  apiPathsEnum,\n  apiTagsEnum,\n} from '@workspace/enums';\nimport { D1FPaymentProviderService } from './d1f.payment.provider.service';\nimport { D1FDepositStatusResponseDto } from './dto/d1f.deposit.status.response.dto';\nimport { RequestIpAddress } from '../../../../decorators/request.ip.decorators';\nimport { D1FWithdrawStatusResponseDto } from './dto/d1f.withdraw.status.response';\n\n@Controller(apiPathsEnum.payment)\nexport class D1FPaymentProviderController {\n  constructor(private d1fPaymentProviderService: D1FPaymentProviderService) {}\n\n  @Post(apiPathsEnum.d1fcallbackDeposit)\n  @ApiConsumes('application/x-www-form-urlencoded')\n  @ApiTags(apiTagsEnum.paymentEndpoints)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.depositD1FCallback })\n  depositCallback(\n    @Body() paymentStatusResponse: D1FDepositStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    return this.d1fPaymentProviderService.depositCallback(\n      paymentStatusResponse,\n      ip\n    );\n  }\n\n  @Post(apiPathsEnum.d1fcallbackWithdraw)\n  @ApiConsumes('application/x-www-form-urlencoded')\n  @ApiTags(apiTagsEnum.paymentEndpoints)\n  @ApiOperation({ description: apiEndpointDecriptionEnum.withdrawD1FCallback })\n  withdrawCallback(\n    @Body() paymentStatusResponse: D1FWithdrawStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    return this.d1fPaymentProviderService.withdrawCallback(\n      paymentStatusResponse,\n      ip\n    );\n  }\n}\n","import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as numeral from 'numeral';\nimport * as moment from 'moment';\nimport * as MobileDetect from 'mobile-detect';\nimport * as md5 from 'md5';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize/';\nimport { PaymentProviderEnum, OrderStatusEnum } from '@workspace/enums';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport {\n  NoRecordException,\n  NotSupportedBank,\n  PaymentProviderException,\n} from '../../../payment.exception';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderDepositRequestDto } from '../payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from '../payment.provider.deposit.result';\nimport {\n  PaymentProviderChannelDepositResultBundle,\n  PaymentProviderService,\n  PaymentProviderChannelWithdrawResultBundle,\n} from '../payment.provider.service';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../payment.provider.withdraw.result';\nimport { D1FDepositRequestParams } from './dto/d1f.deposit.request.params';\nimport {\n  D1FChannelDepositResult,\n  D1FDepositResult,\n} from './dto/d1f.deposit.result';\nimport { D1FDepositStatusResponseDto } from './dto/d1f.deposit.status.response.dto';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport { DepositPendingOrderModel } from '../../../../models/deposit.pending.order.model';\nimport { PaymentProviderChannelModel } from '../../../../models/payment.provider.channel.model';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\nimport { BankService } from '../../../bank/bank.service';\nimport {\n  D1FChannelWithdrawResult,\n  D1FWithdrawResult,\n} from './dto/d1f.withdraw.result.params';\nimport { PaymentProviderWithdrawRequestDto } from '../payment.provider.withdraw.request.dto';\nimport { D1FWithdrawRequestParams } from './dto/d1f.withdraw.request.parapms';\nimport { D1FWithdrawStatusResponseDto } from './dto/d1f.withdraw.status.response';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { TestModel } from '../../../../models/test.entity';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderUsdtProtocolModel } from '../../../../models/payment.provider.usdt.protocol.model';\nimport { OptionsService } from '../../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../../error/enums/errorCodeEnum';\n\nexport enum D1FDepositStatusEnum {\n  SUCCESS = 'SUCCESS',\n}\n\nexport enum D1FDepositCallbackResultEnum {\n  SUCCESS = 'SUCCESS',\n  FAILED = 'FAILED',\n}\n\nexport enum D1FWithdrawCallbackResultEnum {\n  SUCCESS = 'SUCCESS',\n  FAILED = 'FAILED',\n}\n\n@Injectable()\nexport class D1FPaymentProviderService extends PaymentProviderService {\n  constructor(\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    private httpService: HttpService,\n\n    @InjectModel(TestModel)\n    private testRepository: typeof TestModel\n  ) {\n    super(\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.D1F;\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n    // const host = this.configService.get<string>('D1F_HOST');\n    // const url_available = this.configService.get<string>('D1F_AVAILABLE_URL');\n    // try {\n    //   const response = await this.httpService\n    //     .post(`https://${host}/${url_available}`, {})\n    //     .toPromise();\n    //   return response.status === 200;\n    // } catch (error) {\n    //   return false;\n    // }\n  }\n\n  public depositErrorFactory(error): PaymentProviderDepositResult {\n    return D1FDepositResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('d1f.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  public withdrawErrorFactory(error: any): PaymentProviderWithdrawResult {\n    return D1FWithdrawResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('d1f.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Deposit Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle> {\n    const channelDepositResultBundle = new PaymentProviderChannelDepositResultBundle();\n\n    let depositResult: D1FChannelDepositResult;\n    let order: DepositPendingOrderModel;\n\n    const channelDepositResultDefault = { providerName: this.getPaymentProviderName() };\n\n    order = await this.createOrderBeforeDeposit(\n      depositRequest,\n      paymentProviderChannel,\n      transaction\n    );\n    if (!order) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const channel = await this.channelService.findById(\n      paymentProviderChannel.channelId\n    );\n    if (!channel) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_CHANNEL_NOT_FOUND },\n        order\n      };\n    }\n\n    const params = new D1FDepositRequestParams();\n    params.customerno = this.configService.get<string>('D1F_CUSTOMERNO');\n    params.channeltype = paymentProviderChannel.providerChannelName;\n    params.customerbillno = order.orderId;\n    params.orderamount = numeral(order.amount).format('0.00');\n    params.customerbilltime = moment().format('YYYY-MM-DD HH:mm:ss');\n    params.notifyurl =\n      this.getBaseUrl(depositRequest.headers['host']) +\n      this.configService.get<string>('d1f.DEPOSIT_SUCCESS_URL');\n    params.returnurl = `https://${this.configService.get<string>(\n      'FRONTEND_HOST'\n    )}/`;\n    params.ip = depositRequest.ip;\n\n    if (channel.fromPaymentSystem.isBank && channel.toPaymentSystem.isBank) {\n      const paymentProviderBank = await this.getPaymentProviderBank(\n        depositRequest.bankCode\n      );\n      if (!paymentProviderBank) {\n        throw new NotSupportedBank();\n      }\n\n      params.bankcode = paymentProviderBank.paymentProviderBankCode;\n    }\n\n    const user_agent = depositRequest.headers['user-agent'];\n    const md = new MobileDetect(user_agent);\n    params.devicetype = md.mobile() ? 'mobile' : 'pc';\n\n    params.customeruser = order.userId;\n    params.customerextinfo = '';\n\n    const key = this.configService.get<string>('D1F_KEY');\n    params.sign = this.getDepositRequestSign(params, key);\n\n    const host = this.configService.get<string>('D1F_HOST');\n    const url = this.configService.get<string>('D1F_DEPOSIT_URL');\n\n    const response = await this.httpService\n      .post(`https://${host}/${url}`, params)\n      .toPromise();\n\n    depositResult = D1FChannelDepositResult.responseFactory(\n      response,\n      this.getPaymentProviderName(),\n      this.configService.get<number>('d1f.DEFAULT_ERROR_CODE')\n    );\n    if (!depositResult) {\n      return null;\n    }\n\n    depositResult.channelRequestTime = moment()\n      .utcOffset('+08:00')\n      .format('YYYY-MM-DD HH:mm:ss');\n    depositResult.channelRequestJson = JSON.stringify(params);\n    depositResult.channelResponseJson = JSON.stringify(response.data);\n\n    if( !depositResult.result ){\n      depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_FAILED;\n    }\n\n    channelDepositResultBundle.depositResult = depositResult;\n    channelDepositResultBundle.order = order;\n\n    return channelDepositResultBundle;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async depositCallback(\n    depositStatusResponse: D1FDepositStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    if (!(await this.beforeDepositCallback(depositStatusResponse, ip))) {\n      return D1FDepositCallbackResultEnum.FAILED;\n    }\n\n    const key = this.configService.get<string>('D1F_KEY');\n    const sign = this.getPaymentStatusResponseSign(depositStatusResponse, key);\n\n    if (sign !== depositStatusResponse.sign) {\n      return D1FDepositCallbackResultEnum.FAILED;\n    }\n\n    const order = await this.depositPendingOrderService.findByOrderId(\n      depositStatusResponse.customerbillno\n    );\n    if (!order) {\n      return D1FDepositCallbackResultEnum.FAILED;\n    }\n\n    if (\n      numeral(depositStatusResponse.orderamount).value() !==\n      numeral(order.amount).value()\n    ) {\n      return D1FDepositCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByDepositStatus(\n      depositStatusResponse.paystatus\n    );\n\n    order.providerOrderId = depositStatusResponse.orderno;\n\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      const bcOrder = await this.depositBCAfterDepositCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterDepositCallback(order, transaction);\n      });\n    } catch (error) {\n      return D1FDepositCallbackResultEnum.FAILED;\n    }\n\n    return D1FDepositCallbackResultEnum.SUCCESS;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Withdraw Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async withdrawByPaymentProviderChannel(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle> {\n    const withdrawProcResult = new PaymentProviderChannelWithdrawResultBundle();\n\n    let withdrawResult: D1FChannelWithdrawResult;\n\n    const channelWithdrawResultDefault = { providerName: this.getPaymentProviderName() };\n\n    const order = await this.createOrderBeforeWithdraw(\n      withdrawRequest,\n      transaction\n    );\n    if (!order) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.WITHDRAW_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const paymentProviderBank = await this.getPaymentProviderBank(\n      withdrawRequest.bankCode\n    );\n    if (!paymentProviderBank) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order\n      };\n    }\n\n    const params = new D1FWithdrawRequestParams();\n\n    params.customerNo = this.configService.get<string>('D1F_CUSTOMERNO');\n    params.customerBillNo = order.orderId;\n    params.orderAmount = withdrawRequest.amount;\n    params.bankAccountName = withdrawRequest.bankAccountName;\n    params.bankAccountNo = withdrawRequest.bankAccountNumber;\n    params.bankBranchName =\n      !withdrawRequest.branch || !withdrawRequest.branch.trim()\n        ? paymentProviderBank.paymentProviderBankName\n        : withdrawRequest.branch;\n    params.bankCode = paymentProviderBank.paymentProviderBankCode;\n    params.city = withdrawRequest.city;\n    params.province = withdrawRequest.province;\n\n    params.sign = this.getWithdrawRequestSign(\n      params,\n      this.configService.get<string>('D1F_KEY')\n    );\n\n    const host = this.configService.get<string>('D1F_HOST');\n    const url = this.configService.get<string>('D1F_WITHDRAWAL_URL');\n\n    const response = await this.httpService\n      .post(`http://${host}/${url}`, params)\n      .toPromise();\n\n    // console.log(response.data);\n\n    withdrawResult = D1FChannelWithdrawResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if( !withdrawResult.result ){\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED;\n    }\n\n    withdrawProcResult.withdrawResult = withdrawResult;\n    withdrawProcResult.order = order;\n\n    return withdrawProcResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawCallback(\n    withdrawStatusResponse: D1FWithdrawStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    await this.testRepository.create({\n      a: JSON.stringify(withdrawStatusResponse),\n    });\n\n    if (!(await this.beforeWithdrawCallback(withdrawStatusResponse, ip))) {\n      return D1FWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const key = this.configService.get<string>('D1F_KEY');\n    const sign = this.getPaymentStatusResponseSign(withdrawStatusResponse, key);\n\n    if (sign.toUpperCase() !== withdrawStatusResponse.sign.toUpperCase()) {\n      return D1FWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const order = await this.withdrawPendingOrderService.findByOrderId(\n      withdrawStatusResponse.customerbillno\n    );\n    if (!order) {\n      return D1FWithdrawCallbackResultEnum.FAILED;\n    }\n\n    if (\n      numeral(withdrawStatusResponse.orderamount).value() !==\n      numeral(order.amount).value()\n    ) {\n      return D1FWithdrawCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByWithdrawStatus(\n      withdrawStatusResponse.paystatus\n    );\n\n    order.providerOrderId = withdrawStatusResponse.orderno;\n\n    if (\n      order.status ===\n      OrderStatusEnum.SUCCESS /* ||\n      order.status === OrderStatusEnum.FAILED */\n    ) {\n      await this.withdrawBCAfterWithdrawCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterWithdrawCallback(order, transaction);\n      });\n    } catch (error) {\n      return D1FWithdrawCallbackResultEnum.FAILED;\n    }\n\n    return D1FWithdrawCallbackResultEnum.SUCCESS;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getDepositRequestSign(params: D1FDepositRequestParams, key: string): string {\n    const txtSource =\n      `${params.bankcode ? 'bankcode=' + params.bankcode + '&' : ''}` +\n      `channeltype=${params.channeltype}` +\n      `&customerbillno=${params.customerbillno}` +\n      `&customerbilltime=${params.customerbilltime}` +\n      `&customerno=${params.customerno}` +\n      `&customeruser=${params.customeruser}` +\n      `&devicetype=${params.devicetype}` +\n      `&ip=${params.ip}` +\n      `&notifyurl=${params.notifyurl}` +\n      `&orderamount=${params.orderamount}` +\n      `&returnurl=${params.returnurl}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Withdraw Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawRequestSign(params: D1FWithdrawRequestParams, key: string) {\n    const txtSource =\n      `bankAccountName=${params.bankAccountName}` +\n      `&bankAccountNo=${params.bankAccountNo}` +\n      (params.bankBranchName\n        ? `&bankBranchName=${params.bankBranchName}`\n        : '') +\n      `&bankCode=${params.bankCode}` +\n      `&city=${params.city}` +\n      `&customerBillNo=${params.customerBillNo}` +\n      `&customerNo=${params.customerNo}` +\n      `&orderAmount=${params.orderAmount}` +\n      `&province=${params.province}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Payment Status Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getPaymentStatusResponseSign(\n    paymentStatus: D1FDepositStatusResponseDto,\n    key: string\n  ): string {\n    const txtSource =\n      `customerbillno=${paymentStatus.customerbillno}` +\n      `&customerbilltime=${paymentStatus.customerbilltime}` +\n      (paymentStatus.customerextinfo.length > 0\n        ? `&customerextinfo=${paymentStatus.customerextinfo}`\n        : '') +\n      `&customerno=${paymentStatus.customerno}` +\n      `&orderamount=${paymentStatus.orderamount}` +\n      `&orderno=${paymentStatus.orderno}` +\n      `&paystatus=${paymentStatus.paystatus}` +\n      (paymentStatus.preorderamount.length > 0\n        ? `&preorderamount=${paymentStatus.preorderamount}`\n        : '') +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get OrderStatus By DepositStatus\n  ////////////////////////////////////////////////////////////////////////////////\n  getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum {\n    let orderStatus: OrderStatusEnum = OrderStatusEnum.NEW;\n    const depositStatus = <D1FDepositStatusEnum>argDepositStatus;\n\n    switch (depositStatus) {\n      case D1FDepositStatusEnum.SUCCESS:\n        orderStatus = OrderStatusEnum.SUCCESS;\n        break;\n      default:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n    }\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get OrderStatus By WithdrawStatus\n  ////////////////////////////////////////////////////////////////////////////////\n  getOrderStatusByWithdrawStatus(argWithdrawStatus: {}): OrderStatusEnum {\n    const orderStatus = OrderStatusEnum.NEW;\n    const withdrawStatus = <D1FDepositStatusEnum>argWithdrawStatus;\n\n    switch (withdrawStatus) {\n    }\n\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    const errorCode = depositResult\n      ? numeral(depositResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('d1f.DEPOSIT_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n}\n","export class D1FDepositRequestParams {\n  customerno: string;\n  channeltype: string;\n  customerbillno: string;\n  orderamount: string;\n  customerbilltime: string;\n  notifyurl: string;\n  ip: string;\n  returnurl: string;\n  devicetype: string;\n  customeruser: string;\n  customerextinfo: string;\n  bankcode: string;\n  sign: string;\n  channel_id: string;\n}\n","import {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n  PaymentProviderDepositResultData,\n} from '../../payment.provider.deposit.result';\n\nexport class D1FDepositResult extends PaymentProviderDepositResult {}\n\nexport class D1FDepositResultData extends PaymentProviderDepositResultData {\n  responseUrl: string;\n\n  static responseFactory(data): D1FDepositResultData {\n    const depositResultData: D1FDepositResultData = new D1FDepositResultData();\n    depositResultData.url = depositResultData.responseUrl = data.responseUrl;\n    return depositResultData;\n  }\n}\n\nexport class D1FChannelDepositResult extends PaymentProviderChannelDepositResult {\n  static getErrorCodeByMsg(errorMsg: string): string {\n    if (/^无可用支付渠道/.test(errorMsg)) {\n      return '101';\n    }\n    return '-1';\n  }\n\n  static responseFactory(\n    response,\n    providerName: string,\n    defaultErrorCode: number\n  ): D1FChannelDepositResult {\n    const depositResult = new D1FChannelDepositResult();\n    depositResult.result = false;\n\n    const { Result, ResultMsg } = response.data || {};\n    depositResult.errorCode = `${defaultErrorCode}`;\n    depositResult.errorMessage = ResultMsg || 'Unknown';\n    depositResult.providerName = providerName;\n    if (response.status !== 200) {\n      depositResult.errorCode = D1FChannelDepositResult.getErrorCodeByMsg(\n        ResultMsg\n      );\n      return depositResult;\n    }\n\n    console.log(response.data);\n\n    const { res, _redirectable } = response.request || {};\n    if (!res || !_redirectable) {\n      depositResult.errorCode = D1FChannelDepositResult.getErrorCodeByMsg(\n        ResultMsg\n      );\n      return depositResult;\n    }\n\n    const { responseUrl } = res;\n    if (!responseUrl) {\n      depositResult.errorCode = D1FChannelDepositResult.getErrorCodeByMsg(\n        ResultMsg\n      );\n      return depositResult;\n    }\n\n    const { _redirectCount } = _redirectable || {};\n    if (!_redirectCount || _redirectCount < 1) {\n      depositResult.errorCode = D1FChannelDepositResult.getErrorCodeByMsg(\n        ResultMsg\n      );\n      return depositResult;\n    }\n\n    depositResult.result = true;\n    depositResult.errorCode = '';\n    depositResult.errorMessage = null;\n    depositResult.data = D1FDepositResultData.responseFactory({\n      responseUrl,\n    });\n\n    return depositResult;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): D1FChannelDepositResult {\n    const result = new D1FChannelDepositResult();\n    result.result = false;\n    result.providerName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    //result.errorCode = status;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderDepositResult(): PaymentProviderChannelDepositResult {\n    if (!this.result || !this.data) {\n      return this;\n    }\n\n    const data = <D1FDepositResultData>this.data;\n\n    delete data.responseUrl;\n\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport class D1FDepositStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  orderno: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  customerno: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  customerbillno: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  customerbilltime: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  preorderamount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  orderamount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  paystatus: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  customerextinfo: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","export class D1FWithdrawRequestParams {\n  customerNo: string;\n  customerBillNo: string;\n  orderAmount: number;\n  bankAccountName: string;\n  bankAccountNo: string;\n  bankBranchName: string;\n  bankCode: string;\n  city: string;\n  province: string;\n  sign: string;\n}\n","import {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../../payment.provider.withdraw.result';\n\nexport class D1FWithdrawResult extends PaymentProviderWithdrawResult {}\n\nexport class D1FChannelWithdrawResult extends PaymentProviderChannelWithdrawResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): D1FChannelWithdrawResult {\n    const withdrawResult = new D1FChannelWithdrawResult();\n    withdrawResult.result = false;\n    withdrawResult.providerName = providerName;\n\n    const { code, message } = response.data || {};\n\n    if (code !== 200) {\n      withdrawResult.errorCode = code;\n      withdrawResult.errorMessage = message;\n      return withdrawResult;\n    }\n\n    withdrawResult.result = true;\n    return withdrawResult;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): D1FChannelWithdrawResult {\n    const result = new D1FChannelWithdrawResult();\n    result.result = false;\n    result.providerId = null;\n    result.providerName = providerName;\n\n    const { message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderWithdrawResult(): PaymentProviderChannelWithdrawResult {\n    delete this.providerId;\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport class D1FWithdrawStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  orderno: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  customerno: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  customerbillno: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  customerbilltime: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  preorderamount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  orderamount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  paystatus: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  customerextinfo: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","import { PaymentProviderEnum } from '@workspace/enums';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport { BankModel } from '../../../../models/bank.entity';\n\nimport { TestModel } from '../../../../models/test.entity';\nimport { BankService } from '../../../bank/bank.service';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\n\nimport { CardPaymentProviderService } from '../card.payment.provider.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { OptionsService } from '../../../../options/options.service';\n\n@Injectable()\nexport class DBPayPaymentProviderService extends CardPaymentProviderService {\n  constructor(\n    // @InjectModel(BankModel)\n    // protected bankRepository: typeof BankModel,\n\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    protected httpService: HttpService // @InjectModel(TestModel) // protected testRepository: typeof TestModel\n  ) {\n    super(\n      //bankRepository,\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService,\n      httpService\n      //testRepository\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.DBPay;\n  }\n}\n","export class CardDepositByCardResult {\n  result: boolean;\n  bankInfo: {\n    bankAccountName: string;\n    bankAccountNumber: string;\n    bank: {\n      bankName: string;\n      bankCode: string;\n    };\n    amount: number;\n  };\n  errorCode: number;\n  errorMessage: string;\n}\n","import {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResultData,\n} from '../payment.provider.deposit.result';\n\nexport class CardDepositResultData extends PaymentProviderDepositResultData {}\n\nexport class CardChannelDepositResult extends PaymentProviderChannelDepositResult {\n  static errorFactory(error, providerName: string) {\n    const result = new CardChannelDepositResult();\n    result.result = false;\n    result.providerName = providerName;\n\n    const { code, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = code || -1;\n    result.error = error.error || null;\n\n    return result;\n  }\n\n  sanitizePaymentProviderDepositResult(): PaymentProviderChannelDepositResult {\n    return this;\n  }\n}\n","import {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../payment.provider.withdraw.result';\n\nexport class CardWithdrawResult extends PaymentProviderWithdrawResult {}\n\nexport class CardChannelWithdrawResult extends PaymentProviderChannelWithdrawResult {\n  sanitizePaymentProviderWithdrawResult(): PaymentProviderChannelWithdrawResult {\n    delete this.providerId;\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsNumber,\n} from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport enum HengXinDepositStatusEnum {}\n\nexport class HengXinDepositStatusResponseDto extends PaymentStatusResponseDto {}\n","export class HengXinWithdrawRequestParams {\n  merId: string;\n  version: string;\n  data: string;\n}\n\nexport class HengXinWithdrawRequestData {\n  merOrderNo: string;\n  amount: number;\n  submitTime: string;\n  notifyUrl: string;\n  bankCode: string;\n  bankAccountNo: string;\n  bankAccountName: string;\n  bankBranchName: string;\n  sign: string;\n  remarks: string;\n}\n","import {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../../payment.provider.withdraw.result';\n\nexport class HengXinWithdrawResult extends PaymentProviderWithdrawResult {}\n\nexport class HengXinChannelWithdrawResult extends PaymentProviderChannelWithdrawResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): HengXinChannelWithdrawResult {\n    const withdrawResult = new HengXinChannelWithdrawResult();\n    withdrawResult.result = false;\n    withdrawResult.providerName = providerName;\n\n    const { code, message } = response.data || {};\n\n    if (code !== 200) {\n      withdrawResult.errorCode = code;\n      withdrawResult.errorMessage = message;\n      return withdrawResult;\n    }\n\n    withdrawResult.result = true;\n    return withdrawResult;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): HengXinChannelWithdrawResult {\n    const result = new HengXinChannelWithdrawResult();\n    result.result = false;\n    result.providerId = null;\n    result.providerName = providerName;\n\n    const { message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderWithdrawResult(): PaymentProviderChannelWithdrawResult {\n    delete this.providerId;\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport enum HengXinWithdrawStatusEnum {\n  PROCESSING = 0,\n  SUCCESS = 1,\n  FAILED = 2,\n}\n\nexport class HengXinWithdrawStatusResponseData {\n  merOrderNo: string;\n  orderState: number;\n  sign: string;\n  orderNo: string;\n  amount: number;\n}\n\nexport class HengXinWithdrawStatusResponseDto extends PaymentStatusResponseDto {\n  // @ApiProperty()\n  // @IsNotEmpty()\n  // @IsString()\n  merOrderNo: string;\n\n  // @ApiProperty()\n  // @IsNotEmpty()\n  // @IsString()\n  merId: string;\n\n  // @ApiProperty()\n  // @IsNotEmpty()\n  // @IsString()\n  data: string;\n}\n","import { Body, Controller, Inject, Logger, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  apiEndpointDecriptionEnum,\n  apiPathsEnum,\n  apiTagsEnum,\n} from '@workspace/enums';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { HengXinDepositStatusResponseDto } from './dto/hengxin.deposit.status.response.dto';\nimport { HengXinWithdrawStatusResponseDto } from './dto/hengxin.withdraw.status.response.dto';\nimport { HengXinPaymentProviderService } from './hengxin.payment.provider.service';\nimport { RequestIpAddress } from '../../../../decorators/request.ip.decorators';\n\n@Controller(apiPathsEnum.payment)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class HengXinPaymentProviderController {\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    private hengxinPaymentProviderService: HengXinPaymentProviderService\n  ) {}\n\n  @Post(apiPathsEnum.hengxincallbackDeposit)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.depositHengXinCallback,\n  })\n  async depositCallback(\n    @Body() depositStatusResponse: HengXinDepositStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    return this.hengxinPaymentProviderService.depositCallback(\n      depositStatusResponse,\n      ip\n    );\n  }\n\n  @Post(apiPathsEnum.hengxincallbackWithdraw)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.withdrawHengXinCallback,\n  })\n  async withdrawCallback(\n    @Body() withdrawStatusResponse: HengXinWithdrawStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    return this.hengxinPaymentProviderService.withdrawCallback(\n      withdrawStatusResponse,\n      ip\n    );\n  }\n}\n","import { PaymentProviderEnum, OrderStatusEnum } from '@workspace/enums';\nimport { PaymentProviderChannelModel } from '../../../../models/payment.provider.channel.model';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize';\nimport { PaymentProviderDepositRequestDto } from '../payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from '../payment.provider.deposit.result';\nimport {\n  PaymentProviderChannelDepositResultBundle,\n  PaymentProviderChannelWithdrawResultBundle,\n  PaymentProviderService,\n} from '../payment.provider.service';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../payment.provider.withdraw.result';\nimport {\n  HengXinDepositStatusEnum,\n  HengXinDepositStatusResponseDto,\n} from './dto/hengxin.deposit.status.response.dto';\nimport {\n  HengXinWithdrawStatusEnum,\n  HengXinWithdrawStatusResponseData,\n  HengXinWithdrawStatusResponseDto,\n} from './dto/hengxin.withdraw.status.response.dto';\nimport { HengXinChannelDepositResult } from './dto/hengxin.deposit.result';\nimport { DepositPendingOrderModel } from '../../../../models/deposit.pending.order.model';\nimport { HengXinDepositRequestParams } from './dto/hengxin.deposit.request.params';\nimport { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport * as qs from 'qs';\nimport * as moment from 'moment-timezone';\nimport * as numeral from 'numeral';\nimport * as md5 from 'md5';\nimport * as crypto from 'crypto';\nimport {\n  HengXinWithdrawRequestData,\n  HengXinWithdrawRequestParams,\n} from './dto/hengxin.withdraw.request.params';\nimport {\n  HengXinChannelWithdrawResult,\n  HengXinWithdrawResult,\n} from './dto/hengxin.withdraw.result';\nimport {\n  NotSupportedBank,\n  PaymentProviderException,\n} from '../../../payment.exception';\nimport { RSA_PKCS1_PADDING } from 'constants';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { TestModel } from '../../../../models/test.entity';\nimport { BankService } from '../../../bank/bank.service';\nimport { PaymentProviderWithdrawRequestDto } from '../payment.provider.withdraw.request.dto';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderUsdtProtocolModel } from '../../../../models/payment.provider.usdt.protocol.model';\nimport { OptionsService } from '../../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../../error/enums/errorCodeEnum';\n\nexport enum HengXinDepositCallbackResultEnum {\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nexport enum HengXinWithdrawCallbackResultEnum {\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\n@Injectable()\nexport class HengXinPaymentProviderService extends PaymentProviderService {\n  constructor(\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    private httpService: HttpService,\n\n    @InjectModel(TestModel)\n    private testRepository: typeof TestModel\n  ) {\n    super(\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.HENGXIN;\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Deposit Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle> {\n    throw new Error('Method not implemented.');\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async withdrawByPaymentProviderChannel(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle> {\n    const withdrawProcResult = new PaymentProviderChannelWithdrawResultBundle();\n\n    let withdrawResult: HengXinChannelWithdrawResult;\n\n    const channelWithdrawResultDefault = { providerName: this.getPaymentProviderName() };\n\n    const order = await this.createOrderBeforeWithdraw(\n      withdrawRequest,\n      transaction\n    );\n    if (!order) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.WITHDRAW_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const paymentProviderBank = await this.getPaymentProviderBank(\n      withdrawRequest.bankCode\n    );\n    if (!paymentProviderBank) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order\n      };\n    }\n\n    const params = new HengXinWithdrawRequestParams();\n\n    params.merId = this.configService.get<string>('HENGXIN_MERID');\n    params.version = this.configService.get<string>('HENGXIN_VERSION');\n\n    const data = new HengXinWithdrawRequestData();\n    data.merOrderNo = order.orderId;\n    data.amount = withdrawRequest.amount;\n    data.submitTime = moment().format('x');\n    data.notifyUrl =\n      this.getBaseUrl(withdrawRequest.headers['host']) +\n      this.configService.get<string>('hengxin.WITHDRAWAL_SUCCESS_URL');\n    data.bankCode = paymentProviderBank.paymentProviderBankCode;\n    data.bankAccountNo = withdrawRequest.bankAccountNumber;\n    data.bankAccountName = withdrawRequest.bankAccountName;\n    data.bankBranchName =\n      !withdrawRequest.branch || !withdrawRequest.branch.trim()\n        ? paymentProviderBank.paymentProviderBankName\n        : withdrawRequest.branch;\n    data.remarks = this.configService.get<string>('hengxin.remarks');\n\n    data.sign = this.getWithdrawRequestSign(\n      data,\n      this.configService.get<string>('HENGXIN_WITHDRAW_MD5_KEY')\n    ).toUpperCase();\n\n    const keyPub = this.configService.get<string>(\n      'HENGXIN_WITHDRAW_PUBLICK_KEY'\n    );\n\n    const bData = Buffer.from(JSON.stringify(data));\n    let encData: Buffer = Buffer.from('');\n\n    try {\n      for (let i = 0; i < bData.length; i += 117) {\n        const encryptedData = crypto.publicEncrypt(\n          {\n            key:\n              '-----BEGIN PUBLIC KEY-----\\n' +\n              `${keyPub}\\n` +\n              '-----END PUBLIC KEY-----',\n            padding: RSA_PKCS1_PADDING,\n          },\n          bData.slice(i, i + 117)\n        );\n\n        //console.log('++++', encryptedData.toString('base64'));\n        encData = Buffer.concat([encData, encryptedData]);\n      }\n    } catch (error) {\n      console.log(error);\n      throw new PaymentProviderException();\n    }\n\n    params.data = encData.toString('base64');\n\n    //console.log(params);\n\n    const host = this.configService.get<string>('HENGXIN_HOST');\n    const url = this.configService.get<string>('HENGXIN_WITHDRAW_URL');\n\n    const response = await this.httpService\n      .post(`http://${host}/${url}`, params)\n      .toPromise();\n\n    //console.log(response.data);\n\n    withdrawResult = HengXinChannelWithdrawResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!withdrawResult.result) {\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED;\n    }\n\n    withdrawProcResult.withdrawResult = withdrawResult;\n    withdrawProcResult.order = order;\n\n    return withdrawProcResult;\n  }\n\n  public depositErrorFactory(error: any): PaymentProviderDepositResult {\n    throw new Error('Method not implemented.');\n  }\n\n  public withdrawErrorFactory(error: any): PaymentProviderWithdrawResult {\n    return HengXinWithdrawResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('hengxin.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum {\n    throw new Error('Method not implemented.');\n    // let orderStatus: OrderStatusEnum = OrderStatusEnum.NEW;\n    // const depositStatus = <HengXinDepositStatusEnum>argDepositStatus;\n\n    // switch (depositStatus) {\n    // }\n\n    // return orderStatus;\n  }\n\n  getOrderStatusByWithdrawStatus(\n    withdrawStatus: HengXinWithdrawStatusEnum\n  ): OrderStatusEnum {\n    const orderStatus = OrderStatusEnum.PENDING;\n\n    switch (withdrawStatus) {\n      case HengXinWithdrawStatusEnum.PROCESSING:\n        return OrderStatusEnum.PENDING;\n      case HengXinWithdrawStatusEnum.SUCCESS:\n        return OrderStatusEnum.SUCCESS;\n      case HengXinWithdrawStatusEnum.FAILED:\n        return OrderStatusEnum.FAILED;\n      default:\n        break;\n    }\n\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async depositCallback(\n    depositStatusResponse: HengXinDepositStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    return null;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawCallback(\n    withdrawStatusResponse: HengXinWithdrawStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    /* await this.testRepository.create({\n      a: JSON.stringify(withdrawStatusResponse),\n    }); */\n\n    if (!(await this.beforeWithdrawCallback(withdrawStatusResponse, ip))) {\n      return HengXinWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const merId = this.configService.get<string>('HENGXIN_MERID');\n    if (`${withdrawStatusResponse.merId}` !== `${merId}`) {\n      return HengXinWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const order = await this.withdrawPendingOrderService.findByOrderId(\n      withdrawStatusResponse.merOrderNo\n    );\n\n    if (!order) {\n      return HengXinWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const keyPriv = this.configService.get<string>(\n      'HENGXIN_WITHDRAW_PRIVATE_KEY'\n    );\n\n    const bData = Buffer.from(withdrawStatusResponse.data, 'base64');\n    let decData: Buffer = Buffer.from('');\n\n    try {\n      for (let i = 0; i < bData.length; i += 128) {\n        const decryptedData = crypto.privateDecrypt(\n          {\n            key:\n              '-----BEGIN PRIVATE KEY-----\\n' +\n              `${keyPriv}\\n` +\n              '-----END PRIVATE KEY-----',\n            padding: RSA_PKCS1_PADDING,\n          },\n          bData.slice(i, i + 128)\n        );\n\n        decData = Buffer.concat([decData, decryptedData]);\n      }\n    } catch (error) {\n      return HengXinWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const data: HengXinWithdrawStatusResponseData = JSON.parse(\n      decData.toString()\n    );\n\n    const sign = this.getWithdrawStatusResponseSign(\n      data,\n      this.configService.get<string>('HENGXIN_WITHDRAW_MD5_KEY')\n    );\n\n    if (sign.toUpperCase() !== data.sign.toUpperCase()) {\n      return HengXinWithdrawCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByWithdrawStatus(data.orderState);\n\n    order.providerOrderId = data.orderNo;\n\n    if (\n      order.status ===\n      OrderStatusEnum.SUCCESS /* ||\n      order.status === OrderStatusEnum.FAILED */\n    ) {\n      await this.withdrawBCAfterWithdrawCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterWithdrawCallback(order, transaction);\n      });\n    } catch (error) {\n      return HengXinWithdrawCallbackResultEnum.FAILED;\n    }\n\n    return HengXinWithdrawCallbackResultEnum.SUCCESS;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Withdraw Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawRequestSign(params: HengXinWithdrawRequestData, key: string) {\n    const txtSource =\n      `amount=${params.amount}` +\n      `&bankAccountName=${params.bankAccountName}` +\n      `&bankAccountNo=${params.bankAccountNo}` +\n      //`&bankBranchName=${params.bankBranchName}` +\n      `&bankCode=${params.bankCode}` +\n      `&merOrderNo=${params.merOrderNo}` +\n      `&notifyUrl=${params.notifyUrl}` +\n      //`&remarks=${params.remarks}` +\n      `&submitTime=${params.submitTime}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Status Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawStatusResponseSign(\n    withdrawStatus: HengXinWithdrawStatusResponseData,\n    key: string\n  ): string {\n    const txtSource =\n      `amount=${withdrawStatus.amount}` +\n      `&merOrderNo=${withdrawStatus.merOrderNo}` +\n      `&orderNo=${withdrawStatus.orderNo}` +\n      `&orderState=${withdrawStatus.orderState}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    const errorCode = depositResult\n      ? numeral(depositResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('hengxin.DEPOSIT_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel WithdrawResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelWithdrawResult(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    const errorCode = withdrawResult\n      ? numeral(withdrawResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('hengxin.WITHDRAW_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n}\n","export class JBPDepositRequestParams {\n  companyId: string;\n  kyc: string;\n  username: string;\n  areaCode: string;\n  phone: string;\n  orderType: number;\n  companyOrderNum: string;\n  coinSign: string;\n  payCoinSign: string;\n  coinAmount: number;\n  total: number;\n  orderPayChannel: number;\n  orderTime: string;\n  syncUrl: string;\n  asyncUrl: string;\n  sign: string;\n}\n","import { paymentProviderEnum } from '@workspace/enums';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n  PaymentProviderDepositResultData,\n} from '../../payment.provider.deposit.result';\n\nexport class JBPDepositResult extends PaymentProviderDepositResult {}\n\nexport class JBPDepositResultData extends PaymentProviderDepositResultData {}\n\nexport class JBPChannelDepositResult extends PaymentProviderChannelDepositResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): JBPChannelDepositResult {\n    const data: {\n      code: number;\n      success: boolean;\n      msg: string;\n      data: {\n        link: string;\n        orderNo: string;\n      };\n    } = response.data;\n\n    const result = new JBPChannelDepositResult();\n    result.result = data.success;\n    result.providerName = providerName;\n\n    if (result.result !== true || !data.data) {\n      result.errorMessage = data.msg || '';\n      result.errorCode = `${data.code}` || '';\n\n      return result;\n    }\n\n    result.providerOrderId = data.data.orderNo;\n\n    result.data = new JBPDepositResultData();\n    result.data.url = data.data.link;\n\n    result.result = true;\n    return result;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): JBPChannelDepositResult {\n    const result = new JBPChannelDepositResult();\n    result.result = false;\n    result.providerName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderDepositResult(): PaymentProviderChannelDepositResult {\n    if (this.data !== undefined) {\n      const data = <JBPDepositResultData>this.data;\n    }\n\n    if (this.providerOrderId !== undefined) {\n      delete this.providerOrderId;\n    }\n\n    if (this.result && this.errorMessage !== undefined) {\n      delete this.errorMessage;\n    }\n\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsNumber,\n  IsInt,\n  IsNumberString,\n} from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\nimport { Transform } from 'class-transformer';\n\nexport enum JBPDepositStatusEnum {\n  SUCCESS = 1, // 成功\n  FAILED = 0, // 失败\n}\n\nexport class JBPDepositStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  companyOrderNum: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  otcOrderNum: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  //@Transform((params) => Number(params.value))\n  coinAmount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  coinSign: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsInt()\n  @Transform((params) => Number(params.value))\n  orderType: number;\n\n  @ApiProperty({\n    enum: JBPDepositStatusEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(JBPDepositStatusEnum)\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  tradeStatus: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  tradeOrderTime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  //@Transform((params) => Number(params.value))\n  unitPrice: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  //@Transform((params) => Number(params.value))\n  total: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  //@Transform((params) => Number(params.value))\n  successAmount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","export class JBPWithdrawRequestParams {\n  companyId: string;\n  kyc: string;\n  username: string;\n  areaCode: string;\n  phone: string;\n  orderType: number;\n  companyOrderNum: string;\n  coinSign: string;\n  payCoinSign: string;\n  coinAmount: number;\n  total: number;\n  orderPayChannel: number;\n  orderTime: string;\n  syncUrl: string;\n  asyncUrl: string;\n  payCardNo: string;\n  payCardBank: string;\n  payCardBranch: string;\n  sign: string;\n}\n","import {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../../payment.provider.withdraw.result';\n\nexport class JBPWithdrawResult extends PaymentProviderWithdrawResult {}\n\nexport class JBPChannelWithdrawResult extends PaymentProviderChannelWithdrawResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): JBPChannelWithdrawResult {\n    const withdrawResult = new JBPChannelWithdrawResult();\n    withdrawResult.result = false;\n    withdrawResult.providerName = providerName;\n\n    const { code, msg, data, success } = response.data || {};\n\n    if (code !== 200 || !data || !success) {\n      withdrawResult.errorCode = code;\n      withdrawResult.errorMessage = msg;\n      return withdrawResult;\n    }\n\n    withdrawResult.result = true;\n    return withdrawResult;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): JBPChannelWithdrawResult {\n    const result = new JBPChannelWithdrawResult();\n    result.result = false;\n    result.providerId = null;\n    result.providerName = providerName;\n\n    const { message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderWithdrawResult(): PaymentProviderChannelWithdrawResult {\n    delete this.providerId;\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsNumber,\n  IsNumberString,\n  IsInt,\n} from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport enum JBPWithdrawStatusEnum {\n  SUCCESS = 1, // 成功\n  FAILED = 0, // 失败\n}\n\nexport class JBPWithdrawStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  companyOrderNum: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  otcOrderNum: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  //@Transform((params) => Number(params.value))\n  coinAmount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  coinSign: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsInt()\n  @Transform((params) => Number(params.value))\n  orderType: number;\n\n  @ApiProperty({\n    enum: JBPWithdrawStatusEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(JBPWithdrawStatusEnum)\n  @Transform((params) => Number(params.value))\n  @IsInt()\n  tradeStatus: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  tradeOrderTime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  //@Transform((params) => Number(params.value))\n  unitPrice: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  //@Transform((params) => Number(params.value))\n  total: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  //@Transform((params) => Number(params.value))\n  successAmount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","import {\n  Body,\n  Controller,\n  HttpCode,\n  Inject,\n  Logger,\n  Post,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  apiEndpointDecriptionEnum,\n  apiPathsEnum,\n  apiTagsEnum,\n} from '@workspace/enums';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { JBPDepositStatusResponseDto } from './dto/jbp.deposit.status.response.dto';\nimport { JBPWithdrawStatusResponseDto } from './dto/jbp.withdraw.status.response.dto';\nimport { JBPPaymentProviderService } from './jbp.payment.provider.service';\nimport { RequestIpAddress } from '../../../../decorators/request.ip.decorators';\n\n@Controller(apiPathsEnum.payment)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class JBPPaymentProviderController {\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    private jbpPaymentProviderService: JBPPaymentProviderService\n  ) {}\n\n  @Post(apiPathsEnum.jbpcallbackDeposit)\n  @HttpCode(200)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.depositJBPCallback,\n  })\n  async depositCallback(\n    @Body() depositStatusResponse: JBPDepositStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ) {\n    return this.jbpPaymentProviderService.depositCallback(\n      depositStatusResponse,\n      ip\n    );\n  }\n\n  @Post(apiPathsEnum.jbpcallbackWithdraw)\n  @HttpCode(200)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.withdrawJBPCallback,\n  })\n  async withdrawCallback(\n    @Body() withdrawStatusResponse: JBPWithdrawStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ) {\n    return this.jbpPaymentProviderService.withdrawCallback(\n      withdrawStatusResponse,\n      ip\n    );\n  }\n}\n","import { PaymentProviderEnum, OrderStatusEnum } from '@workspace/enums';\nimport { PaymentProviderChannelModel } from '../../../../models/payment.provider.channel.model';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize';\nimport { PaymentProviderDepositRequestDto } from '../payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from '../payment.provider.deposit.result';\nimport {\n  PaymentProviderChannelDepositResultBundle,\n  PaymentProviderChannelWithdrawResultBundle,\n  PaymentProviderService,\n} from '../payment.provider.service';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../payment.provider.withdraw.result';\nimport {\n  JBPDepositStatusEnum,\n  JBPDepositStatusResponseDto,\n} from './dto/jbp.deposit.status.response.dto';\nimport {\n  JBPWithdrawStatusEnum,\n  JBPWithdrawStatusResponseDto,\n} from './dto/jbp.withdraw.status.response.dto';\nimport {\n  JBPChannelDepositResult,\n  JBPDepositResult,\n} from './dto/jbp.deposit.result';\nimport { DepositPendingOrderModel } from '../../../../models/deposit.pending.order.model';\nimport { JBPDepositRequestParams } from './dto/jbp.deposit.request.params';\nimport { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport * as qs from 'qs';\nimport * as moment from 'moment';\nimport * as numeral from 'numeral';\nimport * as md5 from 'md5';\nimport {\n  JBPChannelWithdrawResult,\n  JBPWithdrawResult,\n} from './dto/jbp.withdraw.result';\nimport {\n  NotSupportedBank,\n  NotSupportedPhoneNumber,\n  PaymentProviderException,\n} from '../../../payment.exception';\nimport { JBPWithdrawRequestParams } from './dto/jbp.withdraw.request.params';\nimport { BankModel } from '../../../../models/bank.entity';\nimport { JBPGetPriceResult } from './interface/jbp.get.price.result.interface';\n\nimport { TestModel } from '../../../../models/test.entity';\nimport { PaymentProviderWithdrawRequestDto } from '../payment.provider.withdraw.request.dto';\nimport { BankService } from '../../../bank/bank.service';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderUsdtProtocolModel } from '../../../../models/payment.provider.usdt.protocol.model';\nimport * as fnv1a from '@sindresorhus/fnv1a';\nimport { OptionsService } from '../../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../../error/enums/errorCodeEnum';\n\n@Injectable()\nexport class JBPPaymentProviderService extends PaymentProviderService {\n  constructor(\n    @InjectModel(BankModel)\n    private bankRepository: typeof BankModel,\n\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    private httpService: HttpService,\n\n    @InjectModel(TestModel)\n    private testRepository: typeof TestModel\n  ) {\n    super(\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.JBP;\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Deposit Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle> {\n    const channelDepositResultBundle = new PaymentProviderChannelDepositResultBundle();\n\n    // if (/* !depositRequest.userName || */ !depositRequest.phoneNumber) {\n    //   return null;\n    // }\n    const channelDepositResultDefault = { providerName: this.getPaymentProviderName() };\n\n    const areaCode = '86';\n    const phoneNumber = `${fnv1a(\n      depositRequest.userId\n    )}${depositRequest.userId.substr(0, 1)}`;\n\n    let depositResult: JBPChannelDepositResult;\n    let order: DepositPendingOrderModel;\n\n    order = await this.createOrderBeforeDeposit(\n      depositRequest,\n      paymentProviderChannel,\n      transaction\n    );\n    if (!order) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const params = new JBPDepositRequestParams();\n\n    params.companyId = this.configService.get<string>('JBP_COMPANYID');\n    params.kyc = '2';\n    //params.username = depositRequest.userName;\n    params.areaCode = areaCode; // depositRequest.countryCallingCode;\n    params.phone = phoneNumber; // depositRequest.phoneNumber;\n    params.orderType = 1;\n    params.companyOrderNum = order.orderId;\n    params.coinSign = 'USDT';\n    params.payCoinSign = 'cny';\n    params.orderPayChannel = numeral(\n      paymentProviderChannel.providerChannelName\n    ).value();\n    params.orderTime = moment().format('x');\n    params.total = order.amount;\n    params.syncUrl = `https://${this.configService.get<string>(\n      'FRONTEND_HOST'\n    )}/`;\n    params.asyncUrl =\n      this.getBaseUrl(depositRequest.headers['host']) +\n      this.configService.get<string>('jbp.DEPOSIT_SUCCESS_URL');\n    params.sign = this.getDepositRequestSign(\n      params,\n      this.configService.get<string>('JBP_SECRETKEY')\n    );\n\n    const host = this.configService.get<string>('JBP_HOST');\n    const url = this.configService.get<string>('JBP_DEPOSIT_URL');\n\n    //console.log(params);\n\n    const response = await this.httpService\n      .post(`https://${host}/${url}`, params)\n      .toPromise();\n\n    //console.log(response.data);\n\n    depositResult = JBPChannelDepositResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!depositResult.result) {\n      depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_FAILED;\n    }\n\n    depositResult.channelRequestTime = moment()\n      .utcOffset('+08:00')\n      .format('YYYY-MM-DD HH:mm:ss');\n    depositResult.channelRequestJson = JSON.stringify(params);\n    depositResult.channelResponseJson = JSON.stringify(response.data);\n\n    channelDepositResultBundle.depositResult = depositResult;\n    channelDepositResultBundle.order = order;\n\n    return channelDepositResultBundle;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async withdrawByPaymentProviderChannel(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle> {\n    const withdrawProcResult = new PaymentProviderChannelWithdrawResultBundle();\n\n    let withdrawResult: JBPChannelWithdrawResult;\n\n    const channelWithdrawResultDefault = { providerName: this.getPaymentProviderName() };\n\n    const order = await this.createOrderBeforeWithdraw(\n      withdrawRequest,\n      transaction\n    );\n    if (!order) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.WITHDRAW_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const paymentProviderBank = await this.getPaymentProviderBank(\n      withdrawRequest.bankCode\n    );\n    if (!paymentProviderBank) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order\n      };\n    }\n\n    const areaCode = '86';\n    const phoneNumber = `${fnv1a(\n      withdrawRequest.userId\n    )}${withdrawRequest.userId.substr(0, 1)}`;\n\n    const params = new JBPWithdrawRequestParams();\n\n    params.companyId = this.configService.get<string>('JBP_COMPANYID');\n    params.kyc = '2';\n    params.username =\n      withdrawRequest.userName || withdrawRequest.bankAccountName;\n    params.areaCode = areaCode; // withdrawRequest.countryCallingCode || '86';\n    params.phone = phoneNumber; //withdrawRequest.phoneNumber;\n    params.orderType = 2;\n    params.companyOrderNum = order.orderId;\n    params.coinSign = 'USDT';\n    params.payCoinSign = 'cny';\n    params.orderPayChannel = numeral(\n      paymentProviderChannel.providerChannelName\n    ).value();\n    params.orderTime = moment().format('x');\n\n    const price = await this.getPrice();\n    if (!price || !price.success || !price.data || !price.data.sellPrice) {\n      throw new PaymentProviderException();\n    }\n    params.coinAmount = numeral(\n      withdrawRequest.amount / price.data.sellPrice\n    ).format('0.00');\n\n    params.syncUrl = `https://${this.configService.get<string>(\n      'FRONTEND_HOST'\n    )}/`;\n    params.asyncUrl =\n      this.getBaseUrl(withdrawRequest.headers['host']) +\n      this.configService.get<string>('jbp.WITHDRAWAL_SUCCESS_URL');\n    params.payCardBank = paymentProviderBank.paymentProviderBankName;\n    params.payCardNo = withdrawRequest.bankAccountNumber;\n    params.sign = this.getWithdrawRequestSign(\n      params,\n      this.configService.get<string>('JBP_SECRETKEY')\n    );\n\n    const host = this.configService.get<string>('JBP_HOST');\n    const url = this.configService.get<string>('JBP_WITHDRAW_URL');\n\n    //console.log(params);\n\n    const response = await this.httpService\n      .post(`https://${host}/${url}`, params)\n      .toPromise();\n\n    //console.log(response.data);\n\n    withdrawResult = JBPChannelWithdrawResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!withdrawResult.result) {\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED;\n    }\n\n    withdrawProcResult.withdrawResult = withdrawResult;\n    withdrawProcResult.order = order;\n\n    return withdrawProcResult;\n  }\n\n  public depositErrorFactory(error: any): PaymentProviderDepositResult {\n    return JBPDepositResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('jbp.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  public withdrawErrorFactory(error: any): PaymentProviderWithdrawResult {\n    return JBPWithdrawResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('jbp.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum {\n    let orderStatus: OrderStatusEnum = OrderStatusEnum.NEW;\n    const depositStatus = <JBPDepositStatusEnum>argDepositStatus;\n\n    switch (depositStatus) {\n      case JBPDepositStatusEnum.SUCCESS:\n        orderStatus = OrderStatusEnum.SUCCESS;\n        break;\n      case JBPDepositStatusEnum.FAILED:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n    }\n\n    return orderStatus;\n  }\n\n  getOrderStatusByWithdrawStatus(argWithdrawStatus: {}): OrderStatusEnum {\n    let orderStatus: OrderStatusEnum = OrderStatusEnum.NEW;\n    const depositStatus = <JBPWithdrawStatusEnum>argWithdrawStatus;\n\n    switch (depositStatus) {\n      case JBPWithdrawStatusEnum.SUCCESS:\n        orderStatus = OrderStatusEnum.SUCCESS;\n        break;\n      case JBPWithdrawStatusEnum.FAILED:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n    }\n\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async depositCallback(\n    depositStatusResponse: JBPDepositStatusResponseDto,\n    ip: string\n  ) {\n    await this.testRepository.create({\n      a: JSON.stringify({ ip, res: JSON.stringify(depositStatusResponse) }),\n    });\n\n    const response = {\n      code: 0,\n      msg: '',\n      data: {\n        otcOrderNum: null,\n        companyOrderNum: null,\n      },\n      success: false,\n    };\n\n    if (!(await this.beforeDepositCallback(depositStatusResponse, ip))) {\n      response.code = 505;\n      response.msg = 'Invalid Request';\n      return response;\n    }\n\n    const order = await this.depositPendingOrderService.findByOrderId(\n      depositStatusResponse.companyOrderNum\n    );\n\n    if (!order) {\n      const orderAlready = await this.depositOrderService.findByOrderId(\n        depositStatusResponse.companyOrderNum\n      );\n\n      if (orderAlready) {\n        response.data.companyOrderNum = orderAlready.orderId;\n        response.data.otcOrderNum = orderAlready.providerOrderId;\n\n        response.code = 200;\n        response.msg = 'success';\n        response.success = true;\n        return response;\n      }\n\n      response.code = 501;\n      response.msg = 'companyOrderNum is invalid';\n      return response;\n    }\n\n    response.data.companyOrderNum = depositStatusResponse.companyOrderNum;\n\n    // if (`${order.providerOrderId}` !== `${depositStatusResponse.otcOrderNum}`) {\n    //   response.code = 502;\n    //   response.msg = 'otcOrderNum is invalid';\n    //   return response;\n    // }\n    response.data.otcOrderNum = depositStatusResponse.otcOrderNum;\n    order.amount = numeral(depositStatusResponse.total).value();\n\n    const sign = this.getDepositStatusResponseSign(\n      depositStatusResponse,\n      this.configService.get<string>('JBP_SECRETKEY')\n    );\n\n    if (sign.toUpperCase() !== depositStatusResponse.sign.toUpperCase()) {\n      response.code = 503;\n      response.msg = 'sign is invalid';\n      return response;\n    }\n\n    order.status = this.getOrderStatusByDepositStatus(\n      depositStatusResponse.tradeStatus\n    );\n    order.providerOrderId = depositStatusResponse.otcOrderNum;\n\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      const bcOrder = await this.depositBCAfterDepositCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterDepositCallback(order, transaction);\n      });\n    } catch (error) {\n      response.code = 504;\n      response.msg = 'unknown error';\n      return response;\n    }\n\n    response.code = 200;\n    response.msg = 'success';\n    response.success = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawCallback(\n    withdrawStatusResponse: JBPWithdrawStatusResponseDto,\n    ip: string\n  ) {\n    await this.testRepository.create({\n      a: JSON.stringify({ ip, res: JSON.stringify(withdrawStatusResponse) }),\n    });\n\n    const response = {\n      code: 0,\n      msg: '',\n      data: {\n        otcOrderNum: null,\n        companyOrderNum: null,\n      },\n      success: false,\n    };\n\n    if (!(await this.beforeWithdrawCallback(withdrawStatusResponse, ip))) {\n      response.code = 506;\n      response.msg = 'Invalid Request';\n      return response;\n    }\n\n    const order = await this.withdrawPendingOrderService.findByOrderId(\n      withdrawStatusResponse.companyOrderNum\n    );\n\n    if (!order) {\n      const orderAlready = await this.withdrawOrderService.findByOrderId(\n        withdrawStatusResponse.companyOrderNum\n      );\n\n      if (orderAlready) {\n        response.data.companyOrderNum = orderAlready.orderId;\n        response.data.otcOrderNum = orderAlready.providerOrderId;\n\n        response.code = 200;\n        response.msg = 'success';\n        response.success = true;\n        return response;\n      }\n\n      response.code = 501;\n      response.msg = 'companyOrderNum is invalid';\n      return response;\n    }\n\n    response.data.companyOrderNum = withdrawStatusResponse.companyOrderNum;\n\n    // if (\n    //   `${order.providerOrderId}` !== `${withdrawStatusResponse.otcOrderNum}`\n    // ) {\n    //   response.code = 502;\n    //   response.msg = 'otcOrderNum is invalid';\n    //   return response;\n    // }\n    response.data.otcOrderNum = withdrawStatusResponse.otcOrderNum;\n\n    const sign = this.getWithdrawStatusResponseSign(\n      withdrawStatusResponse,\n      this.configService.get<string>('JBP_SECRETKEY')\n    );\n\n    if (sign.toUpperCase() !== withdrawStatusResponse.sign.toUpperCase()) {\n      response.code = 503;\n      response.msg = 'sign is invalid';\n      return response;\n    }\n\n    order.status = this.getOrderStatusByDepositStatus(\n      withdrawStatusResponse.tradeStatus\n    );\n    order.providerOrderId = withdrawStatusResponse.otcOrderNum;\n\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      await this.withdrawBCAfterWithdrawCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterWithdrawCallback(order, transaction);\n      });\n    } catch (error) {\n      response.code = 504;\n      response.msg = 'unknown error';\n      return response;\n    }\n\n    response.code = 200;\n    response.msg = 'success';\n    response.success = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getDepositRequestSign(params: JBPDepositRequestParams, key: string): string {\n    const txtSource =\n      `areaCode=${params.areaCode}` +\n      `&asyncUrl=${params.asyncUrl}` +\n      `&coinSign=${params.coinSign}` +\n      `&companyId=${params.companyId}` +\n      `&companyOrderNum=${params.companyOrderNum}` +\n      `&kyc=${params.kyc}` +\n      `&orderPayChannel=${params.orderPayChannel}` +\n      `&orderTime=${params.orderTime}` +\n      `&orderType=${params.orderType}` +\n      `&payCoinSign=${params.payCoinSign}` +\n      `&phone=${params.phone}` +\n      `&secretKey=${key}` +\n      `&syncUrl=${params.syncUrl}` +\n      `&total=${params.total}`; //+\n    //`&username=${params.username}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Withdraw Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawRequestSign(\n    params: JBPWithdrawRequestParams,\n    key: string\n  ): string {\n    const txtSource =\n      `areaCode=${params.areaCode}` +\n      `&asyncUrl=${params.asyncUrl}` +\n      `&coinAmount=${params.coinAmount}` +\n      `&coinSign=${params.coinSign}` +\n      `&companyId=${params.companyId}` +\n      `&companyOrderNum=${params.companyOrderNum}` +\n      `&kyc=${params.kyc}` +\n      `&orderPayChannel=${params.orderPayChannel}` +\n      `&orderTime=${params.orderTime}` +\n      `&orderType=${params.orderType}` +\n      `&payCardBank=${params.payCardBank}` +\n      `&payCardNo=${params.payCardNo}` +\n      `&payCoinSign=${params.payCoinSign}` +\n      `&phone=${params.phone}` +\n      `&secretKey=${key}` +\n      `&syncUrl=${params.syncUrl}` +\n      //`&total=${params.total}` +\n      `&username=${params.username}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Status Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getDepositStatusResponseSign(\n    paymentStatus: JBPDepositStatusResponseDto,\n    key: string\n  ): string {\n    const txtSource =\n      `coinAmount=${paymentStatus.coinAmount}` +\n      `&coinSign=${paymentStatus.coinSign}` +\n      `&companyOrderNum=${paymentStatus.companyOrderNum}` +\n      `&orderType=${paymentStatus.orderType}` +\n      `&otcOrderNum=${paymentStatus.otcOrderNum}` +\n      `&secretKey=${key}` +\n      `&successAmount=${paymentStatus.successAmount}` +\n      `&total=${paymentStatus.total}` +\n      `&tradeOrderTime=${paymentStatus.tradeOrderTime}` +\n      `&tradeStatus=${paymentStatus.tradeStatus}` +\n      `&unitPrice=${paymentStatus.unitPrice}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Status Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawStatusResponseSign(\n    paymentStatus: JBPWithdrawStatusResponseDto,\n    key: string\n  ): string {\n    const txtSource =\n      `coinAmount=${paymentStatus.coinAmount}` +\n      `&coinSign=${paymentStatus.coinSign}` +\n      `&companyOrderNum=${paymentStatus.companyOrderNum}` +\n      `&orderType=${paymentStatus.orderType}` +\n      `&otcOrderNum=${paymentStatus.otcOrderNum}` +\n      `&secretKey=${key}` +\n      `&successAmount=${paymentStatus.successAmount}` +\n      `&total=${paymentStatus.total}` +\n      `&tradeOrderTime=${paymentStatus.tradeOrderTime}` +\n      `&tradeStatus=${paymentStatus.tradeStatus}` +\n      `&unitPrice=${paymentStatus.unitPrice}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  async getPrice(): Promise<JBPGetPriceResult> {\n    const host = this.configService.get<string>('JBP_HOST');\n    const url = this.configService.get<string>('JBP_GET_PRICE');\n\n    const response = await this.httpService\n      .get(`https://${host}/${url}`, { params: { coinType: 'cnyusdt' } })\n      .toPromise();\n    return response.data;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    const errorCode = depositResult\n      ? numeral(depositResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('jbp.DEPOSIT_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel WithdrawResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelWithdrawResult(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    const errorCode = withdrawResult\n      ? numeral(withdrawResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('jbp.WITHDRAW_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n}\n","export class MSZFDepositRequestParams {\n  amount: string;\n  currencyCode: string;\n  merchantCode: string;\n  merchantOrderId: string;\n  mp: string;\n  merchantMemberId: string;\n  merchantMemberIp: string;\n  paymentTypeCode: string;\n  successUrl: string;\n  sign: string;\n}\n","import {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n  PaymentProviderDepositResultData,\n} from '../../payment.provider.deposit.result';\nimport { paymentProviderEnum } from '@workspace/enums';\nexport class MSZFErrorMsg {\n  code: number;\n  errorMsg: string;\n  descript: string;\n}\n\nexport class MSZFDepositResult extends PaymentProviderDepositResult {}\n\nexport class MSZFDepositResultData extends PaymentProviderDepositResultData {\n  httpUrl: string;\n  httpsUrl: string;\n  sign: string;\n\n  static responseFactory(data) {\n    const depositResultData = new MSZFDepositResultData();\n    depositResultData.httpUrl = data.httpUrl;\n    depositResultData.url = depositResultData.httpsUrl = data.httpsUrl;\n    depositResultData.sign = data.sign;\n\n    return depositResultData;\n  }\n}\n\nexport class MSZFChannelDepositResult extends PaymentProviderChannelDepositResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): MSZFChannelDepositResult {\n    const { result, errorMsg, data } = response.data;\n    const depositResult = new MSZFChannelDepositResult();\n\n    depositResult.result = result;\n    depositResult.providerName = providerName;\n    depositResult.errorMessage = null;\n    if (errorMsg) {\n      depositResult.errorCode = errorMsg.code;\n      depositResult.errorMessage = `${errorMsg.errorMsg} ${errorMsg.descript}`;\n      // mSZFPaymentProviderDepositResult.errorMessage.code = errorMsg.code;\n      // mSZFPaymentProviderDepositResult.errorMessage.descript = errorMsg.descript;\n      // mSZFPaymentProviderDepositResult.errorMessage.errorMsg = errorMsg.errorMsg;\n    }\n    depositResult.data = null;\n    if (data) {\n      depositResult.data = MSZFDepositResultData.responseFactory(data);\n      depositResult.providerOrderId = data.gamerOrderId || null;\n    }\n    return depositResult;\n  }\n\n  static errorFactory(error, providerName: string, defaultErrorCode: string) {\n    const result = new MSZFChannelDepositResult();\n    result.result = false;\n    result.providerOrderId = null;\n    result.providerName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderDepositResult(): MSZFChannelDepositResult {\n    if (this.result && this.data) {\n      const data: MSZFDepositResultData = <MSZFDepositResultData>this.data;\n      delete data.sign;\n      delete data.httpUrl;\n      delete data.httpsUrl;\n    }\n    delete this.providerOrderId;\n    return this;\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsEnum } from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\nimport { MSZFPaymentStatusEnum } from '../mszf.payment.provider.service';\n\n/*************Example*****************\n{\n    \"gamerOrderId\": \"D15608558484680374\",\n    \"merchantOrderId\": \"ORDER001\",\n    \"currencyCode\": \"CNY\",\n    \"paymentTypeCode\": \"WECHAT\",\n    \"amount\": \"100.00\",\n    \"remark\": \"000354\",\n    \"mp\": \"testMP\",\n    \"status\": \"Success\",\n    \"sign\": \"711c4b90c921d00b17425165b09f49c2\"\n    }\n***************************************/\n\nexport class MSZFDepositStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  gamerOrderId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  merchantOrderId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  currencyCode: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  paymentTypeCode: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  amount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  remark: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEnum(MSZFPaymentStatusEnum)\n  status: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  mp: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","export class MSZFWithdrawRequestParams {\n  amount: string;\n  bankAccountName: string;\n  bankAccountNumber: string;\n  bankCode: string;\n  branch: string;\n  city: string;\n  currencyCode: string;\n  merchantCode: string;\n  merchantOrderId: string;\n  mp: string;\n  province: string;\n  successUrl: string;\n  sign: string;\n}\n","import { PaymentProviderEnum, paymentProviderEnum } from '@workspace/enums';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n  PaymentProviderWithdrawResultData,\n} from '../../payment.provider.withdraw.result';\n\nexport class MSZFWithdrawResult extends PaymentProviderWithdrawResult {}\n\nexport class MSZFChannelWithdrawResultData extends PaymentProviderWithdrawResultData {\n  merchantOrderId: string;\n  sign: string;\n\n  static responseFactory(data) {\n    const mszfWithdrawResultData: MSZFChannelWithdrawResultData = new MSZFChannelWithdrawResultData();\n    mszfWithdrawResultData.merchantOrderId = data.merchantOrderId;\n    mszfWithdrawResultData.sign = data.sign;\n    return mszfWithdrawResultData;\n  }\n}\n\nexport class MSZFChannelWithdrawResult extends PaymentProviderChannelWithdrawResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): MSZFChannelWithdrawResult {\n    const withdrawResult = new MSZFChannelWithdrawResult();\n    withdrawResult.result = false;\n    withdrawResult.providerName = providerName;\n\n    const { result, errorMsg, data } = response.data;\n\n    withdrawResult.result = result;\n    withdrawResult.providerId = null;\n    withdrawResult.providerName = providerName;\n\n    if (errorMsg) {\n      withdrawResult.errorMessage = `${errorMsg.errorMsg} ${errorMsg.descript}`;\n      withdrawResult.errorCode = errorMsg.code;\n      return withdrawResult;\n    }\n\n    if (data) {\n      withdrawResult.data = MSZFChannelWithdrawResultData.responseFactory(data);\n      withdrawResult.providerId = data.gamerOrderId || null;\n    }\n\n    withdrawResult.result = true;\n    return withdrawResult;\n  }\n\n  static errorFactory(error, providerName: string, defaultErrorCode: string) {\n    const result = new MSZFChannelWithdrawResult();\n    result.result = false;\n    result.providerId = null;\n    result.providerName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderWithdrawResult(): PaymentProviderChannelWithdrawResult {\n    if (this.result && this.data) {\n      const data: MSZFChannelWithdrawResultData = <\n        MSZFChannelWithdrawResultData\n      >this.data;\n      delete data.merchantOrderId;\n      delete data.sign;\n    }\n    delete this.providerId;\n    return this;\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsEnum } from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\nimport { MSZFPaymentStatusEnum } from '../mszf.payment.provider.service';\n\n/*************Example*****************\n{\n    \"gamerOrderId\": \"D15608558484680374\",\n    \"merchantOrderId\": \"ORDER001\",\n    \"currencyCode\": \"CNY\",\n    \"paymentTypeCode\": \"WECHAT\",\n    \"amount\": \"100.00\",\n    \"remark\": \"000354\",\n    \"mp\": \"testMP\",\n    \"status\": \"Success\",\n    \"sign\": \"711c4b90c921d00b17425165b09f49c2\"\n    }\n***************************************/\n\nexport class MSZFWithdrawStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  gamerOrderId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  merchantOrderId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  currencyCode: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  paymentTypeCode: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  amount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  remark: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEnum(MSZFPaymentStatusEnum)\n  status: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  mp: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","import { Body, Controller, Inject, Logger, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  apiPathsEnum,\n  apiTagsEnum,\n  apiEndpointDecriptionEnum,\n} from '@workspace/enums';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { MSZFDepositStatusResponseDto } from './dto/mszf.deposit.status.response.dto';\nimport { MSZFWithdrawStatusResponseDto } from './dto/mszf.withdraw.status.response.dto';\nimport { MSZFPaymentProviderService } from './mszf.payment.provider.service';\nimport { RequestIpAddress } from '../../../../decorators/request.ip.decorators';\n\n@Controller(apiPathsEnum.payment)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class MSZFPaymentCallbackController {\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    private mszfPaymentProviderService: MSZFPaymentProviderService\n  ) {}\n\n  @Post(apiPathsEnum.mszfcallbackDeposit)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.depositMSZFCallback,\n  })\n  async depositCallBack(\n    @Body() mszfPaymentStatusResponseDto: MSZFDepositStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    this.logger.debug('Despoit callback parameters are ');\n    this.logger.debug(JSON.stringify(mszfPaymentStatusResponseDto));\n    return this.mszfPaymentProviderService.depositCallback(\n      mszfPaymentStatusResponseDto,\n      ip\n    );\n  }\n  @Post(apiPathsEnum.mszfcallbackWithdraw)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.withdrawMSZFCallback,\n  })\n  async withdrawCallBack(\n    @Body() mszfPaymentStatusResponseDto: MSZFWithdrawStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    this.logger.debug('Withdrawal callback parameters are ');\n    this.logger.debug(JSON.stringify(mszfPaymentStatusResponseDto));\n    return this.mszfPaymentProviderService.withdrawCallback(\n      mszfPaymentStatusResponseDto,\n      ip\n    );\n  }\n}\n","import { HttpService, Inject, Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as md5 from 'md5';\nimport * as numeral from 'numeral';\nimport * as Locale from '../../../../locale';\nimport { Transaction } from 'sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport {\n  DepositChannelEnum,\n  OrderStatusEnum,\n  PaymentProviderEnum,\n  PaymentSystemEnum,\n} from '@workspace/enums';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport {\n  PaymentProviderException,\n  NotSupportedBank,\n} from '../../../payment.exception';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderDepositRequestDto } from '../payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from '../payment.provider.deposit.result';\nimport {\n  PaymentProviderChannelDepositResultBundle,\n  PaymentProviderService,\n  PaymentProviderChannelWithdrawResultBundle,\n} from '../payment.provider.service';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../payment.provider.withdraw.result';\nimport { MSZFDepositRequestParams } from './dto/mszf.deposit.request.params';\nimport {\n  MSZFChannelDepositResult,\n  MSZFDepositResult,\n  MSZFDepositResultData,\n} from './dto/mszf.deposit.result';\nimport { MSZFDepositStatusResponseDto } from './dto/mszf.deposit.status.response.dto';\nimport { MSZFWithdrawRequestParams } from './dto/mszf.withdraw.request.params';\nimport {\n  MSZFChannelWithdrawResult,\n  MSZFChannelWithdrawResultData,\n  MSZFWithdrawResult,\n} from './dto/mszf.withdraw.result';\nimport { MSZFWithdrawStatusResponseDto } from './dto/mszf.withdraw.status.response.dto';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport { ChannelModel } from '../../../../models/channel.model';\nimport { DepositPendingOrderModel } from '../../../../models/deposit.pending.order.model';\nimport { PaymentProviderChannelModel } from '../../../../models/payment.provider.channel.model';\nimport { WithdrawPendingOrderModel } from '../../../../models/withdraw.pending.order.model';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\nimport * as moment from 'moment-timezone';\nimport { BankService } from '../../../bank/bank.service';\nimport { PaymentProviderWithdrawRequestDto } from '../payment.provider.withdraw.request.dto';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderUsdtProtocolModel } from '../../../../models/payment.provider.usdt.protocol.model';\nimport { OptionsService } from '../../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../../error/enums/errorCodeEnum';\n\nexport enum MSZFPaymentStatusEnum {\n  PENDING = 'Pending',\n  READYTOPAY = 'ReadyToPay',\n  SUCCESS = 'Success',\n  FAILED = 'Failed',\n}\n\nexport enum MSZFDepositCallbackResultEnum {\n  SUCCESS = 'SUCCESS',\n  FAILED = 'FAILED',\n}\n\nexport enum MSZFWithdrawCallbackResultEnum {\n  SUCCESS = 'SUCCESS',\n  FAILED = 'FAILED',\n}\n\nexport enum MSZFChannelEnum {\n  WECHAT = 'WECHAT',\n  WECHATREWARD = 'WECHATREWARD',\n  ALIPAY = 'ALIPAY',\n  ALIPAYH5 = 'ALIPAYH5',\n  ALIPAYTOBANK = 'ALIPAYTOBANK',\n  ALIPAYTOALIPAY = 'ALIPAYTOALIPAY',\n  BANKTOBANK = 'BANKTOBANK',\n}\n\n@Injectable()\nexport class MSZFPaymentProviderService extends PaymentProviderService {\n  clientIP: string;\n\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    private httpService: HttpService\n  ) {\n    super(\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.MSZF;\n  }\n\n  public depositErrorFactory(error): PaymentProviderDepositResult {\n    return MSZFDepositResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('mszf.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  public withdrawErrorFactory(error): PaymentProviderWithdrawResult {\n    return MSZFWithdrawResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('mszf.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Deposit Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle> {\n    const channelDepositResultBundle = new PaymentProviderChannelDepositResultBundle();\n\n    let depositResult: MSZFChannelDepositResult;\n    let order: DepositPendingOrderModel;\n\n    const channelDepositResultDefault = { providerName: this.getPaymentProviderName() };\n\n    order = await this.createOrderBeforeDeposit(\n      depositRequest,\n      paymentProviderChannel,\n      transaction\n    );\n    if (!order) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const channel = await this.channelService.findById(\n      paymentProviderChannel.channelId\n    );\n    if (!channel) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_CHANNEL_NOT_FOUND },\n        order\n      };\n    }\n\n    const paymentSystemId = PaymentSystemEnum[depositRequest.paymentSystem];\n    let usdtExchangeRate: number;\n    if (paymentSystemId === PaymentSystemEnum.USDT) {\n      const optItem = await this.optionsService.findOne({\n        where: { optName: 'huobiExchangeData' },\n      });\n      if (!optItem) {\n        return {\n          depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_USDT_RATE_NOT_FOUND },\n          order\n        };\n      }\n\n      const huobiExchangeData = <\n        { data_time: string; name: string; rate: number; time: string }\n        >JSON.parse(optItem.optValue.toString('utf8'));\n\n      usdtExchangeRate = huobiExchangeData.rate;\n      order.usdtExchangeRate = usdtExchangeRate;\n    }\n\n    const params = new MSZFDepositRequestParams();\n\n    params.amount = numeral(\n      paymentSystemId === PaymentSystemEnum.USDT\n        ? order.amount / usdtExchangeRate\n        : order.amount\n    ).format('0.00');\n    params.currencyCode =\n      paymentSystemId === PaymentSystemEnum.USDT\n        ? paymentProviderUsdtProto.providerUsdtProtoCurrency\n        : 'CNY';\n    params.merchantCode = this.getDepositMerchantCode(channel);\n    params.merchantOrderId = order.orderId;\n    params.mp = 'mp';\n    params.merchantMemberId = order.userId;\n    params.merchantMemberIp = depositRequest.ip;\n    params.paymentTypeCode = paymentProviderChannel.providerChannelName;\n    params.successUrl =\n      this.getBaseUrl(depositRequest.headers['host']) +\n      this.configService.get<string>('mszf.DEPOSIT_SUCCESS_URL');\n    this.logger.debug('MSZF desposit success URL is ' + params.successUrl);\n    params.sign = this.getDepositRequestSign(params, channel);\n\n    const mszfHost = this.configService.get<string>('MSZF_HOST');\n    const url_deposit = this.configService.get<string>('MSZF_DEPOSIT_URL');\n\n    const response = await this.httpService\n      .post(`https://${mszfHost}/${url_deposit}`, params)\n      .toPromise();\n\n    depositResult = MSZFChannelDepositResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!depositResult) {\n      return null;\n    }\n\n    depositResult.channelRequestTime = moment()\n      .utcOffset('+08:00')\n      .format('YYYY-MM-DD HH:mm:ss');\n    depositResult.channelRequestJson = JSON.stringify(params);\n    depositResult.channelResponseJson = JSON.stringify(response.data);\n\n    if (depositResult.result) {\n      const responseSign: string = this.getDepositResponseSign(\n        depositResult,\n        channel\n      );\n      const data: MSZFDepositResultData = <MSZFDepositResultData>(\n        depositResult.data\n      );\n      if (responseSign !== data.sign) {\n        depositResult.result = false;\n\n        depositResult.errorCode = this.configService.get<string>(\n          'mszf.SIGN_ERROR_CODE'\n        );\n        depositResult.errorMessage = Locale.MSG_MSZF_RESPONSE_SIGNERROR;\n        depositResult.data = null;\n      }\n    } else {\n      depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_FAILED;\n    }\n\n    channelDepositResultBundle.depositResult = depositResult;\n    channelDepositResultBundle.order = order;\n\n    return channelDepositResultBundle;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// DepositCallback\n  ////////////////////////////////////////////////////////////////////////////////\n  async depositCallback(\n    depositStatusResponse: MSZFDepositStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    if (!(await this.beforeDepositCallback(depositStatusResponse, ip))) {\n      return MSZFDepositCallbackResultEnum.FAILED;\n    }\n\n    const order = await this.depositPendingOrderService.findByOrderId(\n      depositStatusResponse.merchantOrderId\n    );\n\n    if (!order) {\n      return MSZFDepositCallbackResultEnum.FAILED;\n    }\n\n    const providerChannelName = depositStatusResponse.paymentTypeCode;\n\n    const channelId = await this.paymentProviderChannelService.getChannelIdByProviderChannelName(\n      this.getPaymentProviderId(),\n      providerChannelName\n    );\n\n    if (!channelId) {\n      return MSZFDepositCallbackResultEnum.FAILED;\n    }\n\n    const channel = await this.channelService.findById(channelId);\n\n    if (!channel) {\n      return MSZFDepositCallbackResultEnum.FAILED;\n    }\n\n    const paymentStatusSign: string = this.getDepositStatusResponseSign(\n      depositStatusResponse,\n      channel\n    );\n\n    if (\n      paymentStatusSign.toUpperCase() !==\n      depositStatusResponse.sign.toUpperCase()\n    ) {\n      console.log(paymentStatusSign);\n      return MSZFDepositCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByDepositStatus(\n      depositStatusResponse.status\n    );\n\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      const bcOrder = await this.depositBCAfterDepositCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterDepositCallback(order, transaction);\n      });\n    } catch (error) {\n      console.log(error);\n      return MSZFDepositCallbackResultEnum.FAILED;\n    }\n\n    return MSZFDepositCallbackResultEnum.SUCCESS;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Withdraw Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async withdrawByPaymentProviderChannel(\n    withdrawRequestDto: PaymentProviderWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle> {\n    const withdrawProcResult = new PaymentProviderChannelWithdrawResultBundle();\n\n    let withdrawResult: MSZFChannelWithdrawResult;\n\n    const channelWithdrawResultDefault = { providerName: this.getPaymentProviderName() };\n\n    const order = await this.createOrderBeforeWithdraw(\n      withdrawRequestDto,\n      transaction\n    );\n    if (!order) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.WITHDRAW_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const paymentProviderBank = await this.getPaymentProviderBank(\n      withdrawRequestDto.bankCode\n    );\n    if (!paymentProviderBank) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order\n      };\n    }\n\n    const params = new MSZFWithdrawRequestParams();\n\n    params.amount = numeral(order.amount).format('0.00');\n    params.bankAccountName = withdrawRequestDto.bankAccountName;\n    params.bankAccountNumber = withdrawRequestDto.bankAccountNumber;\n    params.bankCode = paymentProviderBank.paymentProviderBankCode;\n\n    if (!withdrawRequestDto.branch || withdrawRequestDto.branch.trim() === '') {\n      params.branch = paymentProviderBank.paymentProviderBankName;\n    } else {\n      params.branch = withdrawRequestDto.branch;\n    }\n\n    params.city = withdrawRequestDto.city;\n    params.currencyCode = 'CNY';\n    params.merchantCode = this.getWithdrawalMerchantCode();\n    params.merchantOrderId = order.orderId;\n    params.mp = 'mp';\n    params.province = withdrawRequestDto.province;\n    params.successUrl =\n      this.getBaseUrl(withdrawRequestDto.headers['host']) +\n      this.configService.get<string>('mszf.WITHDRAWAL_SUCCESS_URL');\n\n    params.sign = this.getWithdrawRequestSign(params);\n\n    const mszfHost = this.configService.get<string>('MSZF_HOST');\n    const url_withdraw = this.configService.get<string>('MSZF_WITHDRAWAL_URL');\n\n    const response = await this.httpService\n      .post(`https://${mszfHost}/${url_withdraw}`, params)\n      .toPromise();\n\n    withdrawResult = MSZFChannelWithdrawResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    withdrawResult.channelRequestTime = moment()\n      .utcOffset('+08:00')\n      .format('YYYY-MM-DD HH:mm:ss');\n    withdrawResult.channelRequestJson = JSON.stringify(params);\n    withdrawResult.channelResponseJson = JSON.stringify(response.data);\n\n    if (withdrawResult.result) {\n      const responseSign: string = this.getWithdrawResponseSign(withdrawResult);\n      const data = <MSZFChannelWithdrawResultData>withdrawResult.data;\n      if (responseSign !== data.sign) {\n        withdrawResult.result = false;\n        withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED;\n        withdrawResult.errorCode = this.configService.get<string>(\n          'mszf.SIGN_ERROR_CODE'\n        );\n        withdrawResult.errorMessage = Locale.MSG_MSZF_REQUEST_SIGNERROR;\n        withdrawResult.data = null;\n      }\n    }else{\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED;\n    }\n\n    withdrawProcResult.withdrawResult = withdrawResult;\n    withdrawProcResult.order = order;\n\n    return withdrawProcResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawCallback(\n    withdrawStatus: MSZFWithdrawStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    if (!(await this.beforeWithdrawCallback(withdrawStatus, ip))) {\n      return MSZFWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const order: WithdrawPendingOrderModel = await this.withdrawPendingOrderService.findByOrderId(\n      withdrawStatus.merchantOrderId\n    );\n    if (!order) {\n      return MSZFWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const paymentStatusSign: string = this.getWithdrawStatusResponseSign(\n      withdrawStatus\n    );\n\n    if (paymentStatusSign.toUpperCase() !== withdrawStatus.sign.toUpperCase()) {\n      return MSZFWithdrawCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByWithdrawStatus(withdrawStatus.status);\n\n    if (\n      order.status ===\n      OrderStatusEnum.SUCCESS /* ||\n      order.status === OrderStatusEnum.FAILED */\n    ) {\n      await this.withdrawBCAfterWithdrawCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterWithdrawCallback(order, transaction);\n      });\n    } catch (error) {\n      return MSZFWithdrawCallbackResultEnum.FAILED;\n    }\n\n    return MSZFWithdrawCallbackResultEnum.SUCCESS;\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n    // const host = this.configService.get<string>('MSZF_HOST');\n    // const url_available = this.configService.get<string>('MSZF_AVAILABLE_URL');\n    // try {\n    //   const response = await this.httpService\n    //     .post(`https://${host}/${url_available}`, {})\n    //     .toPromise();\n\n    //   if (\n    //     response.data &&\n    //     response.data.result !== undefined &&\n    //     response.data.errorMsg !== undefined &&\n    //     response.data.errorMsg.code !== undefined\n    //   ) {\n    //     return true;\n    //   }\n    //   return false;\n    // } catch (error) {\n    //   return false;\n    // }\n  }\n\n  getDepositMerchantCode(channel: ChannelModel): string {\n    return channel.fromPaymentSystem.isBank && channel.toPaymentSystem.isBank\n      ? this.configService.get<string>('MSZF_MERCHANT_GATEWAY_CODE')\n      : this.configService.get<string>('MSZF_MERCHANT_CODE');\n    return null;\n  }\n\n  getWithdrawalMerchantCode(): string {\n    const merchantCode: string = this.configService.get<string>(\n      'MSZF_MERCHANT_GATEWAY_CODE'\n    );\n\n    return merchantCode;\n  }\n\n  getDepositMerchantSecurityCode(channel: ChannelModel): string {\n    return channel.fromPaymentSystem.isBank && channel.toPaymentSystem.isBank\n      ? this.configService.get<string>('MSZF_MERCHANT_GATEWAY_SECURITY_CODE')\n      : this.configService.get<string>('MSZF_MERCHANT_SECURITY_CODE');\n  }\n\n  getWithdrawalMerchantSecurityCode(): string {\n    const merchantSecurityCode: string = this.configService.get<string>(\n      'MSZF_MERCHANT_GATEWAY_SECURITY_CODE'\n    );\n\n    return merchantSecurityCode;\n  }\n\n  getDepositRequestSign(\n    params: MSZFDepositRequestParams,\n    channel: ChannelModel\n  ): string {\n    const amount = params.amount;\n    const merchantCode = params.merchantCode;\n    const merchantOrderId = params.merchantOrderId;\n    const merchantMemberId = params.merchantMemberId;\n    const merchantMemberIp = params.merchantMemberIp;\n    const paymentTypeCode = params.paymentTypeCode;\n    const successUrl = params.successUrl;\n    const merchantSecurityCode = this.getDepositMerchantSecurityCode(channel);\n\n    const txtSource = `amount=${amount}|merchantCode=${merchantCode}|merchantMemberId=${merchantMemberId}|merchantMemberIp=${merchantMemberIp}|merchantOrderId=${merchantOrderId}|paymentTypeCode=${paymentTypeCode}|successUrl=${successUrl}${merchantSecurityCode}`;\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  getDepositResponseSign(\n    depositResult: PaymentProviderChannelDepositResult,\n    channel: ChannelModel\n  ): string {\n    const mszfDepositResult: MSZFChannelDepositResult = <\n      MSZFChannelDepositResult\n      >depositResult;\n\n    const data: MSZFDepositResultData = <MSZFDepositResultData>(\n      mszfDepositResult.data\n    );\n\n    const gamerOrderId: string = depositResult.providerOrderId;\n    const http: string = data.httpUrl;\n    const https: string = data.httpsUrl;\n    const merchantSecurityCode = this.getDepositMerchantSecurityCode(channel);\n\n    const txtSource = `gamerOrderId=${gamerOrderId}|httpUrl=${http}|httpsUrl=${https}${merchantSecurityCode}`;\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  getDepositStatusResponseSign(\n    depositStatus: MSZFDepositStatusResponseDto,\n    channel: ChannelModel\n  ): string {\n    const amount = depositStatus.amount;\n    const currencyCode = depositStatus.currencyCode;\n    const gamerOrderId: string = depositStatus.gamerOrderId;\n    const merchantOrderId = depositStatus.merchantOrderId;\n    const mp = depositStatus.mp;\n    const remark = depositStatus.remark;\n    const status = depositStatus.status;\n    const paymentTypeCode = depositStatus.paymentTypeCode;\n    const merchantSecurityCode = this.getDepositMerchantSecurityCode(channel);\n\n    const txtSource = `amount=${amount}|currencyCode=${currencyCode}|gamerOrderId=${gamerOrderId}|merchantOrderId=${merchantOrderId}|mp=${mp}|paymentTypeCode=${paymentTypeCode}|remark=${remark}|status=${status}${merchantSecurityCode}`;\n    const txtDecryption = md5(txtSource);\n    return txtDecryption;\n  }\n\n  getWithdrawRequestSign(params: MSZFWithdrawRequestParams): string {\n    const merchantSecurityCode = this.getWithdrawalMerchantSecurityCode();\n    const txtSource = `amount=${params.amount}|bankAccountName=${params.bankAccountName}|bankAccountNumber=${params.bankAccountNumber}|bankCode=${params.bankCode}|branch=${params.branch}|city=${params.city}|merchantCode=${params.merchantCode}|merchantOrderId=${params.merchantOrderId}|province=${params.province}|successUrl=${params.successUrl}${merchantSecurityCode}`;\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  getWithdrawResponseSign(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): string {\n    const mszfWithdrawResult: MSZFChannelWithdrawResult = <\n      MSZFChannelWithdrawResult\n      >withdrawResult;\n\n    const data: MSZFChannelWithdrawResultData = <MSZFChannelWithdrawResultData>(\n      mszfWithdrawResult.data\n    );\n\n    const gamerOrderId: string = withdrawResult.providerId;\n    const merchantOrderId: string = data.merchantOrderId;\n    const merchantSecurityCode = this.getWithdrawalMerchantSecurityCode();\n\n    const txtSource = `gamerOrderId=${gamerOrderId}|merchantOrderId=${merchantOrderId}${merchantSecurityCode}`;\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  getWithdrawStatusResponseSign(\n    withdrawStatus: MSZFWithdrawStatusResponseDto\n  ): string {\n    const amount = withdrawStatus.amount;\n    const currencyCode = withdrawStatus.currencyCode;\n    const gamerOrderId: string = withdrawStatus.gamerOrderId;\n    const merchantOrderId = withdrawStatus.merchantOrderId;\n    const mp = withdrawStatus.mp;\n    const remark = withdrawStatus.remark;\n    const status = withdrawStatus.status;\n    const paymentTypeCode = withdrawStatus.paymentTypeCode;\n    const merchantSecurityCode = this.getWithdrawalMerchantSecurityCode();\n\n    const txtSource = `amount=${amount}|currencyCode=${currencyCode}|gamerOrderId=${gamerOrderId}|merchantOrderId=${merchantOrderId}|mp=${mp}|paymentTypeCode=${paymentTypeCode}|remark=${remark}|status=${status}${merchantSecurityCode}`;\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum {\n    return this.getOrderStatusByProviderStatus(<string>argDepositStatus);\n  }\n\n  getOrderStatusByWithdrawStatus(argWithdrawStatus: {}): OrderStatusEnum {\n    return this.getOrderStatusByProviderStatus(<string>argWithdrawStatus);\n  }\n\n  getOrderStatusByProviderStatus(providerStatus: string): OrderStatusEnum {\n    let orderStatus: OrderStatusEnum = OrderStatusEnum.NEW;\n    switch (providerStatus) {\n      case MSZFPaymentStatusEnum.PENDING:\n        orderStatus = OrderStatusEnum.PENDING;\n        break;\n      case MSZFPaymentStatusEnum.FAILED:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n      case MSZFPaymentStatusEnum.READYTOPAY:\n        orderStatus = OrderStatusEnum.WAITINGPAID;\n        break;\n      case MSZFPaymentStatusEnum.SUCCESS:\n        orderStatus = OrderStatusEnum.SUCCESS;\n        break;\n      default:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n    }\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    const errorCode = depositResult\n      ? numeral(depositResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('mszf.DEPOSIT_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel WithdrawResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelWithdrawResult(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    const errorCode = withdrawResult\n      ? numeral(withdrawResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('mszf.WITHDRAW_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n}\n","import { Controller } from '@nestjs/common';\n\n@Controller()\nexport class PaymentProviderController {\n  constructor() {}\n}\n","import { IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\nimport * as numeral from 'numeral';\nimport { AsYouType, parsePhoneNumber } from 'libphonenumber-js';\nimport { PaymentDepositRequestDto } from '../../dto/payment.deposit.request.dto';\n\nexport class PaymentProviderDepositRequestDto extends PaymentDepositRequestDto {\n  @IsOptional()\n  @IsString()\n  ip: string;\n\n  headers: {};\n\n  countryCallingCode: string;\n\n  static responseFactory(\n    depositRequestDto: PaymentDepositRequestDto,\n    ip: string,\n    headers: {}\n  ) {\n    const paymentProviderDepositRequestDto = new PaymentProviderDepositRequestDto();\n\n    if (depositRequestDto.phoneNumber) {\n      try {\n        let phoneNumber = parsePhoneNumber(depositRequestDto.phoneNumber, 'CN');\n\n        if (\n          !phoneNumber.isValid() &&\n          depositRequestDto.phoneNumber.substring(0, 1) !== '+'\n        ) {\n          depositRequestDto.phoneNumber = `+${depositRequestDto.phoneNumber}`;\n          phoneNumber = parsePhoneNumber(depositRequestDto.phoneNumber, 'CN');\n        }\n\n        if (phoneNumber.isValid()) {\n          paymentProviderDepositRequestDto.countryCallingCode = <string>(\n            phoneNumber.countryCallingCode\n          );\n          paymentProviderDepositRequestDto.phoneNumber = phoneNumber\n            .format('NATIONAL', {\n              humanReadable: false,\n              nationalPrefix: false,\n              v2: false,\n            })\n            .replace(/\\D/g, '');\n        }\n      } catch (error) {}\n    }\n\n    paymentProviderDepositRequestDto.amount = numeral(\n      depositRequestDto.amount\n    ).value();\n    paymentProviderDepositRequestDto.paymentSystem =\n      depositRequestDto.paymentSystem;\n    paymentProviderDepositRequestDto.userId = depositRequestDto.userId;\n    paymentProviderDepositRequestDto.ip = ip;\n    paymentProviderDepositRequestDto.bankCode = depositRequestDto.bankCode;\n    paymentProviderDepositRequestDto.usdtProto = depositRequestDto.usdtProto;\n    paymentProviderDepositRequestDto.headers = headers;\n    paymentProviderDepositRequestDto.userName = depositRequestDto.userName;\n    //paymentProviderDepositRequestDto.phoneNumber = depositRequestDto.phoneNumber;\n\n    return paymentProviderDepositRequestDto;\n  }\n}\n","import { ErrorMessage } from '../../../error/error.service';\nimport { BCCheckClientOut } from '../../betContruct/dto/bc.checkclient.out';\n\nexport class PaymentProviderDepositResultData {\n  url: string;\n}\nexport abstract class PaymentProviderChannelDepositResult {\n  public result: boolean;\n  public code: number;\n\n  public providerOrderId?: string;\n\n  public providerName: string;\n\n  public channelName?: string;\n  public providerChannelName?: string;\n\n  public channelRequestTime?: string;\n  public channelRequestJson?: string;\n  public channelResponseJson?: string;\n\n  public errorCode?: string;\n  public errorMessage?: string;\n  public data?: PaymentProviderDepositResultData;\n  public error?: {};\n\n  abstract sanitizePaymentProviderDepositResult?(): PaymentProviderChannelDepositResult;\n\n  constructor() {\n    this.result = false;\n    this.errorMessage = null;\n    this.data = null;\n  }\n}\n\nexport class PaymentProviderDepositResult {\n\n  // external result \n  result: boolean;\n  code: number;\n  msg: string;\n  orderId: string;\n  \n  // internal result\n  paymentProviderName: string;\n  errorCode: string;\n  errorMessage: string;\n  error?: {};\n  data: {\n    url: string;\n  };\n  paymentProviderChannelDepositResults: PaymentProviderChannelDepositResult[];\n  errorFront: ErrorMessage;\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): PaymentProviderDepositResult {\n    const result = new PaymentProviderDepositResult();\n    result.result = false;\n    result.paymentProviderName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n\n    result.error = error;\n\n    return result;\n  }\n\n  static bcCheckClientErrorFactory(\n    bcCheckClientOut: BCCheckClientOut\n  ): PaymentProviderDepositResult {\n    const result = new PaymentProviderDepositResult();\n    result.result = bcCheckClientOut.result;\n    result.errorCode = `${bcCheckClientOut.errorCode}`;\n    result.errorMessage = bcCheckClientOut.errorMessage;\n\n    return result;\n  }\n\n  santitize(): PaymentProviderDepositResult {\n    if (this.paymentProviderChannelDepositResults !== undefined) {\n      delete this.paymentProviderChannelDepositResults;\n    }\n\n    return this;\n  }\n}\n","import { HttpModule, Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BankModel } from '../../../models/bank.entity';\nimport { OptionsModel } from '../../../models/options.model';\nimport { TestModel } from '../../../models/test.entity';\nimport { OptionsService } from '../../../options/options.service';\nimport { BankModule } from '../../bank/bank.module';\nimport { BetConstructModule } from '../../betContruct/betConsturct.module';\nimport { ChannelModule } from '../../channel/channel.module';\nimport { DepositOrderModule } from '../../order/deposit-order/deposit.order.module';\nimport { DepositPendingOrderModule } from '../../order/deposit-pending-order/deposit.pending.order.module';\nimport { DepositOrderAllModule } from '../../order/deposit/deposit.order.all.module';\nimport { WithdrawOrderModule } from '../../order/withdraw-order/withdraw.order.module';\nimport { WithdrawPendingOrderModule } from '../../order/withdraw-pending-order/withdraw.pending.order.module';\nimport { WithdrawOrderAllModule } from '../../order/withdraw/withdraw.order.all.module';\nimport { PaymentProviderBankModule } from '../payment-provider-bank/payment.provider.bank.module';\nimport { PaymentProviderCardModule } from '../payment-provider-card/payment.provider.card.module';\nimport { PaymentProviderChannelModule } from '../payment-provider-channel/payment.provider.channel.module';\nimport { PaymentProviderEntityModule } from '../payment-provider-entity/payment.provider.entity.module';\nimport { PaymentProviderSharedModule } from '../payment-provider-shared/payment.provider.shared.module';\nimport { PaymentProviderUsdtProtoModule } from '../payment-provider-usdt-protocol/payment.provider.usdt.proto.module';\nimport { BisaPaymentProviderController } from './bisa/bisa.payment.provider.controller';\nimport { BisaPaymentProviderService } from './bisa/bisa.payment.provider.service';\nimport { CardPaymentProviderService } from './card.payment.provider.service';\nimport { D1FPaymentProviderController } from './d1f/d1f.payment.provider.controller';\nimport { D1FPaymentProviderService } from './d1f/d1f.payment.provider.service';\nimport { DBPayPaymentProviderService } from './dbpay/dbpay.payment.provider.service';\nimport { HengXinPaymentProviderController } from './hengxin/hengxin.payment.provider.controller';\nimport { HengXinPaymentProviderService } from './hengxin/hengxin.payment.provider.service';\nimport { JBPPaymentProviderController } from './jbp/jbp.payment.provider.controller';\nimport { JBPPaymentProviderService } from './jbp/jbp.payment.provider.service';\nimport { MSZFPaymentCallbackController } from './mszf/mszf.payment.provder.controller';\nimport { MSZFPaymentProviderService } from './mszf/mszf.payment.provider.service';\nimport { PaymentProviderController } from './payment.provider.controller';\nimport { SXCPaymentProviderController } from './sxc/sxc.payment.provider.controller';\nimport { SXCPaymentProviderService } from './sxc/sxc.payment.provider.service';\n// import { SDDPaymentProviderController } from './sdd/sdd.payment.provider.controller';\n// import { SDDPaymentProviderService } from './sdd/sdd.payment.provider.service';\nimport { UzPAYPaymentProviderController } from './uzpay/uzpay.payment.provider.controller';\nimport { UzPAYPaymentProviderService } from './uzpay/uzpay.payment.provider.service';\nimport { XingChenPaymentProviderController } from './xingchen/xingchen.payment.provider.controller';\nimport { XingChenPaymentProviderService } from './xingchen/xingchen.payment.provider.service';\n\n@Module({\n  imports: [\n    HttpModule.register({\n      timeout: 45000,\n      maxRedirects: 5,\n    }),\n    SequelizeModule.forFeature([BankModel, TestModel, OptionsModel]),\n    ChannelModule,\n    BankModule,\n    DepositPendingOrderModule,\n    DepositOrderModule,\n    WithdrawPendingOrderModule,\n    WithdrawOrderModule,\n    DepositOrderAllModule,\n    WithdrawOrderAllModule,\n    PaymentProviderBankModule,\n    PaymentProviderChannelModule,\n    BetConstructModule,\n    PaymentProviderCardModule,\n    PaymentProviderEntityModule,\n    PaymentProviderSharedModule,\n    PaymentProviderUsdtProtoModule,\n  ],\n  controllers: [\n    PaymentProviderController,\n    MSZFPaymentCallbackController,\n    D1FPaymentProviderController,\n    XingChenPaymentProviderController,\n    UzPAYPaymentProviderController,\n    //SDDPaymentProviderController,\n    HengXinPaymentProviderController,\n    JBPPaymentProviderController,\n    SXCPaymentProviderController,\n    BisaPaymentProviderController,\n  ],\n  providers: [\n    OptionsService,\n    MSZFPaymentProviderService,\n    D1FPaymentProviderService,\n    XingChenPaymentProviderService,\n    UzPAYPaymentProviderService,\n    //SDDPaymentProviderService,\n    HengXinPaymentProviderService,\n    JBPPaymentProviderService,\n    CardPaymentProviderService,\n    SXCPaymentProviderService,\n    DBPayPaymentProviderService,\n    BisaPaymentProviderService,\n  ],\n  exports: [\n    MSZFPaymentProviderService,\n    D1FPaymentProviderService,\n    XingChenPaymentProviderService,\n    UzPAYPaymentProviderService,\n    //SDDPaymentProviderService,\n    HengXinPaymentProviderService,\n    JBPPaymentProviderService,\n    CardPaymentProviderService,\n    SXCPaymentProviderService,\n    DBPayPaymentProviderService,\n    BisaPaymentProviderService,\n  ],\n})\nexport class PaymentProviderModule {}\n","import { ConfigService } from '@nestjs/config';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize';\nimport * as numeral from 'numeral';\n\nimport {\n  OrderStatusEnum,\n  BankCodeEnum,\n  PaymentProviderEnum,\n  PaymentSystemEnum,\n  CurrencyEnum,\n  UsdtProtocolEnum,\n} from '@workspace/enums';\nimport { DepositOrderCreateDto } from '../../order/deposit-order/deposit.order.dto';\nimport { DepositOrderService } from '../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderCreateDto } from '../../order/deposit-pending-order/deposit.pending.order.dto';\nimport { DepositPendingOrderService } from '../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderCreateDto } from '../../order/withdraw-order/withdraw.order.dto';\nimport { WithdrawOrderService } from '../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderCreateDto } from '../../order/withdraw-pending-order/withdraw.pending.order.dto';\nimport { WithdrawPendingOrderService } from '../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { PaymentProviderBankService } from '../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderDepositRequestDto } from './payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from './payment.provider.deposit.result';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from './payment.provider.withdraw.result';\nimport { ChannelService } from '../../channel/channel.service';\nimport { PaymentProviderChannelService } from '../payment-provider-channel/payment.provider.channel.service';\nimport { PaymentProviderException } from '../../payment.exception';\nimport * as moment from 'moment-timezone';\nimport { DepositPendingOrderModel } from '../../../models/deposit.pending.order.model';\nimport { PaymentProviderBankModel } from '../../../models/payment.provider.bank.entity';\nimport { PaymentProviderChannelModel } from '../../../models/payment.provider.channel.model';\nimport { PaymentProviderEntityModel } from '../../../models/payment.provider.entity.model';\nimport { WithdrawPendingOrderModel } from '../../../models/withdraw.pending.order.model';\nimport { BCDepositInParams } from '../../betContruct/dto/bc.deposit.in.params';\nimport { BetConstructService } from '../../betContruct/betConstruct.service';\nimport { BCDepositOut } from '../../betContruct/dto/bc.deposit.out';\nimport { PaymentProviderWithdrawRequestDto } from './payment.provider.withdraw.request.dto';\nimport { BCWithdrawInParams } from '../../betContruct/dto/bc.withdraw.in.params';\nimport { BCWithdrawOut } from '../../betContruct/dto/bc.withdraw.out';\nimport { BcOrdersModel } from '../../../models/bcOrders';\nimport { PaymentStatusResponseDto } from './payment.status.response.dto';\nimport { BankService } from '../../bank/bank.service';\nimport { PaymentProviderCardService } from '../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../payment-provider-entity/Payment.provider.entity.service';\nimport { ChannelModel } from '../../../models/channel.model';\nimport { PaymentSystemModel } from '../../../models/payment.system.model';\nimport { PaymentProviderSharedService } from '../payment-provider-shared/payment.provider.shared.service';\nimport { PaymentDepositByCardRequest } from '../../interface/payment.deposit.bycard.request';\nimport { PaymentProviderCardModel } from '../../../models/payment.provider.card.model';\nimport { PaymentWithdrawRequestDto } from '../../dto/payment.withdraw.request.dto';\nimport { PaymentProviderUsdtProtoService } from '../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderUsdtProtocolModel } from '../../../models/payment.provider.usdt.protocol.model';\nimport { OptionsService } from '../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../error/enums/errorCodeEnum';\n\nexport class PaymentProviderChannelDepositResultBundle {\n  depositResult: PaymentProviderChannelDepositResult;\n  order: DepositPendingOrderModel;\n}\n\nexport class PaymentProviderChannelWithdrawResultBundle {\n  withdrawResult: PaymentProviderChannelWithdrawResult;\n  order: WithdrawPendingOrderModel;\n}\n\nexport abstract class PaymentProviderService {\n  //protected baseURL = '';\n  private paymentProviderEntity: PaymentProviderEntityModel = null;\n\n  constructor(\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected paymentProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSahredService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService\n  ) {\n    // const host = this.configService.get('BACKEND_HOST');\n    // const globalPrefix = this.configService.get('BACKEND_PREFIX');\n    // this.baseURL = 'https://' + host + '/' + globalPrefix;\n\n    this.paymentProviderEntityService\n      .findById(this.getPaymentProviderEnum())\n      .then(async (paymentProvider) => {\n        if (!paymentProvider) {\n          return;\n        }\n\n        if (paymentProvider.isOnlyCardSupport) {\n          await this.paymentProviderSahredService.uptodateChannelMinMaxAmountForCardProvider(\n            paymentProvider.id\n          );\n          return;\n        }\n\n        const usdtDepositChannel = await this.paymentProviderChannelService.findOneDepositUsdtToUsdt(\n          paymentProvider.id\n        );\n\n        if (usdtDepositChannel) {\n          const minMaxAmount = await this.paymentProviderUsdtProtoService.getDepositMinMaxAmount(\n            paymentProvider.id\n          );\n\n          if (minMaxAmount) {\n            if (minMaxAmount.providerMinAmount) {\n              usdtDepositChannel.providerMinAmount =\n                minMaxAmount.providerMinAmount;\n            }\n\n            if (minMaxAmount.providerMaxAmount) {\n              usdtDepositChannel.providerMaxAmount =\n                minMaxAmount.providerMaxAmount;\n            }\n\n            await usdtDepositChannel.save();\n          }\n        }\n\n        const usdtWithdrawChannel = await this.paymentProviderChannelService.findOneWithdrawUsdtToUsdt(\n          paymentProvider.id\n        );\n\n        if (usdtWithdrawChannel) {\n          const minMaxAmount = await this.paymentProviderUsdtProtoService.getWithdrawMinMaxAmount(\n            paymentProvider.id\n          );\n\n          if (minMaxAmount) {\n            if (minMaxAmount.providerMinAmount) {\n              usdtWithdrawChannel.providerMinAmount =\n                minMaxAmount.providerMinAmount;\n            }\n\n            if (minMaxAmount.providerMaxAmount) {\n              usdtWithdrawChannel.providerMaxAmount =\n                minMaxAmount.providerMaxAmount;\n            }\n\n            await usdtWithdrawChannel.save();\n          }\n        }\n      });\n  }\n\n  protected getBaseUrl(host: string) {\n    const globalPrefix = this.configService.get('BACKEND_PREFIX');\n    return 'https://' + host + '/' + globalPrefix;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// ABSTRACT MEMBERS\n  ////////////////////////////////////////////////////////////////////////////////\n\n  abstract getPaymentProviderEnum(): PaymentProviderEnum;\n\n  abstract isAvailable(): Promise<boolean>;\n\n  public abstract depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle>;\n\n  public abstract withdrawByPaymentProviderChannel(\n    withdrawRequestDto: PaymentWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle>;\n\n  public abstract depositErrorFactory(error): PaymentProviderDepositResult;\n  public abstract withdrawErrorFactory(error): PaymentProviderWithdrawResult;\n\n  abstract getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum;\n  abstract getOrderStatusByWithdrawStatus(argWithdrawStatus: {}): OrderStatusEnum;\n\n  depositByCard(request: PaymentDepositByCardRequest) { }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// PyamnetProviderEntity\n  ////////////////////////////////////////////////////////////////////////////////\n  getPaymnetProviderEntity(): PaymentProviderEntityModel {\n    return this.paymentProviderEntity;\n  }\n  setPaymentProviderEntity(paymentProviderEntity: PaymentProviderEntityModel) {\n    this.paymentProviderEntity = paymentProviderEntity;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// PaymentProviderName\n  ////////////////////////////////////////////////////////////////////////////////\n  getPaymentProviderName(): string {\n    return this.paymentProviderEntity\n      ? this.paymentProviderEntity.providerName\n      : null;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// PaymentProviderId\n  ////////////////////////////////////////////////////////////////////////////////\n  getPaymentProviderId(): number {\n    return this.paymentProviderEntity ? this.paymentProviderEntity.id : null;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get PaymentProvider Channel\n  ////////////////////////////////////////////////////////////////////////////////\n  async getPaymentProviderChannel(\n    channelId: number\n  ): Promise<PaymentProviderChannelModel> {\n    const paymentProviderId = this.paymentProviderEntity.id;\n\n    if (!this.paymentProviderEntity) {\n      return null;\n    }\n\n    const paymentProviderChannels = await this.paymentProviderChannelService.getDeposits(\n      channelId,\n      paymentProviderId\n    );\n\n    if (!paymentProviderChannels || paymentProviderChannels.length < 1) {\n      return null;\n    }\n\n    return paymentProviderChannels[0];\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get PaymentProvider Bank\n  ////////////////////////////////////////////////////////////////////////////////\n  async getPaymentProviderBank(\n    bankCode: string\n  ): Promise<PaymentProviderBankModel> {\n    const paymentProviderId = this.getPaymentProviderId();\n    if (!paymentProviderId) {\n      return null;\n    }\n\n    const paymentProviderBank = await this.paymentProviderBankService.get(\n      paymentProviderId,\n      BankCodeEnum[bankCode]\n    );\n\n    if (!paymentProviderBank) {\n      return null;\n    }\n\n    return paymentProviderBank;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  private async deposit(\n    depositRequest: PaymentProviderDepositRequestDto,\n    frozenCheck: boolean,\n    transaction: Transaction\n  ): Promise<PaymentProviderDepositResult> {\n    const depositResult = new PaymentProviderDepositResult();\n    depositResult.result = false;\n    depositResult.paymentProviderChannelDepositResults = [];\n\n    const paymentSystemId = PaymentSystemEnum[depositRequest.paymentSystem];\n\n    let paymentProviderChannels: PaymentProviderChannelModel[];\n\n    paymentProviderChannels = await this.paymentProviderChannelService.getDepositablesByPaymentSystem(\n      paymentSystemId,\n      this.getPaymentProviderId(),\n      depositRequest.amount\n    );\n\n    if (!paymentProviderChannels || paymentProviderChannels.length < 1) {\n      depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_CHANNEL_NOT_FOUND;\n      return depositResult;\n    }\n\n    let paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel;\n    if (paymentSystemId === PaymentSystemEnum.USDT) {\n      const usdtProtoId = UsdtProtocolEnum[depositRequest.usdtProto];\n      if (!usdtProtoId) {\n        depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_USDT_PROTO_NOT_FOUND;\n        return depositResult;\n      }\n\n      const paymentProviderUsdtProtos = await this.paymentProviderUsdtProtoService.findAll(\n        {\n          where: {\n            paymentProviderId: this.getPaymentProviderId(),\n            usdtProtoId,\n          },\n        }\n      );\n\n      if (!paymentProviderUsdtProtos || paymentProviderUsdtProtos.length < 1) {\n        depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_USDT_PROTO_NOT_FOUND;\n        return depositResult;\n      }\n\n      paymentProviderUsdtProto = paymentProviderUsdtProtos[0];\n    }\n\n    let ppcDepositResult: PaymentProviderChannelDepositResult = null;\n\n    for (let i = 0; i < paymentProviderChannels.length; i++) {\n      const paymentProviderChannel = paymentProviderChannels[i];\n\n      const ppcDepositResultBundle = await this.depositByPaymentProviderChannel(\n        depositRequest,\n        paymentProviderChannel,\n        paymentProviderUsdtProto,\n        transaction\n      );\n\n      if (frozenCheck) {\n        await this.updateFrozenStatusByChannelDepositResult(\n          paymentProviderChannel,\n          depositRequest,\n          ppcDepositResultBundle ? ppcDepositResultBundle.depositResult : null\n        );\n      }\n\n      if (!ppcDepositResultBundle) {\n        ppcDepositResult = {\n          result: false,\n          code: ErrorCodeEnum.DEPOSIT_PROVIDER_FAILED_INTERNAL,\n          providerName: this.getPaymentProviderName(),\n          channelName: paymentProviderChannel.channel.channelName,\n          providerChannelName: paymentProviderChannel.providerChannelName,\n        };\n      } else {\n        ppcDepositResult = ppcDepositResultBundle.depositResult;\n\n        if (ppcDepositResultBundle.order) {\n          this.updateOrderAfterDeposit(\n            ppcDepositResultBundle.order,\n            ppcDepositResultBundle.depositResult,\n            transaction\n          );\n          depositResult.orderId = ppcDepositResultBundle.order.orderId;\n        }\n      }\n\n      depositResult.paymentProviderChannelDepositResults.push(ppcDepositResult);\n\n      if (!ppcDepositResult.result) {\n        continue;\n      }\n\n      break;\n    }\n\n    depositResult.paymentProviderName = this.getPaymentProviderName();\n    depositResult.result = ppcDepositResult.result;\n    if (!ppcDepositResult.result) {\n      depositResult.code = ppcDepositResult.code;\n      depositResult.errorCode = ppcDepositResult.errorCode;\n      depositResult.errorMessage = ppcDepositResult.errorMessage;\n    } else {\n      depositResult.data = {\n        url: ppcDepositResult.data ? ppcDepositResult.data.url : null,\n      };\n    }\n\n    return depositResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  private async withdraw(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    frozenCheck: boolean,\n    transaction: Transaction\n  ): Promise<PaymentProviderWithdrawResult> {\n    const withdrawResult = new PaymentProviderWithdrawResult();\n    //withdrawResult.result = false;\n    withdrawResult.paymentProviderChannelWithdrawResults = [];\n\n    const paymentProviderChannels = await this.paymentProviderChannelService.getWithdrawablesByPaymentProvider(\n      this.getPaymentProviderId(),\n      withdrawRequest.amount\n    );\n\n    if (!paymentProviderChannels || paymentProviderChannels.length < 1) {\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_CHANNEL_NOT_FOUND;\n      withdrawResult.result = false;\n      return withdrawResult;\n    }\n\n    let ppcWithdrawResult: PaymentProviderChannelWithdrawResult = null;\n\n    for (let i = 0; i < paymentProviderChannels.length; i++) {\n      const paymentProviderChannel = paymentProviderChannels[i];\n\n      const ppcWithdrawResultBundle = await this.withdrawByPaymentProviderChannel(\n        withdrawRequest,\n        paymentProviderChannel,\n        transaction\n      );\n\n      if (frozenCheck) {\n        await this.updateFrozenStatusByChannelWithdrawResult(\n          paymentProviderChannel,\n          withdrawRequest,\n          ppcWithdrawResultBundle\n            ? ppcWithdrawResultBundle.withdrawResult\n            : null\n        );\n      }\n\n      if (!ppcWithdrawResultBundle) {\n        ppcWithdrawResult = {\n          result: false,\n          code: ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED_INTERNAL,\n          providerName: this.getPaymentProviderName(),\n          channelName: paymentProviderChannel.channel.channelName,\n          providerChannelName: paymentProviderChannel.providerChannelName,\n        };\n\n        withdrawResult.paymentProviderChannelWithdrawResults.push(\n          ppcWithdrawResult\n        );\n        continue;\n      }\n\n      ppcWithdrawResult = ppcWithdrawResultBundle.withdrawResult;\n\n      if (ppcWithdrawResultBundle.order) {\n        this.updateOrderAfterWithdraw(\n          ppcWithdrawResultBundle.order,\n          ppcWithdrawResultBundle.withdrawResult,\n          transaction\n        );\n      }\n\n      withdrawResult.paymentProviderChannelWithdrawResults.push(\n        ppcWithdrawResult\n      );\n      if (!ppcWithdrawResult.result) {\n        continue;\n      }\n\n      break;\n    }\n\n    withdrawResult.paymentProviderName = this.getPaymentProviderName();\n    withdrawResult.code = ppcWithdrawResult.result ? 0 : ppcWithdrawResult.code;\n    // withdrawResult.response = {\n    //   code: ppcWithdrawResult.result\n    //     ? 0\n    //     : numeral(ppcWithdrawResult.errorCode).value(),\n    // };\n\n    // if (!ppcWithdrawResult.result) {\n    //   withdrawResult.response.message = ppcWithdrawResult.errorMessage;\n    // }\n\n    return withdrawResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Procedure General Wrapper\n  ////////////////////////////////////////////////////////////////////////////////\n  public async depositGeneralWrapper(\n    depositRequest: PaymentProviderDepositRequestDto\n  ): Promise<PaymentProviderDepositResult> {\n    let depositResult: PaymentProviderDepositResult;\n\n    try {\n      depositResult = await this.deposit(depositRequest, true, null);\n\n      if (!depositResult) {\n        throw new PaymentProviderException();\n      }\n    } catch (error) {\n      console.log(error);\n      depositResult = this.depositErrorFactory(error);\n      depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_ERROR_UNKNOWN;\n    }\n\n    let paymentProviderDebug = this.configService.get<string>('PAYMENTPROVIDER_DEBUG');\n    paymentProviderDebug = paymentProviderDebug ? JSON.parse(paymentProviderDebug) : true;\n\n    if (!paymentProviderDebug) {\n      depositResult.santitize();\n    }\n\n    return depositResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Procedure PreTry Wrapper\n  ////////////////////////////////////////////////////////////////////////////////\n  public async depositPreTryWrapper(\n    depositRequest: PaymentProviderDepositRequestDto\n  ): Promise<PaymentProviderDepositResult> {\n    let depositResult: PaymentProviderDepositResult;\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        depositResult = await this.deposit(depositRequest, false, transaction);\n\n        if (!depositResult) {\n          throw new PaymentProviderException();\n        }\n\n        throw new PaymentProviderException();\n      });\n    } catch (error) { }\n\n    return depositResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Channel Deposit Procedure PreTry Wrapper\n  ////////////////////////////////////////////////////////////////////////////////\n  public async channelDepositPreTryWrapper(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel\n  ) {\n    let channelDepositResult: PaymentProviderChannelDepositResult = null;\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        const channelDepositResultBundle = await this.depositByPaymentProviderChannel(\n          depositRequest,\n          paymentProviderChannel,\n          null,\n          transaction\n        );\n        if (!channelDepositResultBundle) {\n          throw new PaymentProviderException();\n        }\n        channelDepositResult = channelDepositResultBundle.depositResult;\n        throw new PaymentProviderException();\n      });\n    } catch (error) { }\n\n    return channelDepositResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Procedure General Wrapper\n  ////////////////////////////////////////////////////////////////////////////////\n  public async withdrawGeneralWrapper(\n    withdrawRequest: PaymentProviderWithdrawRequestDto\n  ): Promise<PaymentProviderWithdrawResult> {\n    let withdrawResult: PaymentProviderWithdrawResult = null;\n\n    try {\n      withdrawResult = await this.withdraw(withdrawRequest, true, null);\n\n      if (!withdrawResult) {\n        throw new PaymentProviderException();\n      }\n    } catch (error) {\n      console.log(error);\n      withdrawResult = this.withdrawErrorFactory(error);\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_ERROR_UNKNOWN;\n    }\n\n    let paymentProviderDebug = this.configService.get<string>('PAYMENTPROVIDER_DEBUG');\n    paymentProviderDebug = paymentProviderDebug ? JSON.parse(paymentProviderDebug) : true;\n\n    if (!paymentProviderDebug) {\n      withdrawResult.santitize();\n    }\n\n    return withdrawResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Procedure PreTry Wrapper\n  ////////////////////////////////////////////////////////////////////////////////\n  public async withdrawPreTryWrapper(\n    withdrawRequest: PaymentProviderWithdrawRequestDto\n  ): Promise<PaymentProviderWithdrawResult> {\n    let withdrawResult: PaymentProviderWithdrawResult = null;\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        withdrawResult = await this.withdraw(\n          withdrawRequest,\n          false,\n          transaction\n        );\n\n        if (!withdrawResult) {\n          throw new PaymentProviderException();\n        }\n\n        throw new PaymentProviderException();\n      });\n    } catch (error) { }\n\n    return withdrawResult;\n  }\n\n  public async channelWithdrawPreTryWrapper(\n    withdrawRequest: PaymentWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel\n  ) {\n    let withdrawResult: PaymentProviderChannelWithdrawResult = null;\n\n    try {\n      await this.sequelize.transaction(async (transaction) => {\n        const channelWithdrawResultBundle = await this.withdrawByPaymentProviderChannel(\n          withdrawRequest,\n          paymentProviderChannel,\n          transaction\n        );\n\n        if (!channelWithdrawResultBundle) {\n          throw new PaymentProviderException();\n        }\n\n        withdrawResult = channelWithdrawResultBundle.withdrawResult;\n\n        throw new PaymentProviderException();\n      });\n    } catch (error) { }\n\n    return withdrawResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Update PaymentProvider Channel Frozen Status By Deposit Result\n  ////////////////////////////////////////////////////////////////////////////////\n  protected async updateFrozenStatusByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ) {\n    paymentProviderChannel.isFrozen = this.getFrozenByChannelDepositResult(\n      paymentProviderChannel,\n      depositRequest,\n      depositResult\n    );\n    paymentProviderChannel.frozenCheckedDate = moment().toDate();\n\n    await this.paymentProviderChannelService.update(\n      paymentProviderChannel,\n      null\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    return depositResult ? !depositResult.result : true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Update PaymentProvider Channel Frozen Status By Withdraw Result\n  ////////////////////////////////////////////////////////////////////////////////\n  protected async updateFrozenStatusByChannelWithdrawResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    withdrawRequest: PaymentWithdrawRequestDto,\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ) {\n    paymentProviderChannel.isFrozen = this.getFrozenByChannelWithdrawResult(\n      withdrawResult\n    );\n\n    paymentProviderChannel.frozenCheckedDate = moment().toDate();\n\n    await this.paymentProviderChannelService.update(\n      paymentProviderChannel,\n      null\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel WithdrawResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelWithdrawResult(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    return withdrawResult ? !withdrawResult.result : true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Create Deposit Pending Order By DepositRequest\n  ////////////////////////////////////////////////////////////////////////////////\n  protected async createOrderBeforeDeposit(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<DepositPendingOrderModel> {\n    const orderCreate = new DepositPendingOrderCreateDto();\n\n    orderCreate.orderId =\n      `${(numeral(Math.random().toString(10).substr(2, 1)).value() % 9) + 1}` +\n      `${Math.random().toString(10).substr(2, 7)}`;\n\n    orderCreate.amount = depositRequest.amount;\n    orderCreate.channelId = paymentProviderChannel.channelId;\n    orderCreate.userId = depositRequest.userId;\n\n    orderCreate.paymentProviderId = this.getPaymentProviderId();\n    orderCreate.paymentProviderChannelId = paymentProviderChannel.id;\n\n    orderCreate.status = OrderStatusEnum.NEW;\n\n    const order = await this.depositPendingOrderService.create(\n      orderCreate,\n      transaction ? { transaction } : null\n    );\n\n    return order;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Create Deposit Pending Order By DepositRequest\n  ////////////////////////////////////////////////////////////////////////////////\n  protected async createOrderBeforeDepositByCard(\n    request: PaymentDepositByCardRequest,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderCard: PaymentProviderCardModel,\n    transaction: Transaction\n  ): Promise<DepositPendingOrderModel> {\n    // const orderAlready = await this.depositOrderService.findByHash(\n    //   request.hash\n    // );\n\n    // const pendingOrderAlready = await this.depositPendingOrderService.findByHash(\n    //   request.hash\n    // );\n\n    const orderCreate = new DepositPendingOrderCreateDto();\n\n    orderCreate.orderId =\n      `${(numeral(Math.random().toString(10).substr(2, 1)).value() % 9) + 1}` +\n      `${Math.random().toString(10).substr(2, 7)}`;\n\n    orderCreate.amount = request.amount;\n    orderCreate.channelId = paymentProviderChannel.channelId;\n    orderCreate.userId = `${request.userId}`;\n\n    orderCreate.paymentProviderId = this.getPaymentProviderId();\n    orderCreate.paymentProviderChannelId = paymentProviderChannel.id;\n\n    orderCreate.status = OrderStatusEnum.WAITINGPAID;\n\n    orderCreate.userName = request.userName;\n    orderCreate.last4Digit = request.last4Digit;\n    orderCreate.paymentProviderCardId = paymentProviderCard.id;\n    //orderCreate.hash = request.hash;\n\n    const order = await this.depositPendingOrderService.create(\n      orderCreate,\n      transaction ? { transaction } : null\n    );\n\n    return order;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Update Deposit Order After Deposit\n  ////////////////////////////////////////////////////////////////////////////////\n  async updateOrderAfterDeposit(\n    order: DepositPendingOrderModel,\n    depositResult: PaymentProviderChannelDepositResult,\n    transaction: Transaction\n  ) {\n    if (!depositResult.result) {\n      order.status = OrderStatusEnum.FAILED;\n      order.errorCode = depositResult.errorCode;\n      order.errorMessage = depositResult.errorMessage;\n    } else {\n      order.status = OrderStatusEnum.WAITINGPAID;\n      order.providerOrderId = depositResult.providerOrderId;\n    }\n\n    return await this.depositPendingOrderService.update(\n      order,\n      transaction ? { transaction } : null\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Update/Remove Pending Deposit\n  /// And Create New Deosit Order After DepositCallback\n  ////////////////////////////////////////////////////////////////////////////////\n  async updateOrderAfterDepositCallback(\n    order: DepositPendingOrderModel,\n    transaction: Transaction\n  ) {\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      const orderCreate = this.buildDepositOrderCreateByPendingOrder(order);\n\n      await this.depositPendingOrderService.destroy(\n        order,\n        transaction ? { transaction } : null\n      );\n\n      await this.depositOrderService.create(\n        orderCreate,\n        transaction ? { transaction } : null\n      );\n    } else {\n      await this.depositPendingOrderService.update(\n        order,\n        transaction ? { transaction } : null\n      );\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Create New Pending Withdraw Order\n  ////////////////////////////////////////////////////////////////////////////////\n  async createOrderBeforeWithdraw(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    transaction: Transaction\n  ): Promise<WithdrawPendingOrderModel> {\n    const orderCreate = new WithdrawPendingOrderCreateDto();\n\n    orderCreate.orderId =\n      `${(numeral(Math.random().toString(10).substr(2, 1)).value() % 9) + 1}` +\n      `${Math.random().toString(10).substr(2, 7)}`;\n\n    orderCreate.paymentProviderId = this.getPaymentProviderId();\n    orderCreate.userId = withdrawRequest.userId;\n    orderCreate.clientOrderId = withdrawRequest.orderId;\n    orderCreate.currency = withdrawRequest.currency;\n    orderCreate.amount = withdrawRequest.amount;\n    orderCreate.hashcode = withdrawRequest.hashcode;\n\n    const bank = await this.bankService.findOne({\n      where: { bankCode: withdrawRequest.bankCode },\n    });\n    if (!bank) {\n      return null;\n    }\n    orderCreate.bankId = bank.id;\n\n    orderCreate.bankAccountName = withdrawRequest.bankAccountName;\n    orderCreate.bankAccountNumber = withdrawRequest.bankAccountNumber;\n    orderCreate.province = withdrawRequest.province;\n    orderCreate.city = withdrawRequest.city;\n    orderCreate.branch = withdrawRequest.branch;\n    orderCreate.userName = withdrawRequest.userName;\n    orderCreate.countryCallingCode = withdrawRequest.countryCallingCode;\n    orderCreate.phoneNumber = withdrawRequest.phoneNumber;\n    orderCreate.status = OrderStatusEnum.NEW;\n\n    return await this.withdrawPendingOrderService.create(\n      orderCreate,\n      transaction ? { transaction } : null\n    );\n  }\n\n  static async createPendingWithdrawOrderByRequest(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    options: {\n      bankService: BankService;\n      withdrawPendingOrderService: WithdrawPendingOrderService;\n    }\n  ) {\n    const orderCreate = new WithdrawPendingOrderCreateDto();\n\n    orderCreate.orderId =\n      `${(numeral(Math.random().toString(10).substr(2, 1)).value() % 9) + 1}` +\n      `${Math.random().toString(10).substr(2, 7)}`;\n\n    orderCreate.paymentProviderId = null;\n    orderCreate.userId = withdrawRequest.userId;\n    orderCreate.clientOrderId = withdrawRequest.orderId;\n    orderCreate.currency = withdrawRequest.currency;\n    orderCreate.amount = withdrawRequest.amount;\n    orderCreate.hashcode = withdrawRequest.hashcode;\n\n    const bank = await options.bankService.findOne({\n      where: { bankCode: withdrawRequest.bankCode },\n    });\n    if (!bank) {\n      return null;\n    }\n    orderCreate.bankId = bank.id;\n\n    orderCreate.bankAccountName = withdrawRequest.bankAccountName;\n    orderCreate.bankAccountNumber = withdrawRequest.bankAccountNumber;\n    orderCreate.province = withdrawRequest.province;\n    orderCreate.city = withdrawRequest.city;\n    orderCreate.branch = withdrawRequest.branch;\n    orderCreate.userName = withdrawRequest.userName;\n    orderCreate.countryCallingCode = withdrawRequest.countryCallingCode;\n    orderCreate.phoneNumber = withdrawRequest.phoneNumber;\n    orderCreate.status = OrderStatusEnum.NEW;\n\n    return await options.withdrawPendingOrderService.create(orderCreate, null);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Update Pending Withdraw Order After Withdraw\n  ////////////////////////////////////////////////////////////////////////////////\n  async updateOrderAfterWithdraw(\n    order: WithdrawPendingOrderModel,\n    withdrawResult: PaymentProviderChannelWithdrawResult,\n    transaction: Transaction\n  ) {\n    if (!withdrawResult.result) {\n      order.status = OrderStatusEnum.FAILED;\n      order.errorCode = withdrawResult.errorCode;\n      order.errorMessage = withdrawResult.errorMessage;\n    } else {\n      order.status = this.paymentProviderEntity.isOnlyCardSupport\n        ? OrderStatusEnum.WAITINGPAID\n        : OrderStatusEnum.PENDING;\n      order.providerOrderId = withdrawResult.providerId;\n    }\n\n    return await this.withdrawPendingOrderService.update(\n      order,\n      transaction ? { transaction } : null\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Update/Remove Pending Withdraw\n  /// And Create New Withdraw Order After WithdrawCallback\n  ////////////////////////////////////////////////////////////////////////////////\n  async updateOrderAfterWithdrawCallback(\n    order: WithdrawPendingOrderModel,\n    transaction: Transaction\n  ) {\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      const orderCreate = this.buildWithdrawOrderCreateByPendingOrder(order);\n\n      this.withdrawPendingOrderService.destroy(\n        order,\n        transaction ? { transaction } : null\n      );\n\n      await this.withdrawOrderService.create(\n        orderCreate,\n        transaction ? { transaction } : null\n      );\n    } else {\n      await this.withdrawPendingOrderService.update(\n        order,\n        transaction ? { transaction } : null\n      );\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Build Withdraw Order Create By Pending Order\n  ////////////////////////////////////////////////////////////////////////////////\n  private buildWithdrawOrderCreateByPendingOrder(\n    order: WithdrawPendingOrderModel\n  ): WithdrawOrderCreateDto {\n    const orderCreate: WithdrawOrderCreateDto = new WithdrawOrderCreateDto();\n\n    orderCreate.orderId = order.orderId;\n    orderCreate.userId = order.userId;\n    orderCreate.clientOrderId = order.clientOrderId;\n    orderCreate.amount = order.amount;\n    orderCreate.providerOrderId = order.providerOrderId;\n    orderCreate.paymentProviderId = order.paymentProviderId;\n    orderCreate.hashcode = order.hashcode;\n    orderCreate.currency = order.currency;\n    orderCreate.status = order.status;\n    orderCreate.date = order.date;\n    orderCreate.bankId = order.bankId;\n    orderCreate.bankAccountName = order.bankAccountName;\n    orderCreate.bankAccountNumber = order.bankAccountNumber;\n    orderCreate.province = order.province;\n    orderCreate.city = order.city;\n    orderCreate.currency = order.currency;\n    orderCreate.userName = order.userName;\n    orderCreate.countryCallingCode = order.countryCallingCode;\n    orderCreate.phoneNumber = order.phoneNumber;\n    orderCreate.branch = order.branch;\n\n    return orderCreate;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Build Deposit Order Create By Pending Order\n  ////////////////////////////////////////////////////////////////////////////////\n  private buildDepositOrderCreateByPendingOrder(\n    order: DepositPendingOrderModel\n  ): DepositOrderCreateDto {\n    const orderCreate = new DepositOrderCreateDto();\n\n    orderCreate.orderId = order.orderId;\n    orderCreate.userId = order.userId;\n    orderCreate.amount = order.amount;\n    orderCreate.usdtExchangeRate = order.usdtExchangeRate;\n    orderCreate.status = order.status;\n    orderCreate.providerOrderId = order.providerOrderId;\n    orderCreate.channelId = order.channelId;\n    orderCreate.date = order.date;\n    orderCreate.paymentProviderId = order.paymentProviderId;\n    orderCreate.paymentProviderChannelId = order.paymentProviderChannelId;\n    orderCreate.paymentProviderCardId = order.paymentProviderCardId;\n    orderCreate.userName = order.userName;\n    orderCreate.last4Digit = order.last4Digit;\n    orderCreate.hash = order.hash;\n\n    return orderCreate;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Sync BetConsruct After DepositCallback\n  ////////////////////////////////////////////////////////////////////////////////\n  async depositBCAfterDepositCallback(\n    order: DepositPendingOrderModel\n  ): Promise<BcOrdersModel> {\n    const params = new BCDepositInParams();\n    params.userId = numeral(order.userId).value();\n    params.orderId = numeral(order.orderId).value();\n    params.amount = numeral(order.amount).value();\n    params.currency = CurrencyEnum[CurrencyEnum.CNY];\n\n    const bcOrder = await this.betConstructService.addDepositBcOrder(params);\n\n    return bcOrder;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Sync BetConsruct After WithdrawCallback\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawBCAfterWithdrawCallback(\n    order: WithdrawPendingOrderModel\n  ): Promise<BcOrdersModel> {\n    const params = new BCWithdrawInParams();\n\n    params.userId = numeral(order.userId).value();\n    params.orderId = numeral(order.clientOrderId).value();\n    params.amount = order.amount;\n    params.currency = order.currency;\n    params.reason = this.configService.get<string>(\n      'betConstruct.withdraw.reason'\n    );\n    params.status = this.betConstructService.getBCWithdrawStatusByOrderStatus(\n      <OrderStatusEnum>order.status\n    );\n\n    const bcOrder = await this.betConstructService.addWithdrawBcOrder(params);\n\n    return bcOrder;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Before DepositCallback\n  ////////////////////////////////////////////////////////////////////////////////\n  async beforeDepositCallback(\n    statusResponse: PaymentStatusResponseDto,\n    ip: string\n  ): Promise<boolean> {\n    if (!this.checkIpWhiteList(ip)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Before DepositCallback\n  ////////////////////////////////////////////////////////////////////////////////\n  async beforeWithdrawCallback(\n    statusResponse: PaymentStatusResponseDto,\n    ip: string\n  ): Promise<boolean> {\n    if (!this.checkIpWhiteList(ip)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected checkIpWhiteList(ip: string): boolean {\n    const providerName = this.getPaymentProviderName();\n    const ipWhiteListEnable = numeral(\n      this.configService.get<string>(`${providerName}_IP_WHITELIST_ENABLE`)\n    ).value();\n\n    if (ipWhiteListEnable !== 1) {\n      return true;\n    }\n\n    const ipWhiteList = this.configService.get<string>(\n      `${providerName}_IP_WHITELIST`\n    );\n\n    const ips = ipWhiteList.split(',') || [];\n    const ipMatched = ips.find((_ip) => _ip.trim() === ip);\n\n    return ipMatched ? true : false;\n  }\n}\n","import { IsOptional, IsString } from 'class-validator';\nimport * as numeral from 'numeral';\nimport { AsYouType, parsePhoneNumber } from 'libphonenumber-js';\nimport { PaymentWithdrawRequestDto } from '../../dto/payment.withdraw.request.dto';\n\nexport class PaymentProviderWithdrawRequestDto extends PaymentWithdrawRequestDto {\n  @IsOptional()\n  @IsString()\n  ip: string;\n\n  headers: {};\n\n  countryCallingCode: string;\n  phoneNumberRaw: string;\n\n  static responseFactory(\n    withdrawRequestDto: PaymentWithdrawRequestDto,\n    ip: string,\n    headers: {}\n  ) {\n    const withdrawRequestPaymentProvider = new PaymentProviderWithdrawRequestDto();\n\n    withdrawRequestPaymentProvider.phoneNumberRaw =\n      withdrawRequestDto.phoneNumber;\n    if (withdrawRequestDto.phoneNumber) {\n      try {\n        let phoneNumber = parsePhoneNumber(\n          withdrawRequestDto.phoneNumber,\n          'CN'\n        );\n\n        if (\n          !phoneNumber.isValid() &&\n          withdrawRequestDto.phoneNumber.substring(0, 1) !== '+'\n        ) {\n          withdrawRequestDto.phoneNumber = `+${withdrawRequestDto.phoneNumber}`;\n          phoneNumber = parsePhoneNumber(withdrawRequestDto.phoneNumber, 'CN');\n        }\n\n        if (phoneNumber.isValid()) {\n          withdrawRequestPaymentProvider.countryCallingCode = <string>(\n            phoneNumber.countryCallingCode\n          );\n          withdrawRequestPaymentProvider.phoneNumber = phoneNumber\n            .format('NATIONAL', {\n              humanReadable: false,\n              nationalPrefix: false,\n              v2: false,\n            })\n            .replace(/\\D/g, '');\n        }\n      } catch (error) {}\n    }\n\n    withdrawRequestPaymentProvider.amount = numeral(\n      withdrawRequestDto.amount\n    ).value();\n    withdrawRequestPaymentProvider.bankAccountName =\n      withdrawRequestDto.bankAccountName;\n    withdrawRequestPaymentProvider.bankAccountNumber =\n      withdrawRequestDto.bankAccountNumber;\n    withdrawRequestPaymentProvider.bankCode = withdrawRequestDto.bankCode;\n    withdrawRequestPaymentProvider.branch = withdrawRequestDto.branch;\n    withdrawRequestPaymentProvider.city = withdrawRequestDto.city;\n    withdrawRequestPaymentProvider.currency = withdrawRequestDto.currency;\n    withdrawRequestPaymentProvider.hashcode = withdrawRequestDto.hashcode;\n    withdrawRequestPaymentProvider.orderId = withdrawRequestDto.orderId;\n    withdrawRequestPaymentProvider.province = withdrawRequestDto.province;\n    withdrawRequestPaymentProvider.token = withdrawRequestDto.token;\n    withdrawRequestPaymentProvider.userId = withdrawRequestDto.userId;\n    withdrawRequestPaymentProvider.userName = withdrawRequestDto.userName;\n    //withdrawRequestPaymentProvider.phoneNumber = withdrawRequestDto.phoneNumber;\n    withdrawRequestPaymentProvider.ip = ip;\n    withdrawRequestPaymentProvider.headers = headers;\n\n    return withdrawRequestPaymentProvider;\n  }\n}\n","import { ErrorCodeEnum } from '../../../error/enums/errorCodeEnum';\nimport { BCCheckWithdrawHashOut } from '../../betContruct/dto/bc.check.withdraw.hash.out';\nimport { BCCheckWithdrawIPWhiteListOut } from '../../betContruct/dto/bc.check.withdraw.ipwhitelist.out';\n\nexport class PaymentProviderWithdrawResultData {}\nexport abstract class PaymentProviderChannelWithdrawResult {\n  public result: boolean;\n  public code: number;\n\n  public providerId?: string;\n  public providerName: string;\n\n  public channelName?: string;\n  public providerChannelName?: string;\n\n  public channelRequestTime?: string;\n  public channelRequestJson?: string;\n  public channelResponseJson?: string;\n\n  public errorCode?: string;\n  public errorMessage?: string;\n  public data?: PaymentProviderWithdrawResultData;\n  public error?: {};\n  abstract sanitizePaymentProviderWithdrawResult?(): PaymentProviderChannelWithdrawResult;\n}\n\nexport class PaymentProviderWithdrawResult {\n  // response: {\n  //   code: number;\n  //   message?: string;\n  // };\n\n  // external result \n  result: boolean;\n  code: number;\n  msg: string;\n\n  // internal result\n  paymentProviderName: string;\n\n  // result: boolean;\n  // errorCode: string;\n  // errorMessage: string;\n\n  error?: {};\n  data: {};\n  paymentProviderChannelWithdrawResults: PaymentProviderChannelWithdrawResult[];\n\n  // static bcCheckIPWhiteListErrorFactory(\n  //   bcCheckWithdrawIPWhiteListOut: BCCheckWithdrawIPWhiteListOut\n  // ): PaymentProviderWithdrawResult {\n  //   const result = new PaymentProviderWithdrawResult();\n\n  //   // result.result = bcCheckWithdrawIPWhiteListOut.result;\n  //   // result.errorCode = `${bcCheckWithdrawIPWhiteListOut.errorCode}`;\n  //   // result.errorMessage = bcCheckWithdrawIPWhiteListOut.errorMessage;\n\n  //   // result.response = {\n  //   //   code: bcCheckWithdrawIPWhiteListOut.result\n  //   //     ? 0\n  //   //     : bcCheckWithdrawIPWhiteListOut.errorCode,\n  //   // };\n\n  //   // if (result.response.code !== 0) {\n  //   //   result.response.message = bcCheckWithdrawIPWhiteListOut.errorMessage;\n  //   // }\n\n  //   result.code = ErrorCodeEnum.WITHDRAW_IP_INVALID;\n  //   return result;\n  // }\n\n  // static bcCheckWithdrawHashErrorFactory(\n  //   bcCheckWithdrawHashOut: BCCheckWithdrawHashOut\n  // ): PaymentProviderWithdrawResult {\n  //   const result = new PaymentProviderWithdrawResult();\n\n  //   // result.result = bcCheckWithdrawHashOut.result;\n  //   // result.errorCode = `${bcCheckWithdrawHashOut.errorCode}`;\n  //   // result.errorMessage = bcCheckWithdrawHashOut.errorMessage;\n\n  //   result.response = {\n  //     code: bcCheckWithdrawHashOut.result\n  //       ? 0\n  //       : bcCheckWithdrawHashOut.errorCode,\n  //   };\n\n  //   if (result.response.code !== 0) {\n  //     result.response.message = bcCheckWithdrawHashOut.errorMessage;\n  //   }\n\n  //   return result;\n  // }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): PaymentProviderWithdrawResult {\n    const result = new PaymentProviderWithdrawResult();\n    \n    //result.result = false;\n    result.paymentProviderName = providerName;\n\n    const { status, message } = error;\n\n    // result.errorMessage = message || 'Unknown Error';\n    // result.errorCode = defaultErrorCode;\n\n    result.error = error;\n\n    return result;\n  }\n\n  santitize(): PaymentProviderWithdrawResult {\n    if (this.paymentProviderChannelWithdrawResults !== undefined) {\n      delete this.paymentProviderChannelWithdrawResults;\n    }\n\n    return this;\n  }\n}\n","export enum DepositStatusEnum {}\n\nexport class PaymentStatusResponseDto {}\n","import {\n  Body,\n  Controller,\n  HttpCode,\n  Inject,\n  Logger,\n  Post,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  apiEndpointDecriptionEnum,\n  apiPathsEnum,\n  apiTagsEnum,\n} from '@workspace/enums';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { SXCPaymentProviderService } from './sxc.payment.provider.service';\nimport { RequestIpAddress } from '../../../../decorators/request.ip.decorators';\n\n@Controller(apiPathsEnum.payment)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class SXCPaymentProviderController {\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    private sxcPaymentProviderService: SXCPaymentProviderService\n  ) {}\n}\n","import { PaymentProviderEnum } from '@workspace/enums';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport { BankModel } from '../../../../models/bank.entity';\n\nimport { TestModel } from '../../../../models/test.entity';\nimport { BankService } from '../../../bank/bank.service';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\n\nimport { CardPaymentProviderService } from '../card.payment.provider.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { OptionsService } from '../../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../../error/enums/errorCodeEnum';\n\n@Injectable()\nexport class SXCPaymentProviderService extends CardPaymentProviderService {\n  constructor(\n    @InjectModel(BankModel)\n    protected bankRepository: typeof BankModel,\n\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    protected httpService: HttpService,\n\n    @InjectModel(TestModel)\n    protected testRepository: typeof TestModel\n  ) {\n    super(\n      //bankRepository,\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService,\n      httpService\n      //testRepository\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.SXC;\n  }\n}\n","export class UzPAYDepositRequestParams {\n  uid: string;\n  userid: string;\n  amount: string;\n  orderid: string;\n  cate: string;\n  userip: string;\n  from_bankflag: string;\n  notify: string;\n  sign: string;\n}\n","import { paymentProviderEnum } from '@workspace/enums';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n  PaymentProviderDepositResultData,\n} from '../../payment.provider.deposit.result';\n\nexport class UzPAYDepositResult extends PaymentProviderDepositResult {}\n\nexport class UzPAYDepositResultData extends PaymentProviderDepositResultData {\n  public action: string;\n  public qrurl: string;\n  public oid: string;\n  public card: {\n    bankflag: string;\n    cardnumber: string;\n    cardname: string;\n    location: string;\n    comment: string;\n  };\n\n  public static responseFactory(info): UzPAYDepositResultData {\n    const data = new UzPAYDepositResultData();\n\n    const { action, qrurl, oid, card } = info || {};\n\n    data.action = action || '';\n    data.url = data.qrurl = qrurl || '';\n    data.oid = oid || null;\n    data.card = card || {};\n\n    return data;\n  }\n}\n\n// {\n//   success: true,\n//   info: {\n//     action: 'jump',\n//     qrurl: 'http://uzpay.0708hx.com:9099/jump/alipay?oid=60010cd27be38=29992&at=',\n//     oid: '300100188006',\n//     card: {\n//       bankflag: '',\n//       cardnumber: '',\n//       cardname: '',\n//       location: '',\n//       comment: ''\n//     }\n//   }\n// }\n\n//{ success: false, msg: '签名错误' }\n//{ success: false, msg: '提交支付订单失败' }\n// errorMessage: '未提供通道，请洽我方业务人员',\n//{ success: false, msg: '金額不符合限制,单笔最小限额:300,单笔最大限额:10000' }\n//缺少所需数据(from_bankflag)\n\nexport class UzPAYChannelDepositResult extends PaymentProviderChannelDepositResult {\n  static getErrorCodeByMsg(errorMsg: string): string {\n    if (/^签名/.test(errorMsg)) {\n      return '101';\n    }\n\n    if (/^金額不符/.test(errorMsg)) {\n      return '102';\n    }\n\n    if (/^10分钟内相同订单内容/.test(errorMsg)) {\n      return '103';\n    }\n\n    if (/^提交支付订单失败/.test(errorMsg)) {\n      return '104';\n    }\n\n    if (/^缺少所需数据/.test(errorMsg)) {\n      return '105';\n    }\n\n    if (/^未提供通道/.test(errorMsg)) {\n      return '106';\n    }\n\n    return '-1';\n  }\n\n  static responseFactory(\n    response,\n    providerName: string\n  ): UzPAYChannelDepositResult {\n    const { success, info, msg } = response.data || {};\n\n    console.log(response.data);\n\n    const result = new UzPAYChannelDepositResult();\n    result.result = false;\n    result.providerOrderId = null;\n    result.providerName = providerName;\n\n    if (success !== true) {\n      result.errorMessage = msg;\n      result.errorCode = UzPAYChannelDepositResult.getErrorCodeByMsg(msg);\n\n      return result;\n    }\n\n    result.data = UzPAYDepositResultData.responseFactory(info);\n\n    //const data = <UzPAYDepositResultData>result.data;\n\n    result.result = true;\n\n    return result;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): UzPAYChannelDepositResult {\n    const result = new UzPAYChannelDepositResult();\n    result.result = false;\n    result.providerName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderDepositResult(): PaymentProviderChannelDepositResult {\n    if (this.data !== undefined) {\n      const data = <UzPAYDepositResultData>this.data;\n\n      if (data) {\n        delete data.action;\n        delete data.card;\n        delete data.oid;\n        delete data.qrurl;\n      }\n    }\n\n    if (this.providerOrderId !== undefined) {\n      delete this.providerOrderId;\n    }\n\n    if (this.result && this.errorMessage !== undefined) {\n      delete this.errorMessage;\n    }\n\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsNumber,\n} from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport enum UzPAYDepositStatusEnum {\n  VERIFIED = 'verified', //已完成\n  REVOKED = 'revoked', // 被撒销\n  TIMEOUT = 'timeout', // 逾时\n  PROCESSING = 'processing', //處理中\n}\n\nexport class UzPAYDepositStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  amount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  oid: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  orderid: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  userid: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  service: string;\n\n  @ApiProperty({\n    enum: UzPAYDepositStatusEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(UzPAYDepositStatusEnum)\n  @IsString()\n  status: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  //@IsString()\n  created_time: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  //@IsNumber()\n  verified_time: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  extend: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","export class UzPAYWithdrawRequestParams {\n  uid: string;\n  userid: string;\n  amount: string;\n  orderid: string;\n  to_bankflag: string;\n  to_subbankflag: string;\n  to_cardnumber: string;\n  to_cardname: string;\n  to_province: string;\n  to_city: string;\n  notify: string;\n  extend: string;\n  sign: string;\n}\n","import {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../../payment.provider.withdraw.result';\n\nexport class UzPAYWithdrawResult extends PaymentProviderWithdrawResult {}\n\n// { success: false, msg: '您的IP不在服務範圍內(xxx.xxx.xxx.xxx)' }\n// { success: false, msg: '帐户余额不足' }\n// { success: false, msg: '签名错误' }\n// { success: false, msg: '10分钟内相同订单内容' }\n// { success: false, msg: '未提供通道，请洽我方业务人员' }\n// { \"success\": false,\"msg\": \"金額不符合限制,单笔最小限额:1000,单笔最大限额:30000\"}\n\nexport class UzPAYChannelWithdrawResult extends PaymentProviderChannelWithdrawResult {\n  static getErrorCodeByMsg(errorMsg: string): string {\n    if (/^签名错误/.test(errorMsg)) {\n      return '201';\n    }\n\n    if (/^您的IP/.test(errorMsg)) {\n      return '202';\n    }\n\n    if (/^帐户余额不足/.test(errorMsg)) {\n      return '203';\n    }\n\n    if (/^金額不符/.test(errorMsg)) {\n      return '204';\n    }\n\n    if (/^未提供通道/.test(errorMsg)) {\n      return '205';\n    }\n\n    return '-1';\n  }\n\n  static responseFactory(\n    response,\n    providerName: string\n  ): UzPAYChannelWithdrawResult {\n    const withdrawResult = new UzPAYChannelWithdrawResult();\n    withdrawResult.result = false;\n    withdrawResult.providerName = providerName;\n\n    const { success, msg } = response.data || {};\n\n    console.log(response.data);\n\n    if (success !== true) {\n      withdrawResult.errorCode = UzPAYChannelWithdrawResult.getErrorCodeByMsg(\n        msg\n      );\n      withdrawResult.errorMessage = msg;\n      return withdrawResult;\n    }\n\n    withdrawResult.result = true;\n    return withdrawResult;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): UzPAYChannelWithdrawResult {\n    const result = new UzPAYChannelWithdrawResult();\n    result.result = false;\n    result.providerId = null;\n    result.providerName = providerName;\n\n    const { message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderWithdrawResult(): PaymentProviderChannelWithdrawResult {\n    delete this.providerId;\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsNumber,\n} from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport enum UzPAYWithdrawStatusEnum {\n  VERIFIED = 'verified', //已完成\n  REVOKED = 'revoked', // 被撒销\n  TIMEOUT = 'timeout', // 逾时\n  PROCESSING = 'processing', //處理中\n}\n\nexport class UzPAYWithdrawStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  amount: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  oid: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  orderid: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  userid: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  service: string;\n\n  @ApiProperty({\n    enum: UzPAYWithdrawStatusEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(UzPAYWithdrawStatusEnum)\n  @IsString()\n  status: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  //@IsString()\n  created_time: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  //@IsString()\n  verified_time: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  extend: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","import { Body, Controller, Inject, Logger, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  apiEndpointDecriptionEnum,\n  apiPathsEnum,\n  apiTagsEnum,\n} from '@workspace/enums';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { UzPAYDepositStatusResponseDto } from './dto/uzpay.deposit.status.response.dto';\nimport { UzPAYWithdrawStatusResponseDto } from './dto/uzpay.withdraw.status.response.dto';\nimport { UzPAYPaymentProviderService } from './uzpay.payment.provider.service';\nimport { RequestIpAddress } from '../../../../decorators/request.ip.decorators';\n\n@Controller(apiPathsEnum.payment)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class UzPAYPaymentProviderController {\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    private uzPAYPaymentProviderService: UzPAYPaymentProviderService\n  ) {}\n\n  @Post(apiPathsEnum.uzpaycallbackDeposit)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.depositUzPAYCallback,\n  })\n  async depositCallback(\n    @Body() depositStatusResponse: UzPAYDepositStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    return this.uzPAYPaymentProviderService.depositCallback(\n      depositStatusResponse,\n      ip\n    );\n  }\n\n  @Post(apiPathsEnum.uzpaycallbackWithdraw)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.withdrawUzPAYCallback,\n  })\n  async withdrawCallback(\n    @Body() withdrawStatusResponse: UzPAYWithdrawStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    return this.uzPAYPaymentProviderService.withdrawCallback(\n      withdrawStatusResponse,\n      ip\n    );\n  }\n}\n","import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OrderStatusEnum, PaymentProviderEnum } from '@workspace/enums';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport {\n  PaymentProviderChannelDepositResultBundle,\n  PaymentProviderService,\n  PaymentProviderChannelWithdrawResultBundle,\n} from '../payment.provider.service';\nimport { PaymentProviderDepositRequestDto } from '../payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from '../payment.provider.deposit.result';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../payment.provider.withdraw.result';\nimport {\n  UzPAYDepositStatusEnum,\n  UzPAYDepositStatusResponseDto,\n} from './dto/uzpay.deposit.status.response.dto';\nimport {\n  UzPAYWithdrawStatusEnum,\n  UzPAYWithdrawStatusResponseDto,\n} from './dto/uzpay.withdraw.status.response.dto';\nimport {\n  UzPAYChannelDepositResult,\n  UzPAYDepositResult,\n} from './dto/uzpay.deposit.result';\nimport {\n  UzPAYChannelWithdrawResult,\n  UzPAYWithdrawResult,\n} from './dto/uzpay.withdraw.result';\nimport { UzPAYDepositRequestParams } from './dto/uzpay.deposit.request.param';\nimport {\n  NotSupportedBank,\n  PaymentProviderException,\n} from '../../../payment.exception';\n\nimport * as numeral from 'numeral';\nimport * as md5 from 'md5';\nimport { UzPAYWithdrawRequestParams } from './dto/uzpay.withdraw.request.params';\nimport { DepositPendingOrderModel } from '../../../../models/deposit.pending.order.model';\nimport { PaymentProviderChannelModel } from '../../../../models/payment.provider.channel.model';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\n\nimport * as moment from 'moment-timezone';\nimport { BankService } from '../../../bank/bank.service';\nimport { PaymentProviderWithdrawRequestDto } from '../payment.provider.withdraw.request.dto';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderUsdtProtocolModel } from '../../../../models/payment.provider.usdt.protocol.model';\nimport { OptionsService } from '../../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../../error/enums/errorCodeEnum';\n\nexport enum UzPAYDepositCallbackResultEnum {\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nexport enum UzPAYWithdrawCallbackResultEnum {\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\n@Injectable()\nexport class UzPAYPaymentProviderService extends PaymentProviderService {\n  constructor(\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    private httpService: HttpService // @InjectModel(TestModel) // private testRepository: typeof TestModel\n  ) {\n    super(\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.UZPAY;\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  public depositErrorFactory(error: any): PaymentProviderDepositResult {\n    return UzPAYDepositResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('uzpay.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  public withdrawErrorFactory(error: any): PaymentProviderWithdrawResult {\n    return UzPAYWithdrawResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('uzpay.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Deposit Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle> {\n    const channelDepositResultBundle = new PaymentProviderChannelDepositResultBundle();\n\n    let depositResult: UzPAYChannelDepositResult;\n    let order: DepositPendingOrderModel;\n\n    const channelDepositResultDefault = { providerName: this.getPaymentProviderName() };\n\n    order = await this.createOrderBeforeDeposit(\n      depositRequest,\n      paymentProviderChannel,\n      transaction\n    );\n    if (!order) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const params = new UzPAYDepositRequestParams();\n\n    params.uid = this.configService.get<string>('UZPAY_UID');\n    params.userid = depositRequest.userId;\n    params.amount = numeral(depositRequest.amount).format('0.00');\n    params.orderid = order.orderId;\n    params.cate = paymentProviderChannel.providerChannelName;\n\n    const channel = await this.channelService.findById(\n      paymentProviderChannel.channelId\n    );\n    if (!channel) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_CHANNEL_NOT_FOUND },\n        order\n      };\n    }\n\n    if (channel.fromPaymentSystem.isBank) {\n      const paymentProviderBank = await this.getPaymentProviderBank(\n        depositRequest.bankCode\n      );\n      if (!paymentProviderBank) {\n        throw new NotSupportedBank();\n      }\n      params.from_bankflag = paymentProviderBank.paymentProviderBankName;\n    } else {\n      params.from_bankflag = this.configService.get<string>(\n        'uzpay.OTHER_BANKFLAG'\n      );\n    }\n    params.userip = depositRequest.ip;\n    params.notify =\n      this.getBaseUrl(depositRequest.headers['host']) +\n      this.configService.get<string>('uzpay.DEPOSIT_SUCCESS_URL');\n\n    params.sign = this.getDepositRequestSign(\n      params,\n      this.configService.get<string>('UZPAY_KEY')\n    );\n\n    const host = this.configService.get<string>('UZPAY_HOST');\n    const url = this.configService.get<string>('UZPAY_DEPOSIT_URL');\n    const response = await this.httpService\n      .post(`https://${host}/${url}`, params)\n      .toPromise();\n\n    depositResult = UzPAYChannelDepositResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!depositResult.result) {\n      depositResult.code = ErrorCodeEnum.DEPOSIT_PROVIDER_FAILED;\n    }\n\n    depositResult.channelRequestTime = moment()\n      .utcOffset('+08:00')\n      .format('YYYY-MM-DD HH:mm:ss');\n    depositResult.channelRequestJson = JSON.stringify(params);\n    depositResult.channelResponseJson = JSON.stringify(response.data);\n\n    channelDepositResultBundle.depositResult = depositResult;\n    channelDepositResultBundle.order = order;\n\n    return channelDepositResultBundle;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async depositCallback(\n    depositStatusResponse: UzPAYDepositStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    if (!(await this.beforeDepositCallback(depositStatusResponse, ip))) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    const order = await this.depositPendingOrderService.findByOrderId(\n      depositStatusResponse.orderid\n    );\n\n    if (!order) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    const sign = this.getDepositStatusResponseSign(\n      depositStatusResponse,\n      this.configService.get<string>('UZPAY_KEY')\n    );\n\n    if (sign.toUpperCase() !== depositStatusResponse.sign.toUpperCase()) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    if (\n      `${order.amount}` !== `${numeral(depositStatusResponse.amount).value()}`\n    ) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByDepositStatus(\n      depositStatusResponse.status\n    );\n\n    order.providerOrderId = depositStatusResponse.oid;\n\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      const bcOrder = await this.depositBCAfterDepositCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterDepositCallback(order, transaction);\n      });\n    } catch (error) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    return UzPAYDepositCallbackResultEnum.SUCCESS;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async withdrawByPaymentProviderChannel(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle> {\n    const withdrawProcResult = new PaymentProviderChannelWithdrawResultBundle();\n\n    let withdrawResult: UzPAYChannelWithdrawResult;\n\n    const channelWithdrawResultDefault = { providerName: this.getPaymentProviderName() };\n\n    const order = await this.createOrderBeforeWithdraw(\n      withdrawRequest,\n      transaction\n    );\n    if (!order) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.WITHDRAW_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const paymentProviderBank = await this.getPaymentProviderBank(\n      withdrawRequest.bankCode\n    );\n    if (!paymentProviderBank) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order\n      };\n    }\n\n    const params = new UzPAYWithdrawRequestParams();\n\n    params.uid = this.configService.get<string>('UZPAY_UID');\n    params.userid = withdrawRequest.userId;\n    params.amount = numeral(order.amount).format('0.00');\n    params.orderid = order.orderId;\n\n    params.to_bankflag = paymentProviderBank.paymentProviderBankName;\n    params.to_subbankflag =\n      !withdrawRequest.branch || !withdrawRequest.branch.trim()\n        ? paymentProviderBank.paymentProviderBankName\n        : withdrawRequest.branch;\n\n    params.to_cardnumber = withdrawRequest.bankAccountNumber;\n    params.to_cardname = withdrawRequest.bankAccountName;\n    params.to_province = withdrawRequest.province;\n    params.to_city = withdrawRequest.city;\n    params.notify =\n      this.getBaseUrl(withdrawRequest.headers['host']) +\n      this.configService.get<string>('uzpay.WITHDRAWAL_SUCCESS_URL');\n    //params.extend = '';\n\n    params.sign = this.getWithdrawRequestSign(\n      params,\n      this.configService.get<string>('UZPAY_KEY')\n    );\n\n    const host = this.configService.get<string>('UZPAY_HOST');\n    const url = this.configService.get<string>('UZPAY_WITHDRAW_URL');\n\n    const response = await this.httpService\n      .post(`https://${host}/${url}`, params)\n      .toPromise();\n\n    withdrawResult = UzPAYChannelWithdrawResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!withdrawResult.result) {\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED;\n    }\n\n    withdrawProcResult.withdrawResult = withdrawResult;\n    withdrawProcResult.order = order;\n\n    return withdrawProcResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawCallback(\n    withdrawStatusResponse: UzPAYWithdrawStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    // await this.testRepository.create({\n    //   a: JSON.stringify(withdrawStatusResponse),\n    // });\n\n    if (!(await this.beforeWithdrawCallback(withdrawStatusResponse, ip))) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    const order = await this.withdrawPendingOrderService.findByOrderId(\n      withdrawStatusResponse.orderid\n    );\n\n    if (!order) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    const sign = this.getWithdrawStatusResponseSign(\n      withdrawStatusResponse,\n      this.configService.get<string>('UZPAY_KEY')\n    );\n\n    if (sign.toUpperCase() !== withdrawStatusResponse.sign.toUpperCase()) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    if (\n      `${order.amount}` !== `${numeral(withdrawStatusResponse.amount).value()}`\n    ) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByWithdrawStatus(\n      withdrawStatusResponse.status\n    );\n\n    order.providerOrderId = withdrawStatusResponse.oid;\n\n    if (\n      order.status ===\n      OrderStatusEnum.SUCCESS /* ||\n      order.status === OrderStatusEnum.FAILED */\n    ) {\n      await this.withdrawBCAfterWithdrawCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterWithdrawCallback(order, transaction);\n      });\n    } catch (error) {\n      return UzPAYDepositCallbackResultEnum.FAILED;\n    }\n\n    return UzPAYDepositCallbackResultEnum.SUCCESS;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Order Status By Deposit Status\n  ////////////////////////////////////////////////////////////////////////////////\n  getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum {\n    let orderStatus: OrderStatusEnum = OrderStatusEnum.NEW;\n    const depositStatus = <UzPAYDepositStatusEnum>argDepositStatus;\n\n    switch (depositStatus) {\n      case UzPAYDepositStatusEnum.REVOKED:\n      case UzPAYDepositStatusEnum.TIMEOUT:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n      case UzPAYDepositStatusEnum.PROCESSING:\n        orderStatus = OrderStatusEnum.PENDING;\n        break;\n      case UzPAYDepositStatusEnum.VERIFIED:\n        orderStatus = OrderStatusEnum.SUCCESS;\n        break;\n    }\n\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Order Status By Withdraw Status\n  ////////////////////////////////////////////////////////////////////////////////\n  getOrderStatusByWithdrawStatus(argWithdrawStatus: {}): OrderStatusEnum {\n    let orderStatus: OrderStatusEnum = OrderStatusEnum.NEW;\n    const withdrawStatus = <UzPAYWithdrawStatusEnum>argWithdrawStatus;\n\n    switch (withdrawStatus) {\n      case UzPAYWithdrawStatusEnum.REVOKED:\n      case UzPAYWithdrawStatusEnum.TIMEOUT:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n      case UzPAYWithdrawStatusEnum.PROCESSING:\n        orderStatus = OrderStatusEnum.PENDING;\n        break;\n      case UzPAYWithdrawStatusEnum.VERIFIED:\n        orderStatus = OrderStatusEnum.SUCCESS;\n        break;\n    }\n\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getDepositRequestSign(\n    params: UzPAYDepositRequestParams,\n    key: string\n  ): string {\n    const txtSource =\n      `amount=${params.amount}` +\n      `&cate=${params.cate}` +\n      `&from_bankflag=${params.from_bankflag}` +\n      `&notify=${params.notify}` +\n      `&orderid=${params.orderid}` +\n      `&uid=${params.uid}` +\n      `&userid=${params.userid}` +\n      `&userip=${params.userip}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Withdraw Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawRequestSign(params: UzPAYWithdrawRequestParams, key: string) {\n    const txtSource =\n      `amount=${params.amount}` +\n      `&notify=${params.notify}` +\n      `&orderid=${params.orderid}` +\n      `&to_bankflag=${params.to_bankflag}` +\n      `&to_cardname=${params.to_cardname}` +\n      `&to_cardnumber=${params.to_cardnumber}` +\n      `&to_city=${params.to_city}` +\n      `&to_province=${params.to_province}` +\n      `&uid=${params.uid}` +\n      `&userid=${params.userid}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Status Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getDepositStatusResponseSign(\n    depositStatus: UzPAYDepositStatusResponseDto,\n    key: string\n  ): string {\n    const txtSource =\n      `amount=${depositStatus.amount}` +\n      `&created_time=${depositStatus.created_time}` +\n      // (depositStatus.extend && depositStatus.extend.length > 0\n      //   ? `&extended=${depositStatus.extend}`\n      //   : '') +\n      `&oid=${depositStatus.oid}` +\n      `&orderid=${depositStatus.orderid}` +\n      `&service=${depositStatus.service}` +\n      `&status=${depositStatus.status}` +\n      `&userid=${depositStatus.userid}` +\n      // (depositStatus.verified_time !== undefined\n      //   ? `&verified_time=${depositStatus.verified_time}`\n      //   : '') +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Status Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawStatusResponseSign(\n    withdrawStatus: UzPAYWithdrawStatusResponseDto,\n    key: string\n  ): string {\n    const txtSource =\n      `amount=${withdrawStatus.amount}` +\n      `&created_time=${withdrawStatus.created_time}` +\n      // (withdrawStatus.extend && withdrawStatus.extend.length > 0\n      //   ? `&extended=${withdrawStatus.extend}`\n      //   : '') +\n      `&oid=${withdrawStatus.oid}` +\n      `&orderid=${withdrawStatus.orderid}` +\n      `&service=${withdrawStatus.service}` +\n      `&status=${withdrawStatus.status}` +\n      `&userid=${withdrawStatus.userid}` +\n      // (withdrawStatus.verified_time && withdrawStatus.verified_time.length > 0\n      //   ? `&verified_time=${withdrawStatus.verified_time}`\n      //   : '') +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    const errorCode = numeral(depositResult.errorCode).value();\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('uzpay.DEPOSIT_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel WithdrawResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelWithdrawResult(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    const errorCode = numeral(withdrawResult.errorCode).value();\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('uzpay.WITHDRAW_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n}\n","export class XingChenDepositRequestParams {\n  mch_id: string;\n  order_id: string;\n  amount: number;\n  notify_url: string;\n  client_ip: string;\n  platform: string;\n  channel_id: string;\n  time_stamp: string;\n  sign: string;\n}\n","import { paymentProviderEnum } from '@workspace/enums';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n  PaymentProviderDepositResultData,\n} from '../../payment.provider.deposit.result';\n\nexport class XingChenDepositResult extends PaymentProviderDepositResult {}\n\nexport class XingChenDepositResultData extends PaymentProviderDepositResultData {\n  public pay_link: string;\n\n  public static responseFactory({ pay_link }): XingChenDepositResultData {\n    const data = new XingChenDepositResultData();\n\n    data.url = data.pay_link = pay_link;\n\n    return data;\n  }\n}\n\nexport class XingChenChannelDepositResult extends PaymentProviderChannelDepositResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): XingChenChannelDepositResult {\n    const { code, msg, pay_link } = response.data || {};\n\n    const result = new XingChenChannelDepositResult();\n    result.result = false;\n    result.providerOrderId = null;\n    result.providerName = providerName;\n\n    if (code !== 0) {\n      result.errorCode = code;\n      result.errorMessage = msg || 'Unknown Error';\n      return result;\n    }\n\n    result.data = XingChenDepositResultData.responseFactory({ pay_link });\n\n    result.result = true;\n    return result;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): XingChenChannelDepositResult {\n    const result = new XingChenChannelDepositResult();\n    result.result = false;\n    result.providerName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    //result.errorCode = status;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderDepositResult(): PaymentProviderChannelDepositResult {\n    if (this.data !== undefined) {\n      const data = <XingChenDepositResultData>this.data;\n\n      if (data && data.pay_link !== undefined) {\n        delete data.pay_link;\n      }\n    }\n\n    if (this.providerOrderId !== undefined) {\n      delete this.providerOrderId;\n    }\n\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport {\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport enum XingChenDepositStatusEnum {\n  PENDING = 0, //为暂未支付\n  SUCCESS, // 为已支付\n  FAILED, // 超时支付失败\n}\n\nexport class XingChenDepositStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  mch_id: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  order_id: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsInt()\n  @Transform((params) => Number(params.value))\n  amount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bank_mark: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  trade_no: string;\n\n  @ApiProperty({\n    enum: XingChenDepositStatusEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(XingChenDepositStatusEnum)\n  @IsInt()\n  pay_status: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  pay_time: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  time_stamp: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","export class XingChenWithdrawRequestParams {\n  mch_id: string;\n  order_id: string;\n  amount: number;\n  notify_url: string;\n  passwd: string;\n  bank: string;\n  bank_site: string;\n  bank_account: string;\n  bank_account_name: string;\n  time_stamp: string;\n  sign: string;\n}\n","import { PaymentProviderEnum } from '@workspace/enums';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../../payment.provider.withdraw.result';\n\nexport class XingChenWithdrawResult extends PaymentProviderWithdrawResult {}\n\nexport class XingChenChannelWithdrawResult extends PaymentProviderChannelWithdrawResult {\n  static responseFactory(\n    response,\n    providerName: string\n  ): XingChenChannelWithdrawResult {\n    const result = new XingChenChannelWithdrawResult();\n    result.result = false;\n    result.providerName = providerName;\n\n    const { code, msg } = response.data || {};\n\n    if (code !== 0) {\n      result.errorCode = code;\n      result.errorMessage = msg;\n      return result;\n    }\n\n    result.result = true;\n    return result;\n  }\n\n  static errorFactory(\n    error,\n    providerName: string,\n    defaultErrorCode: string\n  ): XingChenChannelWithdrawResult {\n    const result = new XingChenChannelWithdrawResult();\n    result.result = false;\n    result.providerId = null;\n    result.providerName = providerName;\n\n    const { status, message } = error;\n\n    result.errorMessage = message || 'Unknown Error';\n    result.errorCode = defaultErrorCode;\n    result.error = error;\n\n    return result;\n  }\n\n  sanitizePaymentProviderWithdrawResult(): PaymentProviderChannelWithdrawResult {\n    delete this.providerId;\n    return this;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsEnum, IsInt, IsNotEmpty, IsString } from 'class-validator';\nimport { PaymentStatusResponseDto } from '../../payment.status.response.dto';\n\nexport enum XingChenWithdrawStatusEnum {\n  PENDING = 0, //初始状态，处理中\n  SUCCESS, // 提现代付成功\n  FAILED, // 提现代付失败\n}\n\nexport class XingChenWithdrawStatusResponseDto extends PaymentStatusResponseDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  mch_id: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  order_id: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsInt()\n  @Transform((params) => Number(params.value))\n  amount: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bank: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bank_site: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bank_account: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bank_account_name: string;\n\n  @ApiPropertyOptional()\n  @IsNotEmpty()\n  @IsString()\n  pay_time: string;\n\n  @ApiProperty({\n    enum: XingChenWithdrawStatusEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(XingChenWithdrawStatusEnum)\n  @IsInt()\n  pay_status: XingChenWithdrawStatusEnum;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  time_stamp: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  sign: string;\n}\n","import { Body, Controller, Inject, Logger, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n  apiEndpointDecriptionEnum,\n  apiPathsEnum,\n  apiTagsEnum,\n} from '@workspace/enums';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { XingChenDepositStatusResponseDto } from './dto/xingchen.deposit.status.response.dto';\nimport { XingChenWithdrawStatusResponseDto } from './dto/xingchen.withdraw.status.response.dto';\nimport { XingChenPaymentProviderService } from './xingchen.payment.provider.service';\nimport { RequestIpAddress } from '../../../../decorators/request.ip.decorators';\n\n@Controller(apiPathsEnum.payment)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class XingChenPaymentProviderController {\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    private xingChenPaymentProviderService: XingChenPaymentProviderService\n  ) {}\n\n  @Post(apiPathsEnum.xingchencallbackDeposit)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.depositXingChenCallback,\n  })\n  async depositCallback(\n    @Body() paymentStatusResponse: XingChenDepositStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    return this.xingChenPaymentProviderService.depositCallback(\n      paymentStatusResponse,\n      ip\n    );\n  }\n\n  @Post(apiPathsEnum.xingchencallbackWithdraw)\n  @ApiOperation({\n    description: apiEndpointDecriptionEnum.withdrawXingChenCallback,\n  })\n  async withdrawCallback(\n    @Body() withdrawStatusResponse: XingChenWithdrawStatusResponseDto,\n    @RequestIpAddress() ip: string\n  ): Promise<string> {\n    return this.xingChenPaymentProviderService.withdrawCallback(\n      withdrawStatusResponse,\n      ip\n    );\n  }\n}\n","import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as MobileDetect from 'mobile-detect';\nimport * as moment from 'moment';\nimport * as numeral from 'numeral';\nimport * as md5 from 'md5';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Transaction } from 'sequelize';\nimport { PaymentProviderEnum, OrderStatusEnum } from '@workspace/enums';\nimport { ChannelService } from '../../../channel/channel.service';\nimport { DepositOrderService } from '../../../order/deposit-order/deposit.order.service';\nimport { DepositPendingOrderService } from '../../../order/deposit-pending-order/deposit.pending.order.service';\nimport { WithdrawOrderService } from '../../../order/withdraw-order/withdraw.order.service';\nimport { WithdrawPendingOrderService } from '../../../order/withdraw-pending-order/withdraw.pending.order.service';\nimport {\n  PaymentProviderException,\n  NotSupportedBank,\n} from '../../../payment.exception';\nimport { PaymentProviderBankService } from '../../payment-provider-bank/payment.provider.bank.service';\nimport { PaymentProviderChannelService } from '../../payment-provider-channel/payment.provider.channel.service';\nimport { PaymentProviderDepositRequestDto } from '../payment.provider.deposit.request.dto';\nimport {\n  PaymentProviderChannelDepositResult,\n  PaymentProviderDepositResult,\n} from '../payment.provider.deposit.result';\nimport {\n  PaymentProviderChannelDepositResultBundle,\n  PaymentProviderService,\n  PaymentProviderChannelWithdrawResultBundle,\n} from '../payment.provider.service';\nimport {\n  PaymentProviderChannelWithdrawResult,\n  PaymentProviderWithdrawResult,\n} from '../payment.provider.withdraw.result';\nimport { XingChenDepositRequestParams } from './dto/xingchen.deposit.request.params';\nimport {\n  XingChenChannelDepositResult,\n  XingChenDepositResult,\n} from './dto/xingchen.deposit.result';\nimport {\n  XingChenDepositStatusResponseDto,\n  XingChenDepositStatusEnum,\n} from './dto/xingchen.deposit.status.response.dto';\nimport { XingChenWithdrawRequestParams } from './dto/xingchen.withdraw.request.params';\nimport {\n  XingChenChannelWithdrawResult,\n  XingChenWithdrawResult,\n} from './dto/xingchen.withdraw.result';\nimport {\n  XingChenWithdrawStatusResponseDto,\n  XingChenWithdrawStatusEnum,\n} from './dto/xingchen.withdraw.status.response.dto';\nimport { DepositPendingOrderModel } from '../../../../models/deposit.pending.order.model';\nimport { PaymentProviderChannelModel } from '../../../../models/payment.provider.channel.model';\nimport { BetConstructService } from '../../../betContruct/betConstruct.service';\nimport { BankService } from '../../../bank/bank.service';\nimport { PaymentProviderWithdrawRequestDto } from '../payment.provider.withdraw.request.dto';\nimport { PaymentProviderCardService } from '../../payment-provider-card/payment.provider.card.service';\nimport { PaymentProviderEntityService } from '../../payment-provider-entity/Payment.provider.entity.service';\nimport { PaymentProviderSharedService } from '../../payment-provider-shared/payment.provider.shared.service';\nimport { PaymentProviderUsdtProtoService } from '../../payment-provider-usdt-protocol/payment.provider.usdt.proto.service';\nimport { PaymentProviderUsdtProtocolModel } from '../../../../models/payment.provider.usdt.protocol.model';\nimport { OptionsService } from '../../../../options/options.service';\nimport { ErrorCodeEnum } from '../../../../error/enums/errorCodeEnum';\n\nexport enum XingChenDepositCallbackResultEnum {\n  SUCCESS = 'SUCCESS',\n  FAILED = 'FAILED',\n}\n\nexport enum XingChenWithdrawCallbackResultEnum {\n  SUCCESS = 'SUCCESS',\n  FAILED = 'FAILED',\n}\n\n@Injectable()\nexport class XingChenPaymentProviderService extends PaymentProviderService {\n  constructor(\n    protected configService: ConfigService,\n    protected channelService: ChannelService,\n    protected bankService: BankService,\n    protected depositPendingOrderService: DepositPendingOrderService,\n    protected depositOrderService: DepositOrderService,\n    protected withdrawPendingOrderService: WithdrawPendingOrderService,\n    protected withdrawOrderService: WithdrawOrderService,\n    protected paymentProviderChannelService: PaymentProviderChannelService,\n    protected paymentProviderBankService: PaymentProviderBankService,\n    protected paymentProviderUsdtProtoService: PaymentProviderUsdtProtoService,\n    protected paymentProviderCardService: PaymentProviderCardService,\n    protected payProviderEntityService: PaymentProviderEntityService,\n    protected paymentProviderSharedService: PaymentProviderSharedService,\n    protected sequelize: Sequelize,\n    protected betConstructService: BetConstructService,\n    protected optionsService: OptionsService,\n    private httpService: HttpService\n  ) {\n    super(\n      configService,\n      channelService,\n      bankService,\n      depositPendingOrderService,\n      depositOrderService,\n      withdrawPendingOrderService,\n      withdrawOrderService,\n      paymentProviderChannelService,\n      paymentProviderBankService,\n      paymentProviderUsdtProtoService,\n      paymentProviderCardService,\n      payProviderEntityService,\n      paymentProviderSharedService,\n      sequelize,\n      betConstructService,\n      optionsService\n    );\n  }\n\n  getPaymentProviderEnum(): PaymentProviderEnum {\n    return PaymentProviderEnum.XINGCHEN;\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n    // const host = this.configService.get<string>('XINGCHEN_HOST');\n    // const url_available = this.configService.get<string>(\n    //   'XINGCHEN_DEPOSIT_URL'\n    // );\n    // try {\n    //   const response = await this.httpService\n    //     .post(`http://${host}/${url_available}`, {})\n    //     .toPromise();\n    //   return response.status === 200;\n    // } catch (error) {\n    //   return false;\n    // }\n  }\n\n  public depositErrorFactory(error): PaymentProviderDepositResult {\n    return XingChenDepositResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('xingchen.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  public withdrawErrorFactory(error: any): PaymentProviderWithdrawResult {\n    return XingChenWithdrawResult.errorFactory(\n      error,\n      this.getPaymentProviderName(),\n      this.configService.get<string>('uzpay.DEFAULT_ERROR_CODE')\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Deposit Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  public async depositByPaymentProviderChannel(\n    depositRequest: PaymentProviderDepositRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    paymentProviderUsdtProto: PaymentProviderUsdtProtocolModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelDepositResultBundle> {\n    const channelDepositResultBundle = new PaymentProviderChannelDepositResultBundle();\n\n    let depositResult: XingChenChannelDepositResult;\n    let order: DepositPendingOrderModel;\n\n    const channelDepositResultDefault = { providerName: this.getPaymentProviderName() };\n\n    order = await this.createOrderBeforeDeposit(\n      depositRequest,\n      paymentProviderChannel,\n      transaction\n    );\n    if (!order) {\n      return {\n        depositResult: { ...channelDepositResultDefault, result: false, code: ErrorCodeEnum.DEPOSIT_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const params = new XingChenDepositRequestParams();\n\n    params.amount = order.amount * 100;\n    params.channel_id = paymentProviderChannel.providerChannelName;\n    params.client_ip = depositRequest.ip;\n    params.mch_id = this.configService.get<string>('XINGCHEN_MCH_ID');\n\n    params.notify_url =\n      this.getBaseUrl(depositRequest.headers['host']) +\n      this.configService.get<string>('xingchen.DEPOSIT_SUCCESS_URL');\n\n    params.order_id = order.orderId;\n\n    const md = new MobileDetect(depositRequest.headers['user-agent']);\n    params.platform = md.mobile() ? 'mobile' : 'pc';\n\n    params.time_stamp = `${moment().unix()}`;\n    params.sign = this.getDepositRequestSign(\n      params,\n      this.configService.get<string>('XINGCHEN_KEY')\n    );\n\n    //console.log(params, 'XingChenRequestParams');\n\n    const host = this.configService.get<string>('XINGCHEN_HOST');\n    const url = this.configService.get<string>('XINGCHEN_DEPOSIT_URL');\n    const response = await this.httpService\n      .post(`http://${host}/${url}`, params)\n      .toPromise();\n\n    //console.log(response.data, 'XingChenResponse');\n\n    depositResult = XingChenChannelDepositResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!depositResult) {\n      return null;\n    }\n\n    depositResult.channelRequestTime = moment()\n      .utcOffset('+08:00')\n      .format('YYYY-MM-DD HH:mm:ss');\n    depositResult.channelRequestJson = JSON.stringify(params);\n    depositResult.channelResponseJson = JSON.stringify(response.data);\n\n    channelDepositResultBundle.depositResult = depositResult;\n    channelDepositResultBundle.order = order;\n\n    return channelDepositResultBundle;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Deposit Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async depositCallback(\n    depositStatusResponse: XingChenDepositStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    if (!(await this.beforeDepositCallback(depositStatusResponse, ip))) {\n      return XingChenDepositCallbackResultEnum.FAILED;\n    }\n\n    const mch_id = this.configService.get<string>('XINGCHEN_MCH_ID');\n    if (mch_id !== depositStatusResponse.mch_id) {\n      return XingChenDepositCallbackResultEnum.FAILED;\n    }\n\n    const order = await this.depositPendingOrderService.findByOrderId(\n      depositStatusResponse.order_id\n    );\n\n    if (!order) {\n      return XingChenDepositCallbackResultEnum.FAILED;\n    }\n\n    const sign = this.getDepositStatusResponseSign(\n      depositStatusResponse,\n      this.configService.get<string>('XINGCHEN_KEY')\n    );\n\n    if (sign.toUpperCase() !== depositStatusResponse.sign.toUpperCase()) {\n      return XingChenDepositCallbackResultEnum.FAILED;\n    }\n\n    if (order.amount * 100 !== depositStatusResponse.amount) {\n      return XingChenDepositCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByDepositStatus(\n      depositStatusResponse.pay_status\n    );\n\n    order.providerOrderId = depositStatusResponse.trade_no;\n\n    if (order.status === OrderStatusEnum.SUCCESS) {\n      const bcOrder = await this.depositBCAfterDepositCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterDepositCallback(order, transaction);\n      });\n    } catch (error) {\n      return XingChenWithdrawCallbackResultEnum.FAILED;\n    }\n\n    return XingChenDepositCallbackResultEnum.SUCCESS;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Implement Withdraw Procedure\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawByPaymentProviderChannel(\n    withdrawRequest: PaymentProviderWithdrawRequestDto,\n    paymentProviderChannel: PaymentProviderChannelModel,\n    transaction: Transaction\n  ): Promise<PaymentProviderChannelWithdrawResultBundle> {\n    const withdrawProcResult = new PaymentProviderChannelWithdrawResultBundle();\n\n    let withdrawResult: XingChenChannelWithdrawResult;\n\n    const channelWithdrawResultDefault = { providerName: this.getPaymentProviderName() };\n\n    const order = await this.createOrderBeforeWithdraw(\n      withdrawRequest,\n      transaction\n    );\n    if (!order) {\n      return {\n        withdrawResult: { ...channelWithdrawResultDefault, result: false, code: ErrorCodeEnum.WITHDRAW_PROVIDER_ORDER_NOT_CREATED },\n        order: null\n      };\n    }\n\n    const paymentProviderBank = await this.getPaymentProviderBank(\n      withdrawRequest.bankCode\n    );\n    if (!paymentProviderBank) {\n      throw new NotSupportedBank();\n    }\n\n    const params = new XingChenWithdrawRequestParams();\n\n    params.mch_id = this.configService.get<string>('XINGCHEN_MCH_ID');\n    params.order_id = order.orderId;\n    params.amount = order.amount * 100;\n    params.notify_url =\n      this.getBaseUrl(withdrawRequest.headers['host']) +\n      this.configService.get<string>('xingchen.WITHDRAWAL_SUCCESS_URL');\n    params.passwd = md5(\n      this.configService.get<string>('XINGCHEN_WITHDRAW_PASSWORD')\n    );\n    params.bank = paymentProviderBank.paymentProviderBankCode;\n\n    params.bank_site =\n      !withdrawRequest.branch || !withdrawRequest.branch.trim()\n        ? paymentProviderBank.paymentProviderBankName\n        : withdrawRequest.branch;\n\n    params.bank_account = withdrawRequest.bankAccountNumber;\n    params.bank_account_name = withdrawRequest.bankAccountName;\n    params.time_stamp = `${moment().unix()}`;\n    params.sign = this.getWithdrawRequestSign(\n      params,\n      this.configService.get<string>('XINGCHEN_KEY')\n    );\n\n    const host = this.configService.get<string>('XINGCHEN_HOST');\n    const url = this.configService.get<string>('XINGCHEN_WITHDRAW_URL');\n\n    const response = await this.httpService\n      .post(`http://${host}/${url}`, params)\n      .toPromise();\n\n    withdrawResult = XingChenChannelWithdrawResult.responseFactory(\n      response,\n      this.getPaymentProviderName()\n    );\n\n    if (!withdrawResult.result) {\n      withdrawResult.code = ErrorCodeEnum.WITHDRAW_PROVIDER_FAILED;\n    }\n\n    withdrawProcResult.withdrawResult = withdrawResult;\n    withdrawProcResult.order = order;\n\n    return withdrawProcResult;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Withdraw Callback\n  ////////////////////////////////////////////////////////////////////////////////\n  async withdrawCallback(\n    withdrawStatusResponse: XingChenWithdrawStatusResponseDto,\n    ip: string\n  ): Promise<string> {\n    if (!(await this.beforeWithdrawCallback(withdrawStatusResponse, ip))) {\n      return XingChenWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const mch_id = this.configService.get<string>('XINGCHEN_MCH_ID');\n    if (mch_id !== withdrawStatusResponse.mch_id) {\n      return XingChenWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const order = await this.withdrawPendingOrderService.findByOrderId(\n      withdrawStatusResponse.order_id\n    );\n\n    if (!order) {\n      return XingChenWithdrawCallbackResultEnum.FAILED;\n    }\n\n    const sign = this.getWithdrawStatusResponseSign(\n      withdrawStatusResponse,\n      this.configService.get<string>('XINGCHEN_KEY')\n    );\n\n    if (sign.toUpperCase() !== withdrawStatusResponse.sign.toUpperCase()) {\n      return XingChenWithdrawCallbackResultEnum.FAILED;\n    }\n\n    if (order.amount * 100 !== withdrawStatusResponse.amount) {\n      return XingChenWithdrawCallbackResultEnum.FAILED;\n    }\n\n    order.status = this.getOrderStatusByWithdrawStatus(\n      withdrawStatusResponse.pay_status\n    );\n\n    if (\n      order.status ===\n      OrderStatusEnum.SUCCESS /* ||\n      order.status === OrderStatusEnum.FAILED */\n    ) {\n      await this.withdrawBCAfterWithdrawCallback(order);\n    }\n\n    try {\n      await this.sequelize.transaction(async (transaction: Transaction) => {\n        await this.updateOrderAfterWithdrawCallback(order, transaction);\n      });\n    } catch (error) {\n      return XingChenWithdrawCallbackResultEnum.FAILED;\n    }\n\n    return XingChenWithdrawCallbackResultEnum.SUCCESS;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getDepositRequestSign(\n    params: XingChenDepositRequestParams,\n    key: string\n  ): string {\n    const txtSource =\n      `amount=${params.amount}` +\n      `&channel_id=${params.channel_id}` +\n      `&client_ip=${params.client_ip}` +\n      `&mch_id=${params.mch_id}` +\n      `&notify_url=${params.notify_url}` +\n      `&order_id=${params.order_id}` +\n      `&platform=${params.platform}` +\n      `&time_stamp=${params.time_stamp}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Withdraw Request Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawRequestSign(params: XingChenWithdrawRequestParams, key: string) {\n    const txtSource =\n      `amount=${params.amount}` +\n      `&bank=${params.bank}` +\n      `&bank_account=${params.bank_account}` +\n      `&bank_account_name=${params.bank_account_name}` +\n      `&bank_site=${params.bank_site}` +\n      `&mch_id=${params.mch_id}` +\n      `&notify_url=${params.notify_url}` +\n      `&order_id=${params.order_id}` +\n      `&passwd=${params.passwd}` +\n      `&time_stamp=${params.time_stamp}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Deposit Status Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getDepositStatusResponseSign(\n    paymentStatus: XingChenDepositStatusResponseDto,\n    key: string\n  ): string {\n    const txtSource =\n      `amount=${paymentStatus.amount}` +\n      `&bank_mark=${paymentStatus.bank_mark}` +\n      `&mch_id=${paymentStatus.mch_id}` +\n      `&order_id=${paymentStatus.order_id}` +\n      `&pay_status=${paymentStatus.pay_status}` +\n      (paymentStatus.pay_time.length > 0\n        ? `&pay_time=${paymentStatus.pay_time}`\n        : '') +\n      `&time_stamp=${paymentStatus.time_stamp}` +\n      `&trade_no=${paymentStatus.trade_no}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Withdraw Status Sign\n  ////////////////////////////////////////////////////////////////////////////////\n  getWithdrawStatusResponseSign(\n    withdrawStatus: XingChenWithdrawStatusResponseDto,\n    key: string\n  ): string {\n    const txtSource =\n      `amount=${withdrawStatus.amount}` +\n      `&bank=${withdrawStatus.bank}` +\n      `&bank_account=${withdrawStatus.bank_account}` +\n      `&bank_account_name=${withdrawStatus.bank_account_name}` +\n      `&bank_site=${withdrawStatus.bank_site}` +\n      `&mch_id=${withdrawStatus.mch_id}` +\n      `&order_id=${withdrawStatus.order_id}` +\n      `&pay_status=${withdrawStatus.pay_status}` +\n      `&pay_time=${withdrawStatus.pay_time}` +\n      `&time_stamp=${withdrawStatus.time_stamp}` +\n      `&key=${key}`;\n\n    const txtDecryption = md5(txtSource);\n\n    return txtDecryption;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get OrderStatus By DepositStatus\n  ////////////////////////////////////////////////////////////////////////////////\n  getOrderStatusByDepositStatus(argDepositStatus: {}): OrderStatusEnum {\n    let orderStatus: OrderStatusEnum = OrderStatusEnum.NEW;\n    const depositStatus = <XingChenDepositStatusEnum>argDepositStatus;\n\n    switch (depositStatus) {\n      case XingChenDepositStatusEnum.SUCCESS:\n        orderStatus = OrderStatusEnum.SUCCESS;\n        break;\n      case XingChenDepositStatusEnum.PENDING:\n        orderStatus = OrderStatusEnum.PENDING;\n        break;\n      case XingChenDepositStatusEnum.FAILED:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n    }\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get OrderStatus By WithdrawStatus\n  ////////////////////////////////////////////////////////////////////////////////\n  getOrderStatusByWithdrawStatus(argWithdrawStatus: {}): OrderStatusEnum {\n    let orderStatus = OrderStatusEnum.NEW;\n    const withdrawStatus = <XingChenWithdrawStatusEnum>argWithdrawStatus;\n\n    switch (withdrawStatus) {\n      case XingChenWithdrawStatusEnum.SUCCESS:\n        orderStatus = OrderStatusEnum.SUCCESS;\n        break;\n      case XingChenWithdrawStatusEnum.PENDING:\n        orderStatus = OrderStatusEnum.PENDING;\n        break;\n      case XingChenWithdrawStatusEnum.FAILED:\n        orderStatus = OrderStatusEnum.FAILED;\n        break;\n    }\n\n    return orderStatus;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel DepositResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelDepositResult(\n    paymentProviderChannel: PaymentProviderChannelModel,\n    depositRequest: PaymentProviderDepositRequestDto,\n    depositResult: PaymentProviderChannelDepositResult\n  ): boolean {\n    const errorCode = depositResult\n      ? numeral(depositResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('xingchen.DEPOSIT_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  /// Get Frozen Status By Channel WithdrawResult\n  ////////////////////////////////////////////////////////////////////////////////\n  protected getFrozenByChannelWithdrawResult(\n    withdrawResult: PaymentProviderChannelWithdrawResult\n  ): boolean {\n    const errorCode = withdrawResult\n      ? numeral(withdrawResult.errorCode).value()\n      : null;\n    if (errorCode === null) {\n      return false;\n    }\n\n    const frozenCodes =\n      this.configService.get<number[]>('xingchen.WITHDRAW_FROZEN_CODE') || [];\n\n    return (\n      frozenCodes.filter((frozenCode) => frozenCode === errorCode).length > 0\n    );\n  }\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsIn, IsNumber, IsOptional } from 'class-validator';\n\nexport class UsdtProtoGetRequestDto {}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { JwtAuthGuard } from '../../auth/jwt-auth.guard';\nimport { UsdtProtoGetRequestDto } from './dto/usdt.proto.get.request.dto';\nimport { UsdtProtoService } from './usdt.proto.service';\n\n@Controller(apiPathsEnum.usdtProto)\n@ApiTags(apiTagsEnum.paymentEndpoints)\nexport class UsdtProtoController {\n  constructor(private usdtProtoService: UsdtProtoService) {}\n\n  @Get(apiPathsEnum.getUsdtProtos)\n  // @UseGuards(JwtAuthGuard)\n  // @ApiBearerAuth()\n  gets(@Query() query: UsdtProtoGetRequestDto) {\n    return this.usdtProtoService.findAllByQuery(query);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { UsdtProtocolModel } from '../../models/usdtProtocol';\nimport { UsdtProtoController } from './usdt.proto.controller';\nimport { UsdtProtoService } from './usdt.proto.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([UsdtProtocolModel])],\n  providers: [UsdtProtoService],\n  controllers: [UsdtProtoController],\n  exports: [UsdtProtoService],\n})\nexport class UsdtProtoModule {}\n","import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { FindOptions, QueryTypes } from 'sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { UsdtProtocolModel } from '../../models/usdtProtocol';\nimport { UsdtProtoGetRequestDto } from './dto/usdt.proto.get.request.dto';\nimport { DepositableUsdtProto } from '../dto/depositable.usdtproto';\nimport * as moment from 'moment-timezone';\nimport * as numeral from 'numeral';\n\n@Injectable()\nexport class UsdtProtoService {\n  constructor(\n    private configService: ConfigService,\n    private sequelize: Sequelize,\n\n    @InjectModel(UsdtProtocolModel)\n    private usdtProtoRepository: typeof UsdtProtocolModel\n  ) { }\n\n  async findOne(options?: FindOptions): Promise<UsdtProtocolModel> {\n    return this.usdtProtoRepository.findOne(options);\n  }\n\n  async findAll(options?: FindOptions): Promise<UsdtProtocolModel[]> {\n    return this.usdtProtoRepository.findAll(options);\n  }\n\n  async findById(usdtId: number): Promise<UsdtProtocolModel> {\n    return this.usdtProtoRepository.findByPk(usdtId);\n  }\n\n  public async findAllByQuery(query: UsdtProtoGetRequestDto) {\n    const findOptions: FindOptions = {\n      include: [],\n      order: [['id', 'asc']],\n    },\n      where: {} = {};\n\n    findOptions.where = where;\n\n    return this.usdtProtoRepository.findAll(findOptions);\n  }\n\n  public async getDepositables(\n    frozenRestrict: boolean\n  ): Promise<DepositableUsdtProto[]> {\n    const depositableUsdtProtos: DepositableUsdtProto[] = [];\n\n    let sqlFrozenFlexible = ``;\n\n    if (!frozenRestrict) {\n      const frozenPeriod = this.configService.get<number>('FROZEN_PERIOD');\n      const frozenPeriodBegin = moment()\n        .subtract(frozenPeriod, 'minutes')\n        .format();\n      const frozenPeriodEnd = moment().add(frozenPeriod, 'minutes').format();\n      sqlFrozenFlexible = `and ( not \"ppc\".\"isFrozen\" or \"ppc\".\"frozenCheckedDate\" not between '${frozenPeriodBegin}' and '${frozenPeriodEnd}' )`;\n    } else {\n      sqlFrozenFlexible = `and not \"ppc\".\"isFrozen\"`;\n    }\n\n    const sqlIsAvailable = `\"pp\".\"isDepositSupport\" and \"ppc\".\"isActive\" and \"ppc\".\"isAvailable\" ${sqlFrozenFlexible}`;\n    const sql = `\n      select \n          up.id, up.\"usdtProtoName\" ,\n          bool_or(${sqlIsAvailable}) \"isAvailable\",\n          min(case when (${sqlIsAvailable}) then \"ppc\".\"providerMinAmount\" end) \"minAmount\",\n          max(case when (${sqlIsAvailable}) then \"ppc\".\"providerMaxAmount\" end) \"maxAmount\"\n        from \"usdtProtocol\" up \n        left join \"paymentProviderUsdtProtocol\" ppup on up.id  = ppup.\"usdtProtoId\" and ppup.\"depositOrWithdrawable\"=1\n        left join \"paymentProviders\" pp on ppup.\"paymentProviderId\" = pp.id \n        left join channel c on c.\"fromPaymentSystemId\" = 5 and c.\"depositOrWithdrawable\" = 1\n        left join \"paymentProviderChannel\" ppc on ppup.\"paymentProviderId\" = ppc.\"paymentProviderId\" and c.id = ppc.\"channelId\" \n        group by up.\"id\"\n\t  `;\n\n    const items = await this.sequelize.query(sql, {\n      type: QueryTypes.SELECT,\n    });\n\n    for (let i = 0; i < items.length; i++) {\n      const item = <\n        {\n          id: number;\n          usdtProtoName: string;\n          isAvailable: boolean;\n          minAmount: string;\n          maxAmount: string;\n        }\n        >(<unknown>items[i]);\n\n      const depositableUsdtProto = new DepositableUsdtProto();\n\n      depositableUsdtProto.id = item.id;\n      depositableUsdtProto.usdtProtoName = item.usdtProtoName;\n      depositableUsdtProto.isAvailable = item.isAvailable;\n      depositableUsdtProto.minAmount = numeral(item.minAmount).value();\n      depositableUsdtProto.maxAmount = numeral(item.maxAmount).value();\n\n      depositableUsdtProtos.push(depositableUsdtProto);\n    }\n\n    return depositableUsdtProtos;\n  }\n}\n","import { BullModule } from '@nestjs/bull';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { BetConstructModule } from '../../payment/betContruct/betConsturct.module';\nimport { KSportModule } from '../../stream/ksport/ksport.module';\nimport configuration from './configuration';\nimport { StreamingMatchBcRequests } from './streaming-match/streaming-match.bc-requests';\nimport { StreamingMatchConsumerService } from './streaming-match/streaming-match.consumer.service';\nimport { StreamingMatchProducerService } from './streaming-match/streaming-match.producer.service';\n\n@Module({\n  // imports: [\n  //   ConfigModule.forRoot({\n  //     load: [configuration],\n  //   }),\n  //   BullModule.registerQueue({\n  //     name: 'streaming-matching',\n  //   }),\n  //   KSportModule,\n  //   BetConstructModule,\n  // ],\n  // providers: [\n  //   StreamingMatchProducerService,\n  //   StreamingMatchConsumerService,\n  //   StreamingMatchBcRequests,\n  // ],\n})\nexport class CmsQueueModule {}\n","import { Module } from '@nestjs/common';\nimport { CmsQueueModule } from './cms-queue/cms-queue.module';\n\n@Module({\n  imports: [CmsQueueModule],\n})\nexport class RunnerModule {}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { LocaleEnum } from '@workspace/enums';\nimport { Type } from 'class-transformer';\nimport { IsEnum, IsNotEmpty, IsString, IsInt, ValidateNested } from 'class-validator';\nimport { SortDirectionEnum } from '../enums/SortDirectionEnum';\n\nexport class SortItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  property: string;\n\n  @ApiProperty({\n    enum: SortDirectionEnum,\n  })\n  @IsEnum(SortDirectionEnum)\n  @IsNotEmpty()\n  direction: string;\n}\n\nexport type FilterItemValue = string | number\n\nexport class FilterItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  key: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  value: FilterItemValue;\n}\n\nexport class SearchDto {\n  @ApiProperty({})\n  @IsInt()\n  page: number;\n\n  @ApiProperty({})\n  @IsInt()\n  pageSize: number;\n\n  @ApiProperty({\n    type: [FilterItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => FilterItem)\n  filters: FilterItem[];\n\n  @ApiProperty({\n    type: [SortItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => SortItem)\n  sorts: SortItem[];\n}\n","export enum SortDirectionEnum {\n  ASC = \"asc\",\n  DESC = \"desc\"\n}\n","export default () => ({\n  ksport: {\n    DIFFHOURSMAX: 8,\n    stream: {\n      validDurationBeforePlaying: 20, // Streamng Valid duration(minutes) Before Playing game\n      durationForRemoveLast: 2, // hours duration for removing last candidate\n    },\n  },\n  //DIR_PATH: 'streamtmp',\n});\n","import { ApiProperty } from '@nestjs/swagger';\n\nimport { SportsEnum } from '@workspace/enums';\nimport { IsNotEmpty } from 'class-validator';\nimport { KSportResultItemDto } from './ksport.result.item.dto';\n\nimport * as moment from 'moment-timezone';\nimport { BCItemDto } from './ksport.build.candidateevent.request.dto';\nimport { BCToKSportCreateItem } from './ksport.create.candidateevent.request.dto';\n\nexport class CreateBCToKSportDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  sportType: SportsEnum;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  matchScore: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  correct: boolean;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  isManual: boolean;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  isKilled: boolean;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  isStreamCn: boolean;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  isStreamHd: boolean;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  streamState: boolean;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcEventTime: Date;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcTeamId1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcTeamId2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcTeamName1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcTeamName2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportEventTime: Date;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportTeamId1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportTeamId2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportTeamName1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportTeamName2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportStreamId: string;\n\n  public static createRequestFactory(\n    request: BCToKSportCreateItem\n  ): CreateBCToKSportDto {\n    const item = new CreateBCToKSportDto();\n\n    item.id = `${request.bcEventId}-${request.kSportEventId}`;\n\n    item.sportType = request.sport;\n\n    item.bcEventId = request.bcEventId;\n    item.kSportEventId = request.kSportEventId;\n\n    item.matchScore = request.matchScore;\n    item.correct = request.correct;\n    item.streamState = request.streamState;\n\n    item.bcEventTime = moment\n      .tz(request.bcEventTime, 'YYYY-MM-DD HH:mm', 'Asia/Shanghai')\n      .toDate();\n    item.kSportEventTime = moment\n      .tz(request.kSportEventTime, 'YYYY-MM-DD HH:mm', 'Asia/Shanghai')\n      .toDate();\n\n    item.bcTeamId1 = request.bcTeamId1;\n    item.bcTeamId2 = request.bcTeamId2;\n    item.kSportTeamId1 = request.kSportTeamId1;\n    item.kSportTeamId2 = request.kSportTeamId2;\n\n    item.bcTeamName1 = request.bcTeamName1;\n    item.bcTeamName2 = request.bcTeamName2;\n    item.kSportTeamName1 = request.bcTeamName1;\n    item.kSportTeamName2 = request.bcTeamName2;\n\n    item.kSportStreamId = request.kSportStreamId;\n\n    const streamIdTokens = request.kSportStreamId.match(\n      /^stream(cn)?(hd)?([0-9]+)$/i\n    );\n\n    item.isStreamCn =\n      streamIdTokens &&\n      streamIdTokens[1] &&\n      streamIdTokens[1].toUpperCase() === 'CN'\n        ? true\n        : false;\n\n    item.isStreamHd =\n      streamIdTokens &&\n      streamIdTokens[2] &&\n      streamIdTokens[2].toUpperCase() === 'HD'\n        ? true\n        : false;\n\n    item.isManual = false;\n\n    return item;\n  }\n\n  public static factory(\n    sportType: SportsEnum,\n    bcItem: BCItemDto,\n    ksportItem: KSportResultItemDto,\n    matchScore: number,\n    correct: boolean\n  ): CreateBCToKSportDto {\n    const item = new CreateBCToKSportDto();\n\n    item.id = `${bcItem.bcEventId}-${ksportItem.vid}`;\n\n    item.sportType = sportType;\n\n    item.bcEventId = bcItem.bcEventId;\n    item.bcEventTime = moment\n      .tz(bcItem.bcEventTime, 'YYYY-MM-DD HH:mm', 'Asia/Shanghai')\n      .toDate();\n    item.bcTeamId1 = bcItem.bcTeamId1;\n    item.bcTeamId2 = bcItem.bcTeamId2;\n    item.bcTeamName1 = bcItem.bcTeamName1;\n    item.bcTeamName2 = bcItem.bcTeamName2;\n\n    item.kSportEventId = ksportItem.vid;\n    item.kSportEventTime = moment\n      .unix(ksportItem.Matchtime)\n      .utcOffset('+08:00')\n      .toDate();\n    item.kSportTeamId1 = ksportItem.Opp1ID;\n    item.kSportTeamId2 = ksportItem.Opp2ID;\n    item.kSportTeamName1 = ksportItem.Opp1;\n    item.kSportTeamName2 = ksportItem.Opp2 === 'NULL' ? null : ksportItem.Opp2;\n    item.kSportStreamId = ksportItem.StreamName;\n\n    const streamIdTokens = item.kSportStreamId.match(\n      /^stream(cn)?(hd)?([0-9]+)$/i\n    );\n\n    item.isStreamCn =\n      streamIdTokens &&\n      streamIdTokens[1] &&\n      streamIdTokens[1].toUpperCase() === 'CN'\n        ? true\n        : false;\n\n    item.isStreamHd =\n      streamIdTokens &&\n      streamIdTokens[2] &&\n      streamIdTokens[2].toUpperCase() === 'HD'\n        ? true\n        : false;\n\n    item.matchScore = matchScore;\n    item.correct = correct;\n    item.streamState = ksportItem.StreamInfo.state;\n\n    item.isManual = false;\n\n    return item;\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { KSportMatchRequest } from './ksport.match.request.dto';\n\nexport class CreateBCToKSportTeamDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  betTeamId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  betTeamName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  KSportTeamId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  KSportTeamName: string;\n\n  public static matchRequestFactory(\n    matchRequest: KSportMatchRequest\n  ): CreateBCToKSportTeamDto {\n    const item = new CreateBCToKSportTeamDto();\n\n    item.betTeamId = matchRequest.betTeamId;\n    item.betTeamName = matchRequest.betTeamName;\n    item.KSportTeamId = matchRequest.KSportTeamId;\n    item.KSportTeamName = matchRequest.KSportTeamName;\n\n    return item;\n  }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { SportsEnum } from '@workspace/enums';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsString,\n  Matches,\n  IsEnum,\n  ValidateNested,\n  IsOptional,\n} from 'class-validator';\n\nexport class BCItemDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcTeamId1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcTeamName1: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  bcTeamId2: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  bcTeamName2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @Matches(/^[0-9]{4}-[0-2][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]$/i)\n  bcEventTime: string;\n}\n\nexport class KSportBuildCandidateEventRequestDto {\n  @ApiProperty({\n    enum: SportsEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(SportsEnum)\n  sport: string;\n\n  @ApiProperty({\n    type: [BCItemDto],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => BCItemDto)\n  bcItems: BCItemDto[];\n}\n","export class KSportItemResponse {\n  kSportEventId: string;\n}\nexport class BcItemResponse {\n  bcEventId: string;\n  kSportItems: KSportItemResponse[];\n}\n\nexport class KSportBuildCandidateEventResponseDto {\n  result: boolean;\n  bcItems: BcItemResponse[];\n  ksportresultLength: number;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { SportsEnum } from '@workspace/enums';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\n\nexport class KSportBuildStreamStateRequestDto {\n  @ApiProperty({\n    enum: SportsEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(SportsEnum)\n  sport: SportsEnum;\n}\n","export class KSportBuildStreamStateResponseDto {\n  result: boolean;\n  message: string;\n  numKSportResults: number;\n  numKSportResultsApplied: number;\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class KSportBuildStreamStateSomeRequestDto {\n  @ApiProperty()\n  bcEventIDs: string[];\n}\n","export class KSportBuildStreamStateSomeResponseDto {\n  result: boolean;\n  message: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { SportsEnum } from '@workspace/enums';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsString,\n  Matches,\n  IsEnum,\n  ValidateNested,\n  IsOptional,\n  IsNumberString,\n  IsBooleanString,\n  IsBoolean,\n  IsNumber,\n} from 'class-validator';\n\nexport class BCToKSportCreateItem {\n  @ApiProperty({\n    enum: SportsEnum,\n  })\n  @IsNotEmpty()\n  @IsEnum(SportsEnum)\n  sport: SportsEnum;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  kSportEventId: string;\n\n  @ApiProperty({\n    default: false,\n  })\n  @IsNotEmpty()\n  @IsBoolean()\n  correct: boolean;\n\n  @ApiPropertyOptional({\n    default: false,\n  })\n  @IsOptional()\n  @IsBoolean()\n  isKilled: boolean;\n\n  @ApiPropertyOptional({\n    default: false,\n  })\n  @IsOptional()\n  @IsBoolean()\n  streamState: boolean;\n\n  @ApiProperty({\n    default: 0,\n  })\n  @IsNotEmpty()\n  @IsNumber()\n  matchScore: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcTeamId1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcTeamName1: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  bcTeamId2: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  bcTeamName2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @Matches(/^[0-9]{4}-[0-2][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]$/i)\n  bcEventTime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  kSportTeamId1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  kSportTeamName1: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  kSportTeamId2: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  kSportTeamName2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @Matches(/^[0-9]{4}-[0-2][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]$/i)\n  kSportEventTime: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  kSportStreamId: string;\n}\n\nexport class KSportCreateCandidateEventRequestDto {\n  @ApiProperty({\n    type: [BCToKSportCreateItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => BCToKSportCreateItem)\n  candidateEvents: BCToKSportCreateItem[];\n}\n","export class KSportCreateCandidateEventResponseDto {\n  result: boolean;\n  message: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsNotEmpty, IsString, Matches } from 'class-validator';\n\nexport class KSportDeleteCandidateEventByTimeRequestDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @Matches(/^[0-9]{4}-[0-2][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$/i)\n  untilTime: string;\n}\n","export class KSportDeleteCandidateEventByTimeResponseDto {\n  result: boolean;\n  message: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsNotEmpty, IsString, ValidateNested } from 'class-validator';\n\nexport class BCToKSportDeleteItemDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  kSportEventId: string;\n}\n\nexport class KSportDeleteCandidateEventRequestDto {\n  @ApiProperty({\n    type: [BCToKSportDeleteItemDto],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => BCToKSportDeleteItemDto)\n  candidateEvents: BCToKSportDeleteItemDto[];\n}\n","export class KSportDeleteCandidateEventResponseDto {\n  result: boolean;\n  message: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { SportsEnum } from '@workspace/enums';\nimport { IsNotEmpty, IsEnum, IsBoolean } from 'class-validator';\n\nexport class KSportFetchUpdateRequestDto {\n  @ApiProperty({\n    default: true,\n  })\n  @IsNotEmpty()\n  @IsBoolean()\n  force: boolean;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsString } from 'class-validator';\n\nimport { SportsEnum } from '@workspace/enums';\n\nexport class KSportFindCandidateTeamRequest {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEnum(SportsEnum)\n  sport: SportsEnum;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  team: string;\n}\n","export class KSportCandidate {\n  teamId: string;\n  team: string;\n}\n\nexport class KSportFindCandidateTeamResponse {\n  result: boolean;\n  datetime: string;\n  items: KSportCandidate[];\n  message: string;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { SportsEnum } from '@workspace/enums';\nimport { Transform } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsBooleanString,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsNumberString,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class KSportFindAllCandidateEventRequestDto {\n  @ApiPropertyOptional({\n    type: 'number',\n    default: 10,\n  })\n  @IsOptional()\n  @IsInt()\n  @Transform((params) => Number(params.value))\n  pageSize: number;\n\n  @ApiPropertyOptional({\n    type: 'number',\n    default: 1,\n  })\n  @IsOptional()\n  @IsInt()\n  @Transform((params) => Number(params.value))\n  page: number;\n\n  @ApiPropertyOptional({\n    enum: SportsEnum,\n  })\n  @IsOptional()\n  @IsEnum(SportsEnum)\n  sport: SportsEnum;\n\n  @ApiPropertyOptional({\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  bcEventId: string;\n\n  @ApiPropertyOptional({\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  kSportEventId: string;\n\n  @ApiPropertyOptional({\n    type: 'string',\n  })\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  bcTeamNameLike: string;\n\n  @ApiPropertyOptional({\n    type: 'boolean',\n  })\n  @IsOptional()\n  @IsBoolean()\n  @Transform((params) => /true/i.test(params.value))\n  correct: boolean;\n\n  @ApiPropertyOptional({\n    type: 'number',\n  })\n  @IsOptional()\n  @IsNumber()\n  @Transform((params) => Number(params.value))\n  lessThanMatchScore: number;\n\n  @ApiPropertyOptional({\n    type: 'number',\n  })\n  @IsOptional()\n  @IsNumber()\n  @Transform((value) => Number(value))\n  greaterThanMatchScore: number;\n}\n","import { BCToKSportModel } from '../entities/bc.ksport.entity';\n\nexport class KSportFindAllCandidateEventResponseDto {\n  total: number;\n  items: BCToKSportModel[];\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { LocaleEnum } from '@workspace/enums';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\n\nexport class KSportGetStreamStateSomeRequestDto {\n  // @ApiProperty({\n  //   enum: LocaleEnum,\n  // })\n  // @IsEnum(LocaleEnum)\n  // @IsNotEmpty()\n  // locale: string;\n\n  @ApiProperty()\n  bcEventIDs: string[];\n}\n","export class KSportGetStreamStateSomeResponseDto {\n  result: boolean;\n  message: string;\n  data: {\n    [key: string]: {\n      streamState: boolean;\n      isManual: boolean;\n      correct: boolean;\n      matchScore: number;\n    };\n  };\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class KSportMatchRequest {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  betTeamName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  betTeamId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  KSportTeamName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  KSportTeamId: string;\n}\n","export class KSportMatchResponse {\n  result: boolean;\n  message: string;\n  datetime: string;\n  data: any;\n}\n","import { StreamFindActiveRequestDto } from '@workspace/dto';\nimport { SportsEnum } from '@workspace/enums';\nimport { KSportFindCandidateTeamRequest } from './ksport.find.candidateteam.request.dto';\n\nexport class KSportRequestDto {\n  id: string;\n  key: string;\n  lng: string;\n  type: string;\n\n  static sportFactory(): KSportRequestDto {\n    const ksportRequest = new KSportRequestDto();\n\n    //ksportRequest.id = SportsEnum[sport];\n    ksportRequest.lng = 'en';\n    ksportRequest.type = 'json';\n\n    return ksportRequest;\n  }\n\n  static streamFindActiveRequestFactory(\n    streamFindActiveRequest: StreamFindActiveRequestDto,\n    key: string\n  ): KSportRequestDto {\n    const ksportRequest = new KSportRequestDto();\n\n    ksportRequest.id = `${streamFindActiveRequest.sport}`;\n    ksportRequest.key = key;\n    ksportRequest.lng = 'en';\n    ksportRequest.type = 'json';\n\n    return ksportRequest;\n  }\n\n  static ksportCandidateRequestFactory(\n    candidateRequest: KSportFindCandidateTeamRequest,\n    key: string\n  ): KSportRequestDto {\n    const ksportRequest = new KSportRequestDto();\n\n    ksportRequest.id = `${candidateRequest.sport}`;\n    ksportRequest.key = key;\n    ksportRequest.lng = 'en';\n    ksportRequest.type = 'json';\n\n    return ksportRequest;\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsBooleanString,\n  IsNotEmpty,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class BCToKSportSetCorrectItem {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  kSportEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsBoolean()\n  correct: boolean;\n}\n\nexport class KSportSetCandidateEventCorrectRequestDto {\n  @ApiProperty({\n    type: [BCToKSportSetCorrectItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => BCToKSportSetCorrectItem)\n  candidateEvents: BCToKSportSetCorrectItem[];\n}\n","export class KSportSetCandidateEventCorrectResponseDto {\n  result: boolean;\n  message: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { SportsEnum } from '@workspace/enums';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsString,\n  Matches,\n  IsEnum,\n  ValidateNested,\n  IsOptional,\n  IsNumber,\n  IsBoolean,\n} from 'class-validator';\n\nexport class BCToKSportUpdateItem {\n  @ApiPropertyOptional({\n    enum: SportsEnum,\n  })\n  @IsOptional()\n  @IsEnum(SportsEnum)\n  sport: SportsEnum;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  kSportEventId: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsBoolean()\n  correct: boolean;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsBoolean()\n  isKilled: boolean;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsBoolean()\n  streamState: boolean;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsNumber()\n  matchScore: number;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  bcTeamId1: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  bcTeamName1: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  bcTeamId2: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  bcTeamName2: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  @Matches(/^[0-9]{4}-[0-2][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]$/i)\n  bcEventTime: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  kSportTeamId1: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  kSportTeamName1: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  kSportTeamId2: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  kSportTeamName2: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  @Matches(/^[0-9]{4}-[0-2][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]$/i)\n  kSportEventTime: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  kSportStreamId: string;\n}\n\nexport class KSportUpdateCandidateEventRequestDto {\n  @ApiProperty({\n    type: [BCToKSportUpdateItem],\n  })\n  @ValidateNested({ each: true })\n  @Type(() => BCToKSportUpdateItem)\n  candidateEvents: BCToKSportUpdateItem[];\n}\n","export class KSportUpdateCandidateEventResponseDto {\n  result: boolean;\n  message: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { BCToKSportTeamModel } from '../entities/bc.ksport.team.entity';\nimport { KSportMatchRequest } from './ksport.match.request.dto';\n\nexport class UpdateBCToKSportTeamDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  betTeamId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  betTeamName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  KSportTeamId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  KSportTeamName: string;\n\n  public static matchRequestFactory(\n    item: BCToKSportTeamModel,\n    matchRequest: KSportMatchRequest\n  ): BCToKSportTeamModel {\n    item.kSportTeamId = matchRequest.betTeamId;\n    item.bcTeamName = matchRequest.betTeamName;\n    item.kSportTeamId = matchRequest.KSportTeamId;\n    item.kSportTeamName = matchRequest.KSportTeamName;\n\n    return item;\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { SportsEnum } from '@workspace/enums';\nimport { IsNotEmpty } from 'class-validator';\nimport { BCToKSportModel } from '../entities/bc.ksport.entity';\nimport { KSportResultItemDto } from './ksport.result.item.dto';\n\nimport * as moment from 'moment-timezone';\nimport { BCItemDto } from './ksport.build.candidateevent.request.dto';\nimport { BCToKSportUpdateItem } from './ksport.update.candidateevent.request.dto';\nimport { BCToKSportCreateItem } from './ksport.create.candidateevent.request.dto';\n\nexport class UpdateBCToKSportDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  sportType: SportsEnum;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  correct: boolean;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  matchScore: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcEventTime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcTeamId1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcTeamId2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcTeamName1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  bcTeamName2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportEventTime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportTeamId1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportTeamId2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportTeamName1: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportTeamName2: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  kSportStreamId: string;\n\n  public static createRequestFactory(\n    item: BCToKSportModel,\n    request: BCToKSportCreateItem\n  ) {\n    if (request.sport !== undefined) {\n      item.sportType = request.sport;\n    }\n\n    if (request.matchScore !== undefined) {\n      item.matchScore = request.matchScore;\n    }\n\n    if (request.correct !== undefined) {\n      item.correct = request.correct;\n    }\n\n    if (request.isKilled !== undefined) {\n      item.isKilled = request.isKilled;\n    }\n\n    if (request.streamState !== undefined) {\n      item.streamState = request.streamState;\n    }\n\n    if (request.bcEventTime !== undefined) {\n      item.bcEventTime = moment\n        .tz(request.bcEventTime, 'YYYY-MM-DD HH:mm', 'Asia/Shanghai')\n        .toDate();\n    }\n\n    if (request.bcTeamId1 !== undefined) {\n      item.bcTeamId1 = request.bcTeamId1;\n    }\n\n    if (request.bcTeamName1 !== undefined) {\n      item.bcTeamName1 = request.bcTeamName1;\n    }\n\n    if (request.bcTeamId2 !== undefined) {\n      item.bcTeamId2 = request.bcTeamId2;\n    }\n\n    if (request.bcTeamName2 !== undefined) {\n      item.bcTeamName2 = request.bcTeamName2;\n    }\n\n    if (request.kSportEventTime !== undefined) {\n      item.kSportEventTime = moment\n        .tz(request.kSportEventTime, 'YYYY-MM-DD HH:mm', 'Asia/Shanghai')\n        .toDate();\n    }\n\n    if (request.kSportTeamId1 !== undefined) {\n      item.kSportTeamId1 = request.kSportTeamId1;\n    }\n\n    if (request.kSportTeamName1 !== undefined) {\n      item.kSportTeamName1 = request.kSportTeamName1;\n    }\n\n    if (request.kSportTeamId2 !== undefined) {\n      item.kSportTeamId2 = request.kSportTeamId2;\n    }\n\n    if (request.kSportTeamName2 !== undefined) {\n      item.kSportTeamName2 = request.kSportTeamName2;\n    }\n\n    if (request.kSportStreamId !== undefined) {\n      item.kSportStreamId = request.kSportStreamId;\n\n      const streamIdTokens = request.kSportStreamId.match(\n        /^stream(cn)?(hd)?([0-9]+)$/i\n      );\n\n      item.isStreamCn =\n        streamIdTokens &&\n        streamIdTokens[1] &&\n        streamIdTokens[1].toUpperCase() === 'CN'\n          ? true\n          : false;\n\n      item.isStreamHd =\n        streamIdTokens &&\n        streamIdTokens[2] &&\n        streamIdTokens[2].toUpperCase() === 'HD'\n          ? true\n          : false;\n    }\n\n    return item;\n  }\n\n  public static updateRequestFactory(\n    item: BCToKSportModel,\n    request: BCToKSportUpdateItem\n  ): BCToKSportModel {\n    if (request.sport !== undefined) {\n      item.sportType = request.sport;\n    }\n\n    if (request.matchScore !== undefined) {\n      item.matchScore = request.matchScore;\n    }\n\n    if (request.correct !== undefined) {\n      item.correct = request.correct;\n    }\n\n    if (request.isKilled !== undefined) {\n      item.isKilled = request.isKilled;\n    }\n\n    if (request.streamState !== undefined) {\n      item.streamState = request.streamState;\n    }\n\n    if (request.bcEventTime !== undefined) {\n      item.bcEventTime = moment\n        .tz(request.bcEventTime, 'YYYY-MM-DD HH:mm', 'Asia/Shanghai')\n        .toDate();\n    }\n\n    if (request.bcTeamId1 !== undefined) {\n      item.bcTeamId1 = request.bcTeamId1;\n    }\n\n    if (request.bcTeamName1 !== undefined) {\n      item.bcTeamName1 = request.bcTeamName1;\n    }\n\n    if (request.bcTeamId2 !== undefined) {\n      item.bcTeamId2 = request.bcTeamId2;\n    }\n\n    if (request.bcTeamName2 !== undefined) {\n      item.bcTeamName2 = request.bcTeamName2;\n    }\n\n    if (request.kSportEventTime !== undefined) {\n      item.kSportEventTime = moment\n        .tz(request.kSportEventTime, 'YYYY-MM-DD HH:mm', 'Asia/Shanghai')\n        .toDate();\n    }\n\n    if (request.kSportTeamId1 !== undefined) {\n      item.kSportTeamId1 = request.kSportTeamId1;\n    }\n\n    if (request.kSportTeamName1 !== undefined) {\n      item.kSportTeamName1 = request.kSportTeamName1;\n    }\n\n    if (request.kSportTeamId2 !== undefined) {\n      item.kSportTeamId2 = request.kSportTeamId2;\n    }\n\n    if (request.kSportTeamName2 !== undefined) {\n      item.kSportTeamName2 = request.kSportTeamName2;\n    }\n\n    if (request.kSportStreamId !== undefined) {\n      item.kSportStreamId = request.kSportStreamId;\n\n      const streamIdTokens = request.kSportStreamId.match(\n        /^stream(cn)?(hd)?([0-9]+)$/i\n      );\n\n      item.isStreamCn =\n        streamIdTokens &&\n        streamIdTokens[1] &&\n        streamIdTokens[1].toUpperCase() === 'CN'\n          ? true\n          : false;\n\n      item.isStreamHd =\n        streamIdTokens &&\n        streamIdTokens[2] &&\n        streamIdTokens[2].toUpperCase() === 'HD'\n          ? true\n          : false;\n    }\n\n    return item;\n  }\n\n  public static factory(\n    item: BCToKSportModel,\n    sportType: SportsEnum,\n    bcItem: BCItemDto,\n    ksportItem: KSportResultItemDto,\n    matchScore: number,\n    correct?: boolean\n  ): BCToKSportModel {\n    item.sportType = sportType;\n\n    item.bcEventTime = moment\n      .tz(bcItem.bcEventTime, 'YYYY-MM-DD HH:mm', 'Asia/Shanghai')\n      .toDate();\n    item.bcTeamId1 = bcItem.bcTeamId1;\n    item.bcTeamId2 = bcItem.bcTeamId2;\n    item.bcTeamName1 = bcItem.bcTeamName1;\n    item.bcTeamName2 = bcItem.bcTeamName2;\n\n    item.kSportEventTime = moment\n      .unix(ksportItem.Matchtime)\n      .utcOffset('+08:00')\n      .toDate();\n    item.kSportTeamId1 = ksportItem.Opp1ID;\n    item.kSportTeamId2 = ksportItem.Opp2ID;\n    item.kSportTeamName1 = ksportItem.Opp1;\n    item.kSportTeamName2 = ksportItem.Opp2;\n    item.kSportStreamId = ksportItem.StreamName;\n\n    const streamIdTokens = ksportItem.StreamName.match(\n      /^stream(cn)?(hd)?([0-9]+)$/i\n    );\n\n    item.isStreamCn =\n      streamIdTokens &&\n      streamIdTokens[1] &&\n      streamIdTokens[1].toUpperCase() === 'CN'\n        ? true\n        : false;\n\n    item.isStreamHd =\n      streamIdTokens &&\n      streamIdTokens[2] &&\n      streamIdTokens[2].toUpperCase() === 'HD'\n        ? true\n        : false;\n\n    item.matchScore = matchScore;\n    if (correct !== undefined) item.correct = correct;\n    item.streamState = ksportItem.StreamInfo.state;\n\n    return item;\n  }\n}\n","import { SportsEnum } from '@workspace/enums';\nimport { Column, DataType, Table, Model, IsDate } from 'sequelize-typescript';\n\n@Table({ tableName: 'bcToKSport', timestamps: false })\nexport class BCToKSportModel extends Model<BCToKSportModel> {\n  @Column({\n    type: DataType.CHAR,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  sportType: SportsEnum;\n  //////////////////////////////////////////////////////////////////////////\n  // Unique Match BC Against KSport\n  //////////////////////////////////////////////////////////////////////////\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: 'uniqueEventMatch',\n  })\n  bcEventId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: 'uniqueEventMatch',\n  })\n  kSportEventId: string;\n\n  //////////////////////////////////////////////////////////////////////////\n  // MatchScore  BC Against KSport\n  //////////////////////////////////////////////////////////////////////////\n  @Column({\n    type: DataType.NUMBER,\n    allowNull: false,\n  })\n  matchScore: number;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  correct: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  isManual: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  isKilled: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  streamState: boolean;\n\n  //////////////////////////////////////////////////////////////////////////\n  // bc Construct Event Information\n  //////////////////////////////////////////////////////////////////////////\n\n  @IsDate\n  @Column({\n    type: DataType.DATE,\n    allowNull: false,\n  })\n  bcEventTime: Date;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  bcTeamId1: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  bcTeamId2: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  bcTeamName1: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  bcTeamName2: string;\n\n  //////////////////////////////////////////////////////////////////////////\n  // KSport Event Information\n  //////////////////////////////////////////////////////////////////////////\n\n  @IsDate\n  @Column({\n    type: DataType.DATE,\n    allowNull: false,\n  })\n  kSportEventTime: Date;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  kSportTeamId1: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  kSportTeamId2: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  kSportTeamName1: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  kSportTeamName2: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: true,\n  })\n  kSportStreamId: string;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isStreamCn: boolean;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n  })\n  isStreamHd: boolean;\n}\n","import { Column, DataType, Table, Model } from 'sequelize-typescript';\n\n@Table({ tableName: 'bcToKSportTeam' })\nexport class BCToKSportTeamModel extends Model<BCToKSportTeamModel> {\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n    autoIncrement: true,\n    primaryKey: true,\n    unique: true,\n  })\n  id: number;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: 'uniqueTeamId',\n  })\n  bcTeamId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  bcTeamName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: 'uniqueTeamId',\n  })\n  kSportTeamId: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  kSportTeamName: string;\n}\n","import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { KSportService } from './ksport.service';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { KSportFindAllCandidateEventRequestDto } from './dto/ksport.findall.candidateevent.request.dto';\nimport { KSportFindAllCandidateEventResponseDto } from './dto/ksport.findall.candidateevent.response.dto';\nimport { KSportBuildCandidateEventRequestDto } from './dto/ksport.build.candidateevent.request.dto';\nimport { KSportBuildCandidateEventResponseDto } from './dto/ksport.build.candidateevent.response.dto';\nimport { KSportCreateCandidateEventRequestDto } from './dto/ksport.create.candidateevent.request.dto';\nimport { KSportCreateCandidateEventResponseDto } from './dto/ksport.create.candidateevent.response.dto';\nimport { KSportDeleteCandidateEventRequestDto } from './dto/ksport.delete.candidateevent.request.dto';\nimport { KSportDeleteCandidateEventResponseDto } from './dto/ksport.delete.candidateevent.response.dto';\nimport { KSportFindCandidateTeamRequest } from './dto/ksport.find.candidateteam.request.dto';\nimport { KSportFindCandidateTeamResponse } from './dto/ksport.find.candidateteam.response.dto';\nimport { KSportMatchRequest } from './dto/ksport.match.request.dto';\nimport { KSportMatchResponse } from './dto/ksport.match.response.dto';\nimport { KSportSetCandidateEventCorrectRequestDto } from './dto/ksport.set.candidateevent.correct.request.dto';\nimport { KSportSetCandidateEventCorrectResponseDto } from './dto/ksport.set.candidateevent.correct.response.dto';\nimport { KSportUpdateCandidateEventRequestDto } from './dto/ksport.update.candidateevent.request.dto';\nimport { KSportUpdateCandidateEventResponseDto } from './dto/ksport.update.candidateevent.response.dto';\nimport { KSportBuildStreamStateRequestDto } from './dto/ksport.build.streamstate.request.dto';\nimport { KSportBuildStreamStateResponseDto } from './dto/ksport.build.streamstate.response.dto';\nimport { KSportBuildStreamStateSomeRequestDto } from './dto/ksport.build.streamstate.some.request.dto';\nimport { KSportBuildStreamStateSomeResponseDto } from './dto/ksport.build.streamstate.some.response.dto';\nimport { KSportGetStreamStateSomeRequestDto } from './dto/ksport.get.streamstate.some.request.dto';\nimport { KSportGetStreamStateSomeResponseDto } from './dto/ksport.get.streamstate.some.response.dto';\nimport { KSportDeleteCandidateEventByTimeResponseDto } from './dto/ksport.delete.candidateevent.bytime.response.dto';\nimport { KSportDeleteCandidateEventByTimeRequestDto } from './dto/ksport.delete.candidateevent.bytime.request.dto';\nimport { KSportFetchUpdateRequestDto } from './dto/ksport.fetchupdate.request.dto';\nimport { JwtAuthGuard } from '../../auth/jwt-auth.guard';\n\n@Controller('ksport')\n@ApiTags(apiTagsEnum.streamEndpoints)\nexport class KSportController {\n  constructor(private readonly ksportService: KSportService) {}\n\n  @Post(apiPathsEnum.getStreamStateSome)\n  getStreamStateSome(\n    @Body() query: KSportGetStreamStateSomeRequestDto\n  ): Promise<KSportGetStreamStateSomeResponseDto> {\n    return this.ksportService.getStreamStateSome(query);\n  }\n\n  @Post(apiPathsEnum.fetchUpdate)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  fetchUpdate(@Body() query: KSportFetchUpdateRequestDto): Promise<boolean> {\n    return this.ksportService.fetchUpdatedKSportResult(true, true, true, true);\n  }\n\n  @Post(apiPathsEnum.buildStreamState)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  buildStremState(\n    @Body() query: KSportBuildStreamStateRequestDto\n  ): Promise<KSportBuildStreamStateResponseDto> {\n    return this.ksportService.buildStreamState(query);\n  }\n\n  @Post(apiPathsEnum.buildStreamStateSome)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  buildStremStateSome(\n    @Body() query: KSportBuildStreamStateSomeRequestDto\n  ): Promise<KSportBuildStreamStateSomeResponseDto> {\n    return this.ksportService.buildStreamStateSome(query);\n  }\n\n  @Get(apiPathsEnum.findallKSportCandidateEvent)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  findallCandidateEvent(\n    @Query() query: KSportFindAllCandidateEventRequestDto\n  ): Promise<KSportFindAllCandidateEventResponseDto> {\n    return this.ksportService.findAllCandidateEvent(query);\n  }\n\n  @Post(apiPathsEnum.buildKSportCandidateEventByBet)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  buildCandidateEvent(\n    @Body() candidateEventRequest: KSportBuildCandidateEventRequestDto\n  ): Promise<KSportBuildCandidateEventResponseDto> {\n    return this.ksportService.buildCandidateEventByBC(candidateEventRequest);\n  }\n\n  @Post(apiPathsEnum.createKSportCandidateEvent)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  createCandidateEvent(\n    @Body()\n    createCandidateEventRequest: KSportCreateCandidateEventRequestDto\n  ): Promise<KSportCreateCandidateEventResponseDto> {\n    return this.ksportService.createCandidateEvent(createCandidateEventRequest);\n  }\n\n  @Post(apiPathsEnum.updateKSportCandidateEvent)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  updateCandidateEvent(\n    @Body()\n    updateCandidateEventRequest: KSportUpdateCandidateEventRequestDto\n  ): Promise<KSportUpdateCandidateEventResponseDto> {\n    return this.ksportService.updateCandidateEvent(updateCandidateEventRequest);\n  }\n\n  @Post(apiPathsEnum.deleteKSportCandidateEvent)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  deleteCandidateEvent(\n    @Body()\n    deleteCandidateEventRequest: KSportDeleteCandidateEventRequestDto\n  ): Promise<KSportDeleteCandidateEventResponseDto> {\n    return this.ksportService.deleteCandidateEvent(deleteCandidateEventRequest);\n  }\n\n  @Post(apiPathsEnum.deleteKSportCandidateEventByTime)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  deleteCandidateEventByTime(\n    @Body()\n    deleteCandidateEventByTimeRequest: KSportDeleteCandidateEventByTimeRequestDto\n  ): Promise<KSportDeleteCandidateEventByTimeResponseDto> {\n    return this.ksportService.deleteCandidateEventByTime(\n      deleteCandidateEventByTimeRequest\n    );\n  }\n\n  @Post(apiPathsEnum.setKSportCandidateEventCorrect)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  setCandidateEventCorrect(\n    @Body() query: KSportSetCandidateEventCorrectRequestDto\n  ): Promise<KSportSetCandidateEventCorrectResponseDto> {\n    return this.ksportService.setCandidateEventCorrect(query);\n  }\n\n  @Get(apiPathsEnum.findKSportCandidateTeam)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  findCandidateTeam(\n    @Query() query: KSportFindCandidateTeamRequest\n  ): Promise<KSportFindCandidateTeamResponse> {\n    return this.ksportService.findCandidateTeamByBC(query);\n  }\n\n  @Post(apiPathsEnum.setKSportMatchTeam)\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  setMatchTeam(\n    @Query() matchRequest: KSportMatchRequest\n  ): Promise<KSportMatchResponse> {\n    return this.ksportService.setMatchTeamByBC(matchRequest);\n  }\n}\n","import { InjectQueue, Process, Processor } from '@nestjs/bull';\nimport { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SportsEnum } from '@workspace/enums';\nimport { Queue, Job } from 'bull';\nimport { KSportRequestDto } from './dto/ksport.request.dto';\nimport { KSportResultItemDto } from './dto/ksport.result.item.dto';\n\nexport class KSportFetchOpenInfo {\n  fetchHandle: string;\n  fetchData: KSportResultItemDto[];\n}\n\nclass KSportFetchNode {\n  refCount: number;\n  data: {\n    sports: {};\n    kSportIds: string[];\n  };\n}\n\n@Injectable()\n@Processor('fetch-ksport')\nexport class KSportFetchService {\n  private currentHandle: string;\n  private nodeMap: {};\n  private fetchJob: Job;\n\n  constructor(\n    private httpService: HttpService,\n    private configService: ConfigService,\n    @InjectQueue('fetch-ksport') private fetchKSportQueue: Queue\n  ) {\n    this.nodeMap = {};\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Open KSport Data\n  ///////////////////////////////////////////////////////////////////////////////\n  public async openData(sport: SportsEnum): Promise<KSportFetchOpenInfo> {\n    const openInfo = new KSportFetchOpenInfo();\n\n    let node: KSportFetchNode = null;\n\n    if (!this.currentHandle) {\n      node = await this.getNodeWithFetch();\n    } else {\n      node = this.nodeMap[this.currentHandle];\n    }\n\n    if (!node) {\n      console.log('FETCH ERROR');\n      return null;\n    }\n\n    node.refCount++;\n\n    openInfo.fetchHandle = this.currentHandle;\n    openInfo.fetchData = node.data.sports[sport];\n\n    return openInfo;\n  }\n\n  public async getKSportIds(): Promise<string[]> {\n    let node: KSportFetchNode = null;\n\n    if (!this.currentHandle) {\n      node = await this.getNodeWithFetch();\n    } else {\n      node = this.nodeMap[this.currentHandle];\n    }\n\n    if (!node) {\n      console.log('FETCH ERROR');\n      return null;\n    }\n\n    return node.data.kSportIds;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Close KSport Data\n  ///////////////////////////////////////////////////////////////////////////////\n  public closeData(handle: string): boolean {\n    const node: KSportFetchNode = this.nodeMap[handle];\n    if (!node) {\n      return false;\n    }\n\n    node.refCount--;\n\n    if (node.refCount > 0) {\n      return true;\n    }\n\n    if (this.currentHandle === handle) {\n      return true;\n    }\n\n    delete this.nodeMap[handle];\n\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Update KSport Data\n  ///////////////////////////////////////////////////////////////////////////////\n  public async fetchUpdated(force?: boolean): Promise<boolean> {\n    if (this.fetchJob && !force) {\n      return false;\n    }\n\n    let nodeData: {\n      sports: {};\n      kSportIds: string[];\n    } = null;\n\n    try {\n      if (this.fetchJob) {\n        await this.fetchJob.finished();\n      }\n\n      this.fetchJob = await this.fetchKSportQueue.add(\n        'fetch-ksport-job',\n        {},\n        { timeout: 45000 }\n      );\n\n      nodeData = await this.fetchJob.finished();\n\n      this.fetchJob = null;\n      if (!nodeData) {\n        return false;\n      }\n    } catch (error) {\n      this.fetchJob = null;\n      return false;\n    }\n\n    if (this.currentHandle) {\n      const nodeCurrent = <KSportFetchNode>this.nodeMap[this.currentHandle];\n      if (nodeCurrent /* && nodeCurrent.refCount < 1 */) {\n        delete this.nodeMap[this.currentHandle];\n      }\n    }\n\n    const node = new KSportFetchNode();\n\n    node.data = nodeData;\n    node.refCount = 0;\n\n    const fetchHandle = this.generateNewFetchHandle();\n\n    this.nodeMap[fetchHandle] = node;\n    this.currentHandle = fetchHandle;\n\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Open Data With Fetch\n  ///////////////////////////////////////////////////////////////////////////////\n  protected async getNodeWithFetch(): Promise<KSportFetchNode> {\n    let node: KSportFetchNode = null;\n    let nodeData: { sports: {}; kSportIds: string[] } = null;\n\n    if (!this.fetchJob) {\n      this.fetchJob = await this.fetchKSportQueue.add(\n        'fetch-ksport-job',\n        {},\n        { timeout: 45000, attempts: 1 }\n      );\n    }\n\n    try {\n      nodeData = await this.fetchJob.finished();\n    } catch (error) {}\n    this.fetchJob = null;\n\n    if (!nodeData) {\n      return null;\n    }\n\n    // Configure fetchHandle\n    if (!this.currentHandle) {\n      const fetchHandle = this.generateNewFetchHandle();\n      this.currentHandle = fetchHandle;\n\n      // Configure fetchNode\n      node = new KSportFetchNode();\n\n      node.data = nodeData;\n      node.refCount = 0;\n\n      // Set fetchNode\n      this.nodeMap[fetchHandle] = node;\n    } else {\n      node = this.nodeMap[this.currentHandle];\n    }\n\n    node.refCount++;\n\n    // Configure fetchOpenInfo\n    // openInfo.fetchData = node.data.sports[sport];\n    // openInfo.fetchHandle = this.currentHandle;\n\n    return node;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Fetch KSport Job Consumer Processing\n  ///////////////////////////////////////////////////////////////////////////////\n  @Process('fetch-ksport-job')\n  private async fetchKsportProcess(job: Job) {\n    let nodeData: {} = null;\n\n    const ksportRequest = KSportRequestDto.sportFactory();\n    const host = this.configService.get<string>('KSPORT_HOST');\n    const api = this.configService.get<string>('KSPORT_API');\n\n    console.log('fetch-ksport-job consummer is starting...');\n\n    try {\n      const response = await this.httpService\n        .get(`http://${host}${api}`, {\n          params: ksportRequest,\n        })\n        .toPromise();\n\n      const data: KSportResultItemDto[] = response.data;\n\n      if (!data) {\n        return null;\n      }\n\n      nodeData = this.buildNodeData(data);\n    } catch (error) {\n      return null;\n    }\n\n    console.log('fetch-ksport-job consumming end with success.....');\n\n    return nodeData;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Generate New Fetch Handle\n  ///////////////////////////////////////////////////////////////////////////////\n  private generateNewFetchHandle() {\n    let fetchHandle = null;\n    while (!fetchHandle || this.nodeMap[fetchHandle]) {\n      fetchHandle = Math.random().toString(36).substring(2, 12);\n    }\n\n    return fetchHandle;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Build Node Data\n  ///////////////////////////////////////////////////////////////////////////////\n  private buildNodeData(data: KSportResultItemDto[]): {} {\n    const nodeData = {\n      sports: {},\n      kSportIds: [],\n    };\n\n    const sportsIds = Object.values(SportsEnum).filter(\n      (_sport_id) => typeof _sport_id === 'number'\n    );\n\n    sportsIds.forEach((sportId) => {\n      nodeData.sports[sportId] = [];\n    });\n\n    const kSportIds: string[] = [];\n\n    data.forEach((kSportResultItem) => {\n      const sportId = kSportResultItem.SportId;\n\n      if (sportsIds.includes(sportId)) {\n        nodeData.sports[sportId].push(kSportResultItem);\n      } else {\n        nodeData.sports[SportsEnum.other].push(kSportResultItem);\n      }\n\n      // strIDs += `${strIDs.length > 0 ? ',' : ''}${kSportResultItem.vid}`;\n      kSportIds.push(kSportResultItem.vid);\n    });\n\n    nodeData.kSportIds = kSportIds;\n\n    return nodeData;\n  }\n}\n","import { HttpModule, Module } from '@nestjs/common';\nimport { KSportService } from './ksport.service';\nimport { KSportController } from './ksport.controller';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BCToKSportTeamModel } from './entities/bc.ksport.team.entity';\nimport { BCToKSportModel } from './entities/bc.ksport.entity';\nimport { KSportFetchService } from './ksport.fetch.service';\nimport { BullModule } from '@nestjs/bull';\nimport { TestModel } from '../../models/test.entity';\n\n@Module({\n  controllers: [KSportController],\n  providers: [KSportService, KSportFetchService],\n  imports: [\n    BullModule.registerQueue({\n      name: 'fetch-ksport',\n    }),\n    HttpModule.register({\n      timeout: 45000,\n      maxRedirects: 5,\n    }),\n    SequelizeModule.forFeature([\n      BCToKSportModel,\n      BCToKSportTeamModel,\n      TestModel,\n    ]),\n  ],\n  exports: [KSportService],\n})\nexport class KSportModule {}\n","import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { KSportResultItemDto } from './dto/ksport.result.item.dto';\nimport * as Locale from '../../locale';\n\nimport Fuse from 'fuse.js';\nimport * as moment from 'moment-timezone';\n\nimport { InjectModel } from '@nestjs/sequelize';\nimport { BCToKSportTeamModel } from './entities/bc.ksport.team.entity';\nimport { CreateBCToKSportTeamDto } from './dto/create-bctoksportteam.dto';\nimport { UpdateBCToKSportTeamDto } from './dto/update-bctokposrtteam.dto';\nimport { LocaleEnum, SportsEnum } from '@workspace/enums';\nimport { FindMatchKSportEventOptions } from './options/find.match.ksport.event.options';\nimport { CreateBCToKSportDto } from './dto/create-bctoksport.dto';\nimport { BCToKSportModel } from './entities/bc.ksport.entity';\nimport { UpdateBCToKSportDto } from './dto/update-bctoksport.dto';\nimport { FindOptions, Op } from 'sequelize';\n\nimport { KSportFindAllCandidateEventRequestDto } from './dto/ksport.findall.candidateevent.request.dto';\nimport { KSportFindAllCandidateEventResponseDto } from './dto/ksport.findall.candidateevent.response.dto';\n\nimport {\n  KSportBuildCandidateEventRequestDto,\n  BCItemDto,\n} from './dto/ksport.build.candidateevent.request.dto';\nimport {\n  KSportBuildCandidateEventResponseDto,\n  BcItemResponse,\n  KSportItemResponse,\n} from './dto/ksport.build.candidateevent.response.dto';\nimport { KSportCreateCandidateEventRequestDto } from './dto/ksport.create.candidateevent.request.dto';\nimport { KSportCreateCandidateEventResponseDto } from './dto/ksport.create.candidateevent.response.dto';\nimport { KSportDeleteCandidateEventRequestDto } from './dto/ksport.delete.candidateevent.request.dto';\nimport { KSportDeleteCandidateEventResponseDto } from './dto/ksport.delete.candidateevent.response.dto';\nimport { KSportFindCandidateTeamRequest } from './dto/ksport.find.candidateteam.request.dto';\nimport {\n  KSportFindCandidateTeamResponse,\n  KSportCandidate,\n} from './dto/ksport.find.candidateteam.response.dto';\nimport { KSportMatchRequest } from './dto/ksport.match.request.dto';\nimport { KSportMatchResponse } from './dto/ksport.match.response.dto';\nimport { KSportSetCandidateEventCorrectRequestDto } from './dto/ksport.set.candidateevent.correct.request.dto';\nimport { KSportSetCandidateEventCorrectResponseDto } from './dto/ksport.set.candidateevent.correct.response.dto';\nimport { KSportUpdateCandidateEventRequestDto } from './dto/ksport.update.candidateevent.request.dto';\nimport { KSportUpdateCandidateEventResponseDto } from './dto/ksport.update.candidateevent.response.dto';\nimport { StreamFindActiveRequestDto } from '@workspace/dto';\nimport { KSportBuildStreamStateRequestDto } from './dto/ksport.build.streamstate.request.dto';\nimport { KSportBuildStreamStateResponseDto } from './dto/ksport.build.streamstate.response.dto';\nimport { KSportBuildStreamStateSomeRequestDto } from './dto/ksport.build.streamstate.some.request.dto';\nimport { KSportBuildStreamStateSomeResponseDto } from './dto/ksport.build.streamstate.some.response.dto';\nimport { KSportFetchService } from './ksport.fetch.service';\nimport { KSportGetStreamStateSomeRequestDto } from './dto/ksport.get.streamstate.some.request.dto';\nimport { KSportGetStreamStateSomeResponseDto } from './dto/ksport.get.streamstate.some.response.dto';\n\nimport { Sequelize } from 'sequelize-typescript';\nimport { KSportDeleteCandidateEventByTimeRequestDto } from './dto/ksport.delete.candidateevent.bytime.request.dto';\nimport { KSportDeleteCandidateEventByTimeResponseDto } from './dto/ksport.delete.candidateevent.bytime.response.dto';\nimport { TestModel } from '../../models/test.entity';\n\n@Injectable()\nexport class KSportService {\n  kSportFileName: string;\n  isNewFileWrited: boolean;\n  kSportResultsFromLocal: KSportResultItemDto[][];\n  constructor(\n    private httpService: HttpService,\n    private configService: ConfigService,\n    private kSportFetchService: KSportFetchService,\n\n    @InjectModel(BCToKSportModel)\n    private bcToKSportRepository: typeof BCToKSportModel,\n\n    @InjectModel(BCToKSportTeamModel)\n    private bcToKSportTeamRepository: typeof BCToKSportTeamModel,\n\n    @InjectModel(TestModel)\n    private testRepository: typeof TestModel,\n\n    private sequelize: Sequelize\n  ) {}\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Find By BetConstruct\n  ///////////////////////////////////////////////////////////////////////////////\n  async findByBC(\n    streamFindActiveRequest: StreamFindActiveRequestDto\n  ): Promise<KSportResultItemDto> {\n    const openInfo = await this.kSportFetchService.openData(\n      streamFindActiveRequest.sport\n    );\n\n    if (!openInfo) {\n      return null;\n    }\n\n    const { fetchData } = openInfo;\n\n    const matchedItem = this.findMatchKSportItemByBC(\n      streamFindActiveRequest,\n      fetchData\n    );\n\n    return matchedItem;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Get Stream State By BC Items\n  ///////////////////////////////////////////////////////////////////////////////\n  async getStreamStateSome(\n    request: KSportGetStreamStateSomeRequestDto\n  ): Promise<KSportGetStreamStateSomeResponseDto> {\n    const response = new KSportGetStreamStateSomeResponseDto();\n    response.result = false;\n    response.data = {};\n\n    const bcEventIDs = request.bcEventIDs;\n    if (bcEventIDs.length < 1) {\n      return response;\n    }\n\n    //const localeId: number = LocaleEnum[request.locale];\n\n    const bcToKSportItems = await this.bcToKSportRepository.findAll({\n      attributes: [\n        [\n          Sequelize.literal('distinct on(\"bcEventId\") \"bcEventId\"'),\n          'bcEventId',\n        ],\n        'streamState',\n        'isManual',\n        'correct',\n        'matchScore',\n      ],\n      where: {\n        bcEventId: {\n          [Op.in]: bcEventIDs,\n        },\n        //correct: true,\n      },\n      order: [\n        ['bcEventId', 'ASC'],\n        ['isManual', 'DESC'],\n        ['correct', 'DESC'],\n        ['matchScore', 'ASC'],\n        ['isKilled', 'ASC'],\n        ['streamState', 'DESC'],\n        // ['isStreamCn', localeId === LocaleEnum.cn ? 'DESC' : 'ASC'],\n        // ['isStreamHd', 'DESC'],\n      ],\n    });\n\n    if (!bcToKSportItems) {\n      return response;\n    }\n\n    bcToKSportItems.forEach((bcToKSportItem) => {\n      const data = response.data;\n      const bcEventId = bcToKSportItem.bcEventId;\n\n      if (data[bcEventId]) {\n        return;\n      }\n\n      data[bcEventId] = {\n        streamState: bcToKSportItem.streamState,\n        isManual: bcToKSportItem.isManual,\n        correct: bcToKSportItem.correct,\n        matchScore: bcToKSportItem.matchScore,\n      };\n    });\n\n    response.result = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Build Stream State\n  ///////////////////////////////////////////////////////////////////////////////\n  async buildStreamState(\n    request: KSportBuildStreamStateRequestDto\n  ): Promise<KSportBuildStreamStateResponseDto> {\n    const response = new KSportBuildStreamStateResponseDto();\n    response.result = false;\n    response.numKSportResults = 0;\n    response.numKSportResultsApplied = 0;\n\n    const openInfo = await this.kSportFetchService.openData(request.sport);\n\n    if (!openInfo) {\n      response.result = true;\n      return response;\n    }\n\n    const { fetchData } = openInfo;\n\n    response.numKSportResults = fetchData.length;\n\n    let numKSportsResultsApplied = 0;\n\n    for (let i = 0; i < fetchData.length; i++) {\n      const kSportResultItem = fetchData[i];\n\n      const bcToKSports = await this.bcToKSportRepository.findAll({\n        where: {\n          kSportEventId: kSportResultItem.vid,\n          //correct: true,\n          // [Op.and]: {\n          //   isManual: false,\n          //   correct: false\n          // }\n        },\n      });\n\n      if (!bcToKSports || bcToKSports.length < 1) {\n        continue;\n      }\n\n      await this.buildStreamStateEntities(kSportResultItem, bcToKSports, true);\n      numKSportsResultsApplied++;\n    }\n\n    //this.kSportFetchService.closeData(fetchHandle);\n\n    response.numKSportResultsApplied = numKSportsResultsApplied;\n    response.result = true;\n\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Build Stream State Some\n  ///////////////////////////////////////////////////////////////////////////////\n  async buildStreamStateSome(\n    request: KSportBuildStreamStateSomeRequestDto\n  ): Promise<KSportBuildStreamStateSomeResponseDto> {\n    const response = new KSportBuildStreamStateSomeResponseDto();\n    response.result = false;\n\n    const bcEventIDs = request.bcEventIDs;\n    if (bcEventIDs.length < 1) {\n      return response;\n    }\n\n    const bcToKSprotItems = await this.bcToKSportRepository.findAll({\n      where: {\n        bcEventId: {\n          [Op.in]: bcEventIDs,\n        },\n        //correct: true,\n      },\n    });\n\n    for (let i = 0; i < bcToKSprotItems.length; i++) {\n      const bcToKSportItem = bcToKSprotItems[i];\n\n      const kSportEventId = bcToKSportItem.kSportEventId;\n\n      const kSportResultItem = await this.fetchKSportResultById(kSportEventId);\n\n      if (!kSportResultItem) {\n        continue;\n      }\n\n      await this.buildStreamStateEntities(\n        kSportResultItem,\n        [bcToKSportItem],\n        true\n      );\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Find All Candidate Events\n  ///////////////////////////////////////////////////////////////////////////////\n  async findAllCandidateEvent(\n    query: KSportFindAllCandidateEventRequestDto\n  ): Promise<KSportFindAllCandidateEventResponseDto> {\n    const findOptions: FindOptions = {},\n      where: {} = {};\n\n    if (query.sport) {\n      where['sportType'] = query.sport;\n    }\n\n    if (query.bcTeamNameLike) {\n      where[Op.or] = [\n        { bcTeamName1: { [Op.like]: `%${query.bcTeamNameLike}%` } },\n        { bcTeamName2: { [Op.like]: `%${query.bcTeamNameLike}%` } },\n      ];\n    }\n\n    if (query.bcEventId) {\n      where['bcEventId'] = query.bcEventId;\n    }\n\n    if (query.kSportEventId) {\n      where['kSportEventId'] = query.kSportEventId;\n    }\n\n    if (query.correct !== undefined) {\n      where['correct'] = query.correct;\n    }\n\n    if (\n      query.lessThanMatchScore !== undefined ||\n      query.greaterThanMatchScore !== undefined\n    ) {\n      where['matchScore'] = {};\n\n      if (query.lessThanMatchScore !== undefined) {\n        where['matchScore'][Op.lt] = query.lessThanMatchScore;\n      }\n      if (query.greaterThanMatchScore !== undefined) {\n        where['matchScore'][Op.gt] = query.greaterThanMatchScore;\n      }\n    }\n\n    findOptions.where = where;\n\n    if (query.page === undefined) query.page = 0;\n    if (query.pageSize === undefined) query.pageSize = 10;\n\n    if (query.pageSize > 0) {\n      findOptions.offset = query.pageSize * Math.max(query.page - 1, 0);\n      findOptions.limit = query.pageSize;\n    }\n\n    findOptions.order = [\n      ['sportType', 'ASC'],\n      ['bcEventTime', 'ASC'],\n      //['kSportEventTime', 'ASC'],\n      ['bcEventId', 'ASC'],\n      //['kSportEventId', 'ASC'],\n      ['matchScore', 'ASC'],\n    ];\n\n    const { count, rows } = await this.bcToKSportRepository.findAndCountAll(\n      findOptions\n    );\n\n    const response = new KSportFindAllCandidateEventResponseDto();\n    response.total = count;\n    response.items = rows;\n\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Build Candidate Event By BetConstruct\n  ///////////////////////////////////////////////////////////////////////////////\n  async buildCandidateEventByBC(\n    candidateEventRequest: KSportBuildCandidateEventRequestDto\n  ): Promise<KSportBuildCandidateEventResponseDto> {\n    const canddiateEventResponse = new KSportBuildCandidateEventResponseDto();\n    canddiateEventResponse.result = false;\n    canddiateEventResponse.bcItems = [];\n\n    const openInfo = await this.kSportFetchService.openData(\n      SportsEnum[candidateEventRequest.sport]\n    );\n\n    if (!openInfo) {\n      canddiateEventResponse.result = true;\n      return canddiateEventResponse;\n    }\n\n    const { fetchData } = openInfo;\n\n    for (let i = 0; i < candidateEventRequest.bcItems.length; i++) {\n      const bcItem = candidateEventRequest.bcItems[i];\n\n      const bcItemResponse = new BcItemResponse();\n      bcItemResponse.bcEventId = bcItem.bcEventId;\n      bcItemResponse.kSportItems = [];\n\n      const findOptions = new FindMatchKSportEventOptions();\n      findOptions.bcTeam1 = bcItem.bcTeamName1;\n      findOptions.bcTeam2 = bcItem.bcTeamName2;\n      findOptions.bcEventTime = bcItem.bcEventTime;\n\n      const matchsKSItems = this.findMatchKSportItemsByBC(\n        fetchData,\n        findOptions\n      );\n\n      if (!matchsKSItems || matchsKSItems.length < 1) {\n        //console.log(bcItem);\n      }\n\n      const candidateEntities = await this.buildCandidateEventEntity(\n        SportsEnum[candidateEventRequest.sport],\n        bcItem,\n        matchsKSItems,\n        true\n      );\n\n      candidateEntities.forEach((item) => {\n        const kSportItemResponse = new KSportItemResponse();\n        kSportItemResponse.kSportEventId = item.kSportEventId;\n\n        bcItemResponse.kSportItems.push(kSportItemResponse);\n      });\n\n      canddiateEventResponse.bcItems.push(bcItemResponse);\n    }\n\n    canddiateEventResponse.result = true;\n    return canddiateEventResponse;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Create Candidate Event\n  ///////////////////////////////////////////////////////////////////////////////\n  async createCandidateEvent(\n    createCandidateEventRequest: KSportCreateCandidateEventRequestDto\n  ): Promise<KSportCreateCandidateEventResponseDto> {\n    const response = new KSportCreateCandidateEventResponseDto();\n    response.result = false;\n    for (\n      let i = 0;\n      i < createCandidateEventRequest.candidateEvents.length;\n      i++\n    ) {\n      const requestItem = createCandidateEventRequest.candidateEvents[i];\n\n      const itemAlready = await this.bcToKSportRepository.findOne({\n        where: {\n          bcEventId: requestItem.bcEventId,\n          kSportEventId: requestItem.kSportEventId,\n        },\n      });\n      const itemLikeBC = await this.bcToKSportRepository.findOne({\n        where: {\n          bcEventId: requestItem.bcEventId,\n        },\n      });\n\n      let itemResult: BCToKSportModel = null;\n\n      if (itemAlready) {\n        //response.message = Locale.MSG_KSPORT_EXIST_CANDIDATE;\n        itemResult = UpdateBCToKSportDto.createRequestFactory(\n          itemAlready,\n          requestItem\n        );\n\n        if (itemLikeBC) {\n          this.syncItemBcEvent(itemResult, itemLikeBC);\n        }\n\n        await itemResult.save();\n      } else {\n        const createBCToKSport = CreateBCToKSportDto.createRequestFactory(\n          requestItem\n        );\n        createBCToKSport.isManual = true;\n        if (itemLikeBC) {\n          this.syncCreateBcToKSportByBcEvent(createBCToKSport, itemLikeBC);\n        }\n\n        itemResult = await this.bcToKSportRepository.create(createBCToKSport);\n      }\n\n      /* if (!item) {\n                response.message =\n                    Locale.MSG_KSPORT_CREATE_CANDIDATE_EVENT_ERROR;\n            } */\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Update Candidate Event\n  ///////////////////////////////////////////////////////////////////////////////\n  async updateCandidateEvent(\n    updateCandidateEventRequest: KSportUpdateCandidateEventRequestDto\n  ): Promise<KSportUpdateCandidateEventResponseDto> {\n    const response = new KSportUpdateCandidateEventResponseDto();\n    response.result = false;\n\n    for (\n      let i = 0;\n      i < updateCandidateEventRequest.candidateEvents.length;\n      i++\n    ) {\n      const requestItem = updateCandidateEventRequest.candidateEvents[i];\n\n      const item = await this.bcToKSportRepository.findOne({\n        where: {\n          bcEventId: requestItem.bcEventId,\n          kSportEventId: requestItem.kSportEventId,\n        },\n      });\n\n      if (!item) {\n        continue;\n      }\n\n      const itemUpdated = UpdateBCToKSportDto.updateRequestFactory(\n        item,\n        requestItem\n      );\n\n      this.syncOtherBcEvent(itemUpdated);\n\n      await itemUpdated.save();\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Delete Candidate Event\n  ///////////////////////////////////////////////////////////////////////////////\n  async deleteCandidateEvent(\n    deleteCandidateEventRequest: KSportDeleteCandidateEventRequestDto\n  ): Promise<KSportDeleteCandidateEventResponseDto> {\n    const response = new KSportDeleteCandidateEventResponseDto();\n    response.result = false;\n\n    const bcToKSportItems = deleteCandidateEventRequest.candidateEvents;\n\n    for (let i = 0; i < bcToKSportItems.length; i++) {\n      const bcToKSportItem = bcToKSportItems[i];\n\n      const bcToKSport = await this.bcToKSportRepository.findOne({\n        where: {\n          bcEventId: bcToKSportItem.bcEventId,\n          kSportEventId: bcToKSportItem.kSportEventId,\n        },\n      });\n\n      if (!bcToKSport) {\n        continue;\n      }\n\n      await bcToKSport.destroy();\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Delete Candidate Event By Time\n  ///////////////////////////////////////////////////////////////////////////////\n  async deleteCandidateEventByTime(\n    deleteCandidateEventByTimeRequest: KSportDeleteCandidateEventByTimeRequestDto\n  ): Promise<KSportDeleteCandidateEventByTimeResponseDto> {\n    const response = new KSportDeleteCandidateEventByTimeResponseDto();\n    response.result = false;\n\n    const untilTime = moment.tz(\n      deleteCandidateEventByTimeRequest.untilTime,\n      'YYYY-MM-DD HH:mm:ss',\n      'Asia/Shanghai'\n    );\n\n    await this.bcToKSportRepository.destroy({\n      where: {\n        [Op.or]: [\n          { bcEventTime: { [Op.lt]: untilTime } },\n          { kSportEventTime: { [Op.lt]: untilTime } },\n        ],\n      },\n    });\n\n    response.result = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Set Candidate Event Correct\n  ///////////////////////////////////////////////////////////////////////////////\n  async setCandidateEventCorrect(\n    request: KSportSetCandidateEventCorrectRequestDto\n  ): Promise<KSportSetCandidateEventCorrectResponseDto> {\n    const response = new KSportSetCandidateEventCorrectResponseDto();\n    response.result = false;\n    for (let i = 0; i < request.candidateEvents.length; i++) {\n      const requestItem = request.candidateEvents[i];\n\n      const candidateEntity = await this.bcToKSportRepository.findOne({\n        where: {\n          bcEventId: requestItem.bcEventId,\n          kSportEventId: requestItem.kSportEventId,\n        },\n      });\n\n      if (!candidateEntity) {\n        response.message = Locale.MSG_KSPORT_NO_MATCHED_EVENT_ERROR;\n        return response;\n      }\n      candidateEntity.correct = requestItem.correct;\n      await candidateEntity.save();\n    }\n\n    response.result = true;\n    return response;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Find KSport Candidate By BetConstruct Team Name\n  ///////////////////////////////////////////////////////////////////////////////\n  async findCandidateTeamByBC(\n    candidateRequest: KSportFindCandidateTeamRequest\n  ): Promise<KSportFindCandidateTeamResponse> {\n    const result = new KSportFindCandidateTeamResponse();\n    result.result = false;\n\n    const openInfo = await this.kSportFetchService.openData(\n      candidateRequest.sport\n    );\n\n    if (!openInfo) {\n      result.message = Locale.MSG_KSPORT_FETCH_ERROR;\n      return null;\n    }\n\n    const { fetchData } = openInfo;\n\n    const ksportFuseItems = this.findMatchCandidateTeamByBC(\n      candidateRequest,\n      fetchData\n    );\n\n    const candidateItems: KSportCandidate[] = [];\n    const tmpTeamIds = [];\n    for (let i = 0; i < ksportFuseItems.length; i++) {\n      const ksportFuseItem = ksportFuseItems[i];\n      const candidateItem = this.factoryKSportCandidateFromFuseKSportResultItem(\n        ksportFuseItem\n      );\n\n      if (!candidateItem) {\n        continue;\n      }\n\n      if (tmpTeamIds.find((teamId) => teamId === candidateItem.teamId)) {\n        continue;\n      }\n\n      tmpTeamIds.push(candidateItem.teamId);\n\n      candidateItems.push(candidateItem);\n    }\n\n    result.items = candidateItems;\n    result.result = true;\n\n    return result;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Find KSport Team By BetConstruct Team\n  ///////////////////////////////////////////////////////////////////////////////\n  async setMatchTeamByBC(\n    matchRequest: KSportMatchRequest\n  ): Promise<KSportMatchResponse> {\n    const result = new KSportMatchResponse();\n    result.result = false;\n\n    const itemAlready = await this.bcToKSportTeamRepository.findOne({\n      where: {\n        betTeamId: matchRequest.betTeamId,\n        KSportTeamId: matchRequest.KSportTeamId,\n      },\n    });\n\n    if (itemAlready) {\n      const item = UpdateBCToKSportTeamDto.matchRequestFactory(\n        itemAlready,\n        matchRequest\n      );\n      await item.save();\n\n      result.data = item;\n      result.result = true;\n      return result;\n    }\n\n    const createBetToKSportTeam = CreateBCToKSportTeamDto.matchRequestFactory(\n      matchRequest\n    );\n\n    const ksportItem = await this.bcToKSportTeamRepository.create(\n      createBetToKSportTeam\n    );\n\n    result.data = ksportItem;\n    result.result = true;\n\n    return result;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Fetch Updated KSportResult\n  ///////////////////////////////////////////////////////////////////////////////\n  public async fetchUpdatedKSportResult(\n    force?: boolean,\n    syncStreamState?: boolean,\n    removeLast?: boolean,\n    removeExceptKSport?: boolean\n  ): Promise<boolean> {\n    /* await this.testRepository.create({\n      a: JSON.stringify('fetchUpdatedKSportResult:' + moment().format()),\n    }); */\n\n    const result = await this.kSportFetchService.fetchUpdated(force);\n\n    if (result && syncStreamState) {\n      await this.syncStreamStateByKSportResult();\n    }\n\n    if (result && removeLast) {\n      const deleteRequest = new KSportDeleteCandidateEventByTimeRequestDto();\n      deleteRequest.untilTime = moment()\n        .subtract(\n          this.configService.get<number>('ksport.stream.durationForRemoveLast'),\n          'hours'\n        )\n        .utcOffset('+08:00')\n        .format('YYYY-MM-DD HH:mm:ss');\n\n      await this.deleteCandidateEventByTime(deleteRequest);\n    }\n\n    if (result && removeExceptKSport) {\n      await this.removeExceptKSport();\n    }\n\n    return result;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Fetch Sync StreamState By KSportResult\n  ///////////////////////////////////////////////////////////////////////////////\n  public async syncStreamStateByKSportResult(): Promise<boolean> {\n    const sportsIds = Object.values(SportsEnum).filter(\n      (_sport_id) => typeof _sport_id === 'number'\n    );\n\n    for (let i = 0; i < sportsIds.length; i++) {\n      const sportId = sportsIds[i];\n      const buildStreamStateRequest = new KSportBuildStreamStateRequestDto();\n\n      buildStreamStateRequest.sport = <SportsEnum>sportId;\n\n      await this.buildStreamState(buildStreamStateRequest);\n    }\n\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Remove Except KSport\n  ///////////////////////////////////////////////////////////////////////////////\n  public async removeExceptKSport(): Promise<boolean> {\n    const kSportIds = await this.kSportFetchService.getKSportIds();\n\n    if (!kSportIds) {\n      return false;\n    }\n\n    await this.bcToKSportRepository.destroy({\n      where: {\n        kSportEventId: {\n          [Op.notIn]: kSportIds,\n        },\n      },\n    });\n\n    return true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Fetch KSport Result By ID\n  ///////////////////////////////////////////////////////////////////////////////\n  private async fetchKSportResultById(\n    kSportEventId: string\n  ): Promise<KSportResultItemDto> {\n    const host = this.configService.get<string>('KSPORT_HOST');\n    const api = this.configService.get<string>('KSPORT_API');\n\n    try {\n      const response = await this.httpService\n        .get(`http://${host}${api}`, {\n          params: { vid: kSportEventId },\n        })\n        .toPromise();\n\n      const data = response.data;\n\n      if (!data) {\n        return null;\n      }\n\n      return data;\n    } catch (error) {}\n\n    return null;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Find Match By BestConstruct AND KSportResut\n  ///////////////////////////////////////////////////////////////////////////////\n  private findMatchKSportItemByBC(\n    streamFindActiveRequest: StreamFindActiveRequestDto,\n    kSportResults: KSportResultItemDto[]\n  ): KSportResultItemDto {\n    const findOptions = new FindMatchKSportEventOptions();\n    findOptions.bcTeam1 = streamFindActiveRequest.team1;\n    findOptions.bcTeam2 = streamFindActiveRequest.team2;\n    findOptions.bcEventTime = `${streamFindActiveRequest.time}`;\n\n    const result = this.findMatchKSportItemsByBC(kSportResults, findOptions);\n\n    if (!result || result.length < 1) {\n      return null;\n    }\n\n    return result[0].item;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Find Fuzzy Match KSportItems By BC\n  ///////////////////////////////////////////////////////////////////////////////\n  private findMatchKSportItemsByBC(\n    kSportResults: KSportResultItemDto[],\n    findOptions: FindMatchKSportEventOptions\n  ): Fuse.FuseResult<KSportResultItemDto>[] {\n    const fuse = new Fuse(kSportResults, {\n      includeScore: true,\n      includeMatches: true,\n      useExtendedSearch: true,\n      threshold: 0.6,\n      minMatchCharLength: 2,\n      findAllMatches: true,\n      keys: [\n        { name: 'Opp1', weight: 10 },\n        { name: 'Opp2', weight: 10 },\n      ],\n    });\n\n    const result: Fuse.FuseResult<KSportResultItemDto>[] = fuse.search({\n      $or: [\n        {\n          $and: [\n            { Opp1: `\"${findOptions.bcTeam1}\"` },\n            {\n              Opp2: findOptions.bcTeam2\n                ? `\"${findOptions.bcTeam2}\"`\n                : `=\"NULL\"`,\n            },\n          ],\n        },\n        {\n          $and: [\n            {\n              Opp1: findOptions.bcTeam2\n                ? `\"${findOptions.bcTeam2}\"`\n                : `=\"NULL\"`,\n            },\n            { Opp2: `\"${findOptions.bcTeam1}\"` },\n          ],\n        },\n      ],\n    });\n\n    const bcEventTime = moment.tz(\n      findOptions.bcEventTime,\n      'YYYY-MM-DD HH:mm',\n      'Asia/Shanghai'\n    );\n\n    const diffHoursMax =\n      this.configService.get<number>('ksport.DIFFHOURSMAX') || 1;\n\n    return result.filter((fuseResultItem) => {\n      const kSportItem = fuseResultItem.item;\n\n      const kSportEventTime = moment.unix(kSportItem.Matchtime);\n\n      const diffHours = bcEventTime.diff(kSportEventTime, 'hours');\n\n      return Math.abs(diffHours) <= Math.abs(diffHoursMax);\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Find Match By BestConstruct AND KSportResut\n  ///////////////////////////////////////////////////////////////////////////////\n  private findMatchCandidateTeamByBC(\n    candidateRequest: KSportFindCandidateTeamRequest,\n    kSportResults: KSportResultItemDto[]\n  ): Fuse.FuseResult<KSportResultItemDto>[] {\n    const fuse = new Fuse(kSportResults, {\n      includeScore: true,\n      includeMatches: true,\n      useExtendedSearch: true,\n      threshold: 0.6,\n      minMatchCharLength: 2,\n      keys: ['Opp1', 'Opp2'],\n    });\n\n    const result: Fuse.FuseResult<KSportResultItemDto>[] = fuse.search({\n      $or: [\n        { Opp1: `\"${candidateRequest.team}\"` },\n        { Opp2: `\"${candidateRequest.team}\"` },\n      ],\n    });\n\n    if (!result || result.length < 1) {\n      return [];\n    }\n\n    return result;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Factory KSportCandidate from FuseResult<KSportResultItemDto>\n  ///////////////////////////////////////////////////////////////////////////////\n  private factoryKSportCandidateFromFuseKSportResultItem(\n    fuseKSportResultItem: Fuse.FuseResult<KSportResultItemDto>\n  ): KSportCandidate {\n    const candidateItem = new KSportCandidate();\n\n    if (fuseKSportResultItem.matches.length < 1) {\n      return null;\n    }\n\n    const match = fuseKSportResultItem.matches[0];\n\n    candidateItem.teamId = fuseKSportResultItem.item[`${match.key}ID`];\n    candidateItem.team = match.value;\n\n    return candidateItem;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Build Candidate Event Entity\n  ///////////////////////////////////////////////////////////////////////////////\n  private async buildCandidateEventEntity(\n    sportType: SportsEnum,\n    bcItem: BCItemDto,\n    ksFuseItems: Fuse.FuseResult<KSportResultItemDto>[],\n    checkStreamStatusByDurationBeforePlaying: boolean = false\n  ): Promise<BCToKSportModel[]> {\n    const items: BCToKSportModel[] = [];\n    for (let i = 0; i < ksFuseItems.length; i++) {\n      const ksFuseItem = ksFuseItems[i];\n      const ksItem = ksFuseItem.item;\n\n      if (checkStreamStatusByDurationBeforePlaying) {\n        ksItem.StreamInfo.state = this.checkStatemStatusByDurationBeforePlaying(\n          ksItem\n        );\n      }\n\n      const itemAlready = await this.bcToKSportRepository.findOne({\n        where: {\n          bcEventId: bcItem.bcEventId,\n          kSportEventId: ksItem.vid,\n        },\n      });\n      const itemLikeBC = await this.bcToKSportRepository.findOne({\n        where: {\n          bcEventId: bcItem.bcEventId,\n        },\n      });\n\n      if (itemAlready) {\n        const bcToKSportItem = UpdateBCToKSportDto.factory(\n          itemAlready,\n          sportType,\n          bcItem,\n          ksItem,\n          ksFuseItem.score\n        );\n\n        if (itemLikeBC) {\n          this.syncItemBcEvent(bcToKSportItem, itemLikeBC);\n        }\n\n        await bcToKSportItem.save();\n\n        items.push(bcToKSportItem);\n        continue;\n      }\n\n      const createBCToKSport = CreateBCToKSportDto.factory(\n        sportType,\n        bcItem,\n        ksItem,\n        ksFuseItem.score,\n        false\n      );\n      if (itemLikeBC) {\n        this.syncCreateBcToKSportByBcEvent(createBCToKSport, itemLikeBC);\n      }\n\n      const item = await this.bcToKSportRepository.create(createBCToKSport);\n\n      if (!item) {\n        continue;\n      }\n\n      items.push(item);\n    }\n\n    return items;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Build Strem State Entity With KSport Result && BCToKSportModel[]\n  ///////////////////////////////////////////////////////////////////////////////\n  private async buildStreamStateEntities(\n    kSportResultItem: KSportResultItemDto,\n    bcToKSports: BCToKSportModel[],\n    checkStreamStatusByDurationBeforePlaying: boolean = false\n  ) {\n    if (checkStreamStatusByDurationBeforePlaying) {\n      kSportResultItem.StreamInfo.state = this.checkStatemStatusByDurationBeforePlaying(\n        kSportResultItem\n      );\n    }\n\n    for (let i = 0; i < bcToKSports.length; i++) {\n      const bcToKSport = bcToKSports[i];\n\n      if (\n        kSportResultItem.StreamName === bcToKSport.kSportStreamId &&\n        bcToKSport.streamState === kSportResultItem.StreamInfo.state\n      ) {\n        continue;\n      }\n\n      bcToKSport.kSportStreamId = kSportResultItem.StreamName;\n      bcToKSport.streamState = kSportResultItem.StreamInfo.state;\n\n      await bcToKSport.save();\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Check StatemSatus By Duration Before Playing\n  ///////////////////////////////////////////////////////////////////////////////\n  private checkStatemStatusByDurationBeforePlaying(\n    kSportResultItem: KSportResultItemDto\n  ) {\n    if (!kSportResultItem.StreamInfo.state) {\n      return false;\n    }\n\n    const durationLimit = this.configService.get<number>(\n      'ksport.stream.validDurationBeforePlaying'\n    );\n\n    const kSportEventTime = moment.unix(kSportResultItem.Matchtime);\n\n    const duration = kSportEventTime.diff(moment(), 'minutes');\n\n    if (duration > durationLimit) {\n      console.log(durationLimit, ', ', duration);\n    }\n\n    return duration <= durationLimit;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Sync BcEvent State\n  ///////////////////////////////////////////////////////////////////////////////\n  private async syncOtherBcEvent(item: BCToKSportModel) {\n    const bcEventId = item.bcEventId;\n    const isKilled = item.isKilled;\n\n    const otherItems = await this.bcToKSportRepository.findAll({\n      where: {\n        bcEventId,\n        isKilled: !isKilled,\n      },\n    });\n\n    for (let i = 0; i < otherItems.length; i++) {\n      const otherItem = otherItems[i];\n\n      otherItem.isKilled = isKilled;\n\n      await otherItem.save();\n    }\n  }\n\n  private syncItemBcEvent(dstItem: BCToKSportModel, srcItem: BCToKSportModel) {\n    dstItem.isKilled = srcItem.isKilled;\n  }\n\n  private syncCreateBcToKSportByBcEvent(\n    dstItem: CreateBCToKSportDto,\n    srcItem: BCToKSportModel\n  ) {\n    dstItem.isKilled = srcItem.isKilled;\n  }\n}\n","export class FindMatchKSportEventOptions {\n  bcTeam1: string;\n  bcTeam2: string;\n  bcEventTime: string;\n}\n","import { Controller, Get, Post, Query } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { apiPathsEnum, apiTagsEnum } from '@workspace/enums';\nimport { StreamService } from './stream.service';\nimport {\n  StreamFindActiveByBCRequestDto,\n  StreamFindActiveByBCResponseDto,\n  StreamFindActiveRequestDto,\n  StreamFindActiveResponseDto,\n} from '@workspace/dto';\nimport {FileManager} from '../shared/file.manage';\n\n@Controller(apiPathsEnum.stream)\n@ApiTags(apiTagsEnum.streamEndpoints)\nexport class StreamController {\n  constructor(private readonly streamService: StreamService) {}\n\n  // @Get(apiPathsEnum.getStream)\n  // findActive(\n  //   @Query() query: StreamFindActiveRequestDto\n  // ): Promise<StreamFindActiveResponseDto> {\n  //   // FileManager.writeFileAsync( 'streamtmp/test.txt', '你們好');    \n  //   // FileManager.readFileASync( 'streamtmp/test.txt');    \n  //   return null;\n  //   return this.streamService.findActiveStream(query);\n  // }\n\n  @Get(apiPathsEnum.getStreamByBC)\n  findActiveByBC(\n    @Query() query: StreamFindActiveByBCRequestDto\n  ): Promise<StreamFindActiveByBCResponseDto> {\n    return this.streamService.findActiveStreamByBC(query);\n  }\n}\n","import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class NoKSportExeception extends HttpException {\n  constructor() {\n    super('Not Found KSport Item', HttpStatus.SERVICE_UNAVAILABLE);\n  }\n}\n\nexport class StreamUnavailableExeception extends HttpException {\n  constructor() {\n    super('Stream unavailable', HttpStatus.SERVICE_UNAVAILABLE);\n  }\n}\n\nexport class TencemtGetStreamStateExeception extends HttpException {\n  constructor() {\n    super('Tencent get stream state error', HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { StreamService } from './stream.service';\nimport { StreamController } from './stream.controller';\n\nimport { KSportModule } from './ksport/ksport.module';\nimport { TecentModule } from './tencent/tencent.module';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BCToKSportModel } from './ksport/entities/bc.ksport.entity';\n\nimport { ConfigModule } from '@nestjs/config';\nimport configuration from './configuration';\n\n@Module({\n  controllers: [StreamController],\n  providers: [StreamService],\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n    KSportModule,\n    TecentModule,\n    SequelizeModule.forFeature([BCToKSportModel]),\n  ],\n})\nexport class StreamModule {}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport {\n  StreamFindActiveByBCRequestDto,\n  StreamFindActiveByBCResponseDto,\n  StreamFindActiveRequestDto,\n  StreamFindActiveResponseDto,\n} from '@workspace/dto';\nimport * as Locale from '../locale';\nimport { KSportService } from './ksport/ksport.service';\nimport { TencentService } from './tencent/tencent.service';\nimport * as moment from 'moment';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { BCToKSportModel } from './ksport/entities/bc.ksport.entity';\nimport { WhereOptions, Op } from 'sequelize';\nimport { FileManager } from '../shared/file.manage';\nimport { KSportResultItemDto } from './ksport/dto/ksport.result.item.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { Sequelize } from 'sequelize-typescript';\nimport { LocaleEnum } from '@workspace/enums';\n\n@Injectable()\nexport class StreamService {\n  constructor(\n    private ksportService: KSportService,\n    private tecentSercice: TencentService,\n\n    @InjectModel(BCToKSportModel)\n    private bcToKSportRepository: typeof BCToKSportModel\n  ) {}\n\n  async findActiveStreamByBC(\n    request: StreamFindActiveByBCRequestDto\n  ): Promise<StreamFindActiveByBCResponseDto> {\n    const streamResult = new StreamFindActiveByBCResponseDto();\n    streamResult.result = false;\n\n    const bcEventId = request.bcEventId;\n    const localeId: number = LocaleEnum[request.locale];\n\n    const bcToKSport = await this.bcToKSportRepository.findOne({\n      attributes: [\n        [\n          Sequelize.literal('distinct on(\"bcEventId\") \"bcEventId\"'),\n          'bcEventId',\n        ],\n        'streamState',\n        'isManual',\n        'correct',\n        'matchScore',\n        'kSportStreamId',\n        'kSportEventId',\n      ],\n      where: {\n        bcEventId,\n        //correct: true,\n      },\n      order: [\n        ['bcEventId', 'ASC'],\n        ['isManual', 'DESC'],\n        ['correct', 'DESC'],\n        ['matchScore', 'ASC'],\n        ['streamState', 'DESC'],\n        ['isStreamCn', localeId === LocaleEnum.cn ? 'DESC' : 'ASC'],\n        ['isStreamHd', 'DESC'],\n      ],\n    });\n\n    if (!bcToKSport) {\n      streamResult.message = Locale.MSG_STREAM_NO_KSPORT_MATCH;\n      return streamResult;\n    }\n\n    if (!bcToKSport.streamState) {\n      streamResult.message = Locale.MSG_STREAM_UNAVAILABLE;\n      return streamResult;\n    }\n\n    const streamUrl = await this.tecentSercice.findActiveStream(\n      bcToKSport.kSportStreamId\n    );\n\n    if (!streamUrl) {\n      streamResult.message = Locale.MSG_STREAM_UNAVAILABLE;\n      return streamResult;\n    }\n\n    streamResult.result = true;\n    streamResult.streamUrl = streamUrl;\n\n    return streamResult;\n  }\n\n  async findActiveStream(streamFindActiveRequest: StreamFindActiveRequestDto) {\n    const streamResult = new StreamFindActiveResponseDto();\n    streamResult.result = false;\n\n    const findItem = await this.ksportService.findByBC(streamFindActiveRequest);\n\n    if (!findItem) {\n      streamResult.message = Locale.MSG_STREAM_NO_KSPORT_MATCH;\n      return streamResult;\n    }\n\n    if (\n      !findItem.StreamInfo ||\n      (findItem.StreamInfo && !findItem.StreamInfo.state)\n    ) {\n      streamResult.message = Locale.MSG_STREAM_UNAVAILABLE;\n      return streamResult;\n    }\n\n    const streamUrl = await this.tecentSercice.findActiveStream(\n      findItem.StreamName\n    );\n    if (!streamUrl) {\n      streamResult.message = Locale.MSG_STREAM_UNAVAILABLE;\n      return streamResult;\n    }\n\n    streamResult.result = true;\n    streamResult.streamUrl = streamUrl;\n\n    return streamResult;\n  }\n}\n","export class TencentRequestDto {\n  Action: string;\n  Version: string;\n  //Region: string;\n  AppName: string;\n  DomainName: string;\n  StreamName: string;\n}\n","import {\n  getTencentStreamState,\n  TencentStreamStateEnum,\n} from '../enums/tencent.stream.state.enum';\nimport { DescribeLiveStreamStateResponse } from 'tencentcloud-sdk-nodejs/tencentcloud/services/live/v20180801/live_models';\n\nexport class TencentResultDto {\n  RequestId: string;\n  StreamState: TencentStreamStateEnum;\n\n  public static responseFactory(\n    data: DescribeLiveStreamStateResponse\n  ): TencentResultDto {\n    const tencentResult = new TencentResultDto();\n\n    const { RequestId, StreamState } = data;\n\n    tencentResult.RequestId = RequestId || null;\n    tencentResult.StreamState = getTencentStreamState(StreamState) || null;\n\n    return tencentResult;\n  }\n}\n","export enum TencentStreamStateEnum {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n  FORBIDDEN = 'forbid',\n}\n\nexport function getTencentStreamState(state: string) {\n  let tencentStreamState = null;\n\n  switch (state) {\n    case 'active':\n      tencentStreamState = TencentStreamStateEnum.ACTIVE;\n      break;\n    case 'inactive':\n      tencentStreamState = TencentStreamStateEnum.INACTIVE;\n      break;\n    case 'forbid':\n      tencentStreamState = TencentStreamStateEnum.FORBIDDEN;\n      break;\n  }\n\n  return tencentStreamState;\n}\n","import { Controller } from '@nestjs/common';\nimport { TencentService } from './tencent.service';\n\n@Controller('tencent')\nexport class TencentController {\n  constructor(private readonly tecentService: TencentService) {}\n}\n","import { HttpModule, Module } from '@nestjs/common';\nimport { TencentService } from './tencent.service';\nimport { TencentController } from './tencent.controller';\n\n@Module({\n  controllers: [TencentController],\n  providers: [TencentService],\n  imports: [\n    HttpModule.register({\n      timeout: 15000,\n      maxRedirects: 5,\n    }),\n  ],\n  exports: [TencentService],\n})\nexport class TecentModule {}\n","import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { KSportResultItemDto } from '../ksport/dto/ksport.result.item.dto';\nimport { TencentRequestDto } from './dto/tencent.request.dto';\nimport * as tencentcloud from 'tencentcloud-sdk-nodejs';\nimport { TencentResultDto } from './dto/tencent.result.dto';\nimport { TencentStreamStateEnum } from './enums/tencent.stream.state.enum';\n\nimport * as moment from 'moment';\nimport * as md5 from 'md5';\nimport { TencemtGetStreamStateExeception } from '../stream.exeception';\n\n@Injectable()\nexport class TencentService {\n  constructor(private configService: ConfigService) {}\n\n  async findActiveStream(kSportStreamId: string): Promise<string> {\n    const streamState = await this.getStreamState(kSportStreamId);\n\n    if (streamState !== TencentStreamStateEnum.ACTIVE) {\n      //throw new StreamUnavailableExeception();\n      return null;\n    }\n\n    const streamUrl = this.getStreamUrl(kSportStreamId);\n\n    return streamUrl;\n  }\n\n  private async getStreamState(\n    ksportStreamId: string\n  ): Promise<TencentStreamStateEnum> {\n    let streamState = TencentStreamStateEnum.INACTIVE;\n\n    const LiveClient = tencentcloud.live.v20180801.Client;\n\n    const host = this.configService.get<string>('TENCENT_HOST');\n\n    const clientConfig = {\n      credential: {\n        secretId: this.configService.get<string>('TENCENT_SECRET_ID'),\n        secretKey: this.configService.get<string>('TENCENT_SECRET_KEY'),\n      },\n      region: '',\n      profile: {\n        httpProfile: {\n          endpoint: host,\n        },\n      },\n    };\n\n    const client = new LiveClient(clientConfig);\n\n    const params = new TencentRequestDto();\n\n    params.AppName = this.configService.get<string>('TENCENT_PUSH_APPNAME');\n    params.DomainName = this.configService.get<string>('TENCENT_PUSH_DOMAIN');\n    params.StreamName = ksportStreamId;\n\n    try {\n      const data = await client.DescribeLiveStreamState(params);\n\n      const result = TencentResultDto.responseFactory(data);\n\n      streamState = result.StreamState;\n    } catch (error) {\n      throw new TencemtGetStreamStateExeception();\n    }\n\n    return streamState;\n  }\n\n  private getStreamUrl(kSportStreamId: string): string {\n    const pullDomain = this.configService.get<string>('TENCENT_PULL_DOMAIN');\n    const pullAppName = this.configService.get<string>('TENCENT_PULL_APPNAME');\n    const deltaExpiration = this.configService.get<string>(\n      'TENCENT_DELTA_EXPIRATION_MINUTES'\n    );\n    const expirationTime = moment().add(deltaExpiration, 'minutes');\n    const txTime = expirationTime.unix().toString(16);\n\n    const key = this.configService.get<string>('TENCENT_PULL_COPYRIGHTKEY');\n\n    const txSecret = md5(`${key}${kSportStreamId}${txTime}`);\n\n    const streamUrl =\n      `https://${pullDomain}/${pullAppName}/` +\n      `${kSportStreamId}.m3u8?` +\n      `txSecret=${txSecret}` +\n      `&txTime=${txTime}`;\n\n    return streamUrl;\n  }\n}\n","import { Controller } from '@nestjs/common';\nimport { apiPathsEnum,  } from '@workspace/enums';\nimport { UserService } from './user.service';\n\n\n@Controller(apiPathsEnum.user)\nexport class UserController {\n  constructor(private userService: UserService) {\n  }\n}\n","import {\n  Model,\n  Table,\n  Column,\n  DataType,\n  BeforeCreate,\n} from 'sequelize-typescript';\nconst uuid = require('uuid').v4;\nconst bcrypt = require('bcrypt');\n\n@Table({ tableName: 'user' })\nexport class UserModel extends Model<UserModel> {\n  @Column({\n    type: DataType.UUIDV4,\n    defaultValue: DataType.UUIDV4,\n    allowNull: false,\n    primaryKey: true,\n    unique: true,\n  })\n  id: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: false,\n  })\n  lastName: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  password: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  twoFactorAuthenticationSecret: string;\n\n  // @BeforeValidate\n  // static mockId(user: UserModel) {\n  //   if (user.id === undefined && user.password) {\n  //\n  //    }\n  //  }\n  @BeforeCreate\n  public static async prepareCreate(user: UserModel) {\n    user.id = uuid();\n    user.password = await bcrypt.hash(user.password, 10);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { UserController } from './user.controller';\nimport { UserModel } from './user.model';\nimport { UserService } from './user.service';\n\n\n@Module({\n  imports: [SequelizeModule.forFeature([UserModel])],\n  controllers: [UserController],\n  providers: [UserService, UserModel],\n  exports: [UserService]\n})\nexport class UserModule {}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport * as bcrypt from 'bcrypt';\nimport { UserModel } from './user.model';\nimport {\n  LoginDto,\n  Payload,\n  UserRequestDto,\n  UserEmailDto,\n  LoginResponseDto,\n  UserTokenDto,\n} from '@workspace/dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel(UserModel)\n    private userRepository: typeof UserModel\n  ) {}\n\n  async create(userDto: UserRequestDto) {\n    const user = await this.userRepository.findOne({\n      where: {\n        email: userDto.email,\n      },\n    });\n    if (user) {\n      throw new HttpException('User already exists', HttpStatus.BAD_REQUEST);\n    }\n\n    const createdUser = new this.userRepository(userDto);\n    await createdUser.save();\n    return this.sanitizeUser(createdUser);\n  }\n\n  async find(request: UserEmailDto) {\n    return this.userRepository.findAll({\n      where: {\n        email: request.email,\n      },\n    });\n  }\n\n  async findByLogin(userDto: LoginDto): Promise<UserModel> {\n    const user = await this.userRepository.findOne({\n      where: {\n        email: userDto.email,\n      },\n    });\n    if (!user) {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n\n    if (await bcrypt.compare(userDto.password, user.password)) {\n      return this.sanitizeUser(user);\n    } else {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n  }\n\n  async findByPayload(payload: Payload) {\n    return this.userRepository.findOne({\n      where: {\n        email: payload.email,\n      },\n    });\n  }\n\n  async findById(userId: string) {\n    return this.userRepository.findByPk(userId);\n  }\n\n  sanitizeUser(user: UserModel) {\n    const sanitized = user;\n    delete sanitized['password'];\n    return sanitized;\n  }\n\n  sanitizeToken(user: UserTokenDto, twoFactorSecret: string): UserRequestDto {\n    const sanitized = user;\n    delete sanitized['token'];\n    return { ...sanitized, twoFactorAuthenticationSecret: twoFactorSecret };\n  }\n}\n","export const environment = {\n  production: false,\n  settings: {\n    baseUrl: 'https://lr.100100188.com',\n  },\n};\n","import { ValidationPipe } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { NestFactory } from '@nestjs/core';\nimport { WINSTON_MODULE_NEST_PROVIDER } from 'nest-winston';\n\nimport { AppModule } from './app/app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\n\nimport * as requestIp from 'request-ip';\nimport { filterRequest } from './app/middleware/filter.request.middleware';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  app.use(filterRequest);\n\n  const configService = app.get(ConfigService);\n  const globalPrefix = configService.get('BACKEND_PREFIX');\n  app.setGlobalPrefix(globalPrefix);\n\n  if (configService.get('ENVIRONMENT') === 'development' || 'stage') {\n    const swaggerOptions = new DocumentBuilder()\n      .setTitle('100Bet API documentation')\n      .setDescription(\n        'Below You can test out the backend api and read the description of all endpoints and it`s examples'\n      )\n      .setVersion('0.0.1')\n      .addBearerAuth({\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'jwt',\n      })\n      .build();\n    const swaggerDocument = SwaggerModule.createDocument(app, swaggerOptions);\n\n    SwaggerModule.setup(globalPrefix, app, swaggerDocument, {\n      swaggerUrl: `${configService.get('BACKEND_HOST')}/api/docs-json/`,\n      explorer: true,\n      swaggerOptions: {\n        docExpansion: 'list',\n        filter: true,\n        displayRequestDuration: true,\n      },\n      customCss:\n        '.opblock-summary-path {font-size: 18px !important; font-weight: normal !important;}' +\n        '.opblock-summary-description {font-size: 18px !important; text-align: right !important;' +\n        'font-weight: bold !important;}',\n    });\n  }\n  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER));\n  app.useGlobalPipes(\n    new ValidationPipe({\n      whitelist: false,\n      transform: true,\n    })\n  );\n\n  app.use(requestIp.mw());\n\n  app.enableCors({\n    origin: true,\n  });\n  const port = configService.get('BACKEND_PORT');\n  await app.listen(port);\n}\n\n\n\nbootstrap();\n","export * from './lib/user.request.dto';\nexport * from './lib/user.response.dto';\nexport * from './lib/stream.find.active.request.dto';\nexport * from './lib/stream.find.active.response.dto';\nexport * from './lib/stream.find.active.bybc.request.dto';\nexport * from './lib/stream.find.active.bybc.response.dto';\n","import { ApiProperty } from '@nestjs/swagger';\nimport { LocaleEnum } from '@workspace/enums';\nimport { IsEnum, IsNotEmpty, IsString } from 'class-validator';\n\nexport class StreamFindActiveByBCRequestDto {\n  @ApiProperty({\n    enum: LocaleEnum,\n  })\n  @IsEnum(LocaleEnum)\n  @IsNotEmpty()\n  locale: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  bcEventId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  session_id: string;\n}\n","export class StreamFindActiveByBCResponseDto {\n    result: boolean;\n    streamUrl: string;\n    message: string;\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport { SportsEnum } from '@workspace/enums';\nimport { IsNotEmpty, IsString, Matches, IsEnum } from 'class-validator';\n\nexport class StreamFindActiveRequestDto {\n    @ApiProperty({\n        enum: SportsEnum\n    })\n    @IsNotEmpty()\n    @IsEnum(SportsEnum)\n    sport: SportsEnum;\n\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    team1: string;\n\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    team2: string;\n\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    //@Matches(/^[01][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]$/i)\n    @Matches(/^[0-9]{4}-[0-2][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]$/i)\n    time: string;\n\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    session_id: string;\n}\n","export class StreamFindActiveResponseDto {\n    result: boolean;\n    datetime: string;\n    streamUrl: string;\n    message: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Exclude } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class UserIdDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsUUID('4')\n  readonly id: number;\n}\n\nexport class UserEmailDto {\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n}\n\nexport class LoginDto extends UserEmailDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthenticationCode: string;\n}\n\nexport class ResetPassDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  confirmPassword: string;\n}\n\nexport class UserRequestDto extends UserEmailDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthenticationSecret: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly firstName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly lastName: string;\n}\n\nexport class UserTokenDto extends UserEmailDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly firstName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly lastName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n\n  static checkToken(token: string) {\n    return token === process.env.SECRET_TOKEN;\n  }\n}\n\nexport class UserUpdateDto {\n  @ApiPropertyOptional()\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  firstName: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  lastName: string;\n\n  @ApiPropertyOptional()\n  @IsEmail()\n  @IsOptional()\n  email: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  password: string;\n}\n\nexport interface AuthenticationResponse {\n  token: string;\n}\n\nexport interface Payload {\n  email: string;\n  firstName: string;\n  lastName: string;\n  iat?: Date;\n  expiresIn?: string;\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsNumber, IsOptional, IsString, IsUUID } from 'class-validator';\n\n\n\nexport class LoginResponseDto {\n\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly firstName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly lastName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n\n\n","import { ApiEndpointDescriptionEnum } from './lib/api-endpoint-description.enum';\nimport { ApiParamsEnum } from './lib/api-params.enum';\nimport { ApiPathsEnum } from './lib/api-paths.enum';\nimport { ApiTagsEnum } from './lib/api-tags.enum';\nimport {\n    OrderStatusEnum,\n    DepositChannelEnum,\n    PaymentProviderEnum,\n    BankCodeEnum,\n} from './lib/payment.enum';\nimport { SportsEnum } from './lib/stream.enum';\n\nexport * from './lib/payment.enum';\nexport * from './lib/stream.enum';\n\nexport const apiPathsEnum = ApiPathsEnum;\nexport const apiTagsEnum = ApiTagsEnum;\nexport const apiEndpointDecriptionEnum = ApiEndpointDescriptionEnum;\nexport const apiParamsEnum = ApiParamsEnum;\nexport const orderStatusEnum = OrderStatusEnum;\nexport const channelEnum = DepositChannelEnum;\nexport const paymentProviderEnum = PaymentProviderEnum;\nexport const bankCodeEnum = BankCodeEnum;\nexport const sportsEnum = SportsEnum;\n","export enum ApiEndpointDescriptionEnum {\n  user = 'Users Endpoint',\n  userLogin = 'Login For Users',\n  userRegister = 'Register User',\n  userCreate = 'Create User',\n  userResetPass = 'Reset User Password',\n  userResetTwoFactorAuthSecret = 'Reset Two Factor Auth Secret',\n  userGetTwoFactorAuthQrCode = 'Get Two Factor Auth QrCode',\n  userAll = 'Get All Users',\n  userPost = 'Create User',\n  userGet = 'Get Users List',\n  userGetById = 'Get User by Id',\n  userGetByUserName = 'Get User by UserName',\n  userPut = 'Update User',\n  userDelete = 'Delete User',\n  getModuleModelLeads = 'Get Leads Module Model',\n  createModuleModelLeads = 'Create/Update Leads Module Model',\n  paymentDeposit = 'Deposit',\n  paymentDepositByCard = 'Deposit By Card',\n  paymentManualDeposit = 'ManualDeposit',\n  paymentTestDeposit = 'TestDeposit',\n  paymentDepositMakeSuccess = 'Make deposit success',\n  paymentWithdraw = 'Withdraw',\n  paymentManualWithdraw = 'ManualWithdraw',\n  getDepositablePaymentSystems = 'Get Depositable PaymentSystems',\n  getDepositableUsdtProtos = 'Get Depositable UsdtProtos',\n  getDepositableChannels = 'Get Depositable Channels',\n  getWithdrawableBanks = 'Get Withdrawable Banks',\n  depositMSZFCallback = 'Deposit Callback for MSZF',\n  withdrawMSZFCallback = 'Withdraw Callback for MSZF',\n  depositD1FCallback = 'Deposit Callback for D1F',\n  withdrawD1FCallback = 'Withdraw Callback for D1F',\n  depositXingChenCallback = 'Deposit Callback for XingChen',\n  withdrawXingChenCallback = 'Withdraw Callback for XingChen',\n  depositUzPAYCallback = 'Deposit Callback for UzPAY',\n  withdrawUzPAYCallback = 'Withdraw Callback for UzPAY',\n  depositSDDCallback = 'Deposit Callback for SDD',\n  withdrawSDDCallback = 'Withdraw Callback for SDD',\n  depositJBPCallback = 'Deposit Callback for JBP',\n  withdrawJBPCallback = 'Withdraw Callback for JBP',\n  depositHengXinCallback = 'Deposit Callback for HengXin',\n  withdrawHengXinCallback = 'Withdraw Callback for HengXin',\n  depositBisaCallback = 'Deposit Callback for Bisa',\n  withdrawBisaCallback = 'Withdraw Callback for Bisa',\n  cmsHeroBannerCreate = 'cmsHeroBannerCreate',\n  cmsHeroBannerUpload = 'cmsHeroBannerUpload',\n}\n","export enum ApiParamsEnum {\n    user = 'user',\n    id = 'id',\n    leadId = 'leadId',\n    username = 'username',\n    password = 'password',\n    email = 'email',\n}\n","export enum ApiPathsEnum {\n  api = 'api',\n  auth = 'auth',\n  users = 'users',\n  leads = 'leads',\n  login = 'login',\n  register = 'register',\n  user = 'user',\n  delete = 'delete',\n  create = 'create',\n  reset = 'resetpass',\n  resetTwoFactorAuthSecret = 'reset2fasecret',\n  getTwoFactorAuthQrCode = 'get2faqrcode',\n  id = ':id',\n  allUsers = 'allUsers',\n  channel = 'channel',\n  bank = 'bank',\n  usdtProto = 'usdtproto',\n  payment = 'payment',\n  paymentProvider = 'paymentprovider',\n  paymentProviderChannel = 'paymentproviderchannel',\n  paymentProviderBank = 'paymentproviderbank',\n  paymentProviderCard = 'paymentprovidercard',\n  paymentProviderUsdtProto = 'paymentproviderusdtproto',\n  deposit = 'deposit',\n  depositByCard = 'depositbycard',\n  manualDeposit = 'manualdeposit',\n  testDeposit = 'testdeposit',\n  manualWithdraw = 'manualwithdraw',\n  depositMakeSuccess = 'deposit/makeitsuccess',\n  withdraw = 'withdraw',\n  withdrawMakeSuccess = 'withdraw/makeitsuccess',\n  getDepositablePaymentSystems = 'getdepositablepaymentmethods',\n  getDepositableUsdtProtos = 'getdepositableusdtprotos',\n  getDepositableChannels = 'getdepositablechannels',\n  getWithdrawableBanks = 'getwithdrawablebanks',\n  checkChannelsDepositable = 'checkchannelsdepositable',\n  checkBanksWithdrawable = 'checkbankswithdrawable',\n  mszfcallback = 'mszfcallback',\n  mszfcallbackDeposit = 'mszfcallback/deposit',\n  mszfcallbackWithdraw = 'mszfcallback/withdraw',\n  d1fcallbackDeposit = 'd1fcallback/deposit',\n  d1fcallbackWithdraw = 'd1fcallback/withdraw',\n  xingchencallbackDeposit = 'xingchencallback/deposit',\n  xingchencallbackWithdraw = 'xingchencallback/withdraw',\n  uzpaycallbackDeposit = 'uzpaycallback/deposit',\n  uzpaycallbackWithdraw = 'uzpaycallback/withdraw',\n  sddcallbackDeposit = 'sddcallback/deposit',\n  sddcallbackWithdraw = 'sddcallback/withdraw',\n  hengxincallbackDeposit = 'hengxincallback/deposit',\n  hengxincallbackWithdraw = 'hengxincallback/withdraw',\n  jbpcallbackDeposit = 'jbpcallback/deposit',\n  jbpcallbackWithdraw = 'jbpcallback/withdraw',\n  bisacallbackDeposit = 'bisacallback/deposit',\n  bisacallbackWithdraw = 'bisacallback/withdraw',\n  stream = 'stream',\n  getStream = 'get',\n  getStreamByBC = 'getbybc',\n  getStreamState = 'getstreamstate',\n  getStreamStateSome = 'getstreamstatesome',\n  fetchUpdate = 'fetchupdate',\n  buildStreamState = 'buildstreamstate',\n  buildStreamStateSome = 'buildstreamstatesome',\n  findallKSportCandidateEvent = 'getcandidateevent',\n  buildKSportCandidateEventByBet = 'buildcandidateevent',\n  createKSportCandidateEvent = 'createcandidateevent',\n  updateKSportCandidateEvent = 'updatecandidateevent',\n  deleteKSportCandidateEvent = 'deletecandidateevent',\n  deleteKSportCandidateEventByTime = 'deletecandidateeventbytime',\n  setKSportCandidateEventCorrect = 'setcandidateeventcorrect',\n  findKSportCandidateTeam = 'findcandidateteam',\n  setKSportMatchTeam = 'setmatchteam',\n  uploadHeroBanner = 'uploadHeroBanner',\n  cmsHeroBannerUpload = 'cmsHeroBannerUpload',\n  createHeroBanner = 'createHeroBanner',\n  cmsHeroBannerCreate = 'cmsHeroBannerCreate',\n  banners = 'banners',\n  cmsEndpoints = 'cmsEndpoints',\n  getPaymentProviders = 'gets',\n  updatePaymentProviders = 'update',\n  updatePaymentProviderChannels = 'update',\n  updatePaymentProviderBanks = 'update',\n  updatePaymentProviderUsdtProtos = 'update',\n  createPaymentProviderCards = 'create',\n  updatePaymentProviderCards = 'update',\n  deletePaymentProviderCards = 'delete',\n  getPaymentProviderChannels = 'gets',\n  getPaymentProviderBanks = 'gets',\n  getPaymentProviderCards = 'gets',\n  getPaymentProviderUsdtProtos = 'gets',\n  depositAllOrders = 'depositallorders',\n  withdrawAllOrders = 'withdrawallorders',\n  getDepositAllOrders = 'gets',\n  getWithdrawAllOrders = 'gets',\n  getChannels = 'gets',\n  getBanks = 'gets',\n  getUsdtProtos = 'gets',\n  options = 'options',\n  notify = 'notify',\n  getOptionsGeneral = 'general',\n  updateOptionsGeneral = 'general/update',\n  getNotify = 'get',\n}\n","export enum ApiTagsEnum {\n  authentication = 'Authentication Endpoints',\n  userEndpoints = 'User Endpoints',\n  paymentEndpoints = 'Payment Endpoints',\n  streamEndpoints = 'Stream Endpoints',\n  cmsEndpoints = 'Cms Endpoints',\n  optionsEndpoints = 'Options Endpoints',\n  notifyEndpoints = 'Notify Endpoints',\n}\n","export enum OrderStatusEnum {\n  NEW = 'new',\n  WAITINGPAID = 'readyToPay',\n  PENDING = 'pending',\n  FAILED = 'failed',\n  SUCCESS = 'success',\n}\n\nexport enum LocaleEnum {\n  en = 1,\n  cn = 2,\n}\n\nexport enum PaymentSystemEnum {\n  ALIPAY = 1,\n  WECHAT = 2,\n  BANK = 3,\n  UNIONPAYAPP = 4,\n  USDT = 5,\n}\n\nexport enum DepositChannelEnum {\n  ALIPAYTOBANK = 1,\n  WECHATTOBANK = 2,\n  BANKTOBANK = 3,\n  BANKTOALIPAY = 4,\n}\n\nexport enum BankCodeEnum {\n  ICBC = 1,\n  ABOC = 2,\n  BOC = 3,\n  CCB = 4,\n  BOCOM = 5,\n  PSBC = 6,\n  CEB = 7,\n  CMBC = 8,\n  CMB = 9,\n  ECITIC = 10,\n  HXB = 11,\n  SPDB = 12,\n  PAB = 13,\n  CGB = 14,\n  CIB = 15,\n  BOB = 16,\n  BOS = 17,\n  NBCB = 18,\n  HZB = 19,\n  BCRCB = 20,\n  HCCBCNBH = 21,\n  ZJCBCN2N = 22,\n  CHCCCNSS = 23,\n  QCCBCNBQ = 24,\n}\n\nexport enum PaymentProviderEnum {\n  MSZF = 1,\n  D1F = 2,\n  XINGCHEN = 3,\n  UZPAY = 4,\n  SDD = 5,\n  HENGXIN = 6,\n  JBP = 7,\n  SXC = 8,\n  DBPay = 9,\n  Bisa = 10,\n}\n\nexport enum CurrencyEnum {\n  USD = 'USD',\n  EUR = 'EUR',\n  BRI = 'BRI',\n  CNY = 'CNY',\n}\n\nexport enum UsdtProtocolEnum {\n  TRC20 = 1,\n  ERC20 = 2,\n  OMNI = 3,\n  BEP2 = 4,\n  EOS = 5,\n  Algorand = 6,\n}\n","export enum SportsEnum {\n    football = 1,\n    basketball = 3,\n    tennis = 4,\n    baseball = 5,\n    volleyball = 6,\n    rugby = 7,\n    pingpong = 10,\n    billiards = 12,\n    badminton = 16,\n    dianjing = 40,\n    other = 999,\n}","module.exports = require(\"@nestjs/bull\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/sequelize\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@sindresorhus/fnv1a\");","module.exports = require(\"bcrypt\");","module.exports = require(\"bull\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"express\");","module.exports = require(\"fuse.js\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"libphonenumber-js\");","module.exports = require(\"md5\");","module.exports = require(\"mobile-detect\");","module.exports = require(\"moment\");","module.exports = require(\"moment-timezone\");","module.exports = require(\"multer\");","module.exports = require(\"nest-winston\");","module.exports = require(\"numeral\");","module.exports = require(\"otplib\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"path\");","module.exports = require(\"qrcode\");","module.exports = require(\"qs\");","module.exports = require(\"request-ip\");","module.exports = require(\"sequelize\");","module.exports = require(\"sequelize-typescript\");","module.exports = require(\"tencentcloud-sdk-nodejs\");","module.exports = require(\"tslib\");","module.exports = require(\"uuid\");","module.exports = require(\"winston\");"],"sourceRoot":""}