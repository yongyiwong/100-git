{"version":3,"file":"recaptcha.component.d.ts","sources":["recaptcha.component.d.ts"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA","sourcesContent":["/// <reference types=\"grecaptcha\" />\nimport { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from \"@angular/core\";\nimport { RecaptchaLoaderService } from \"./recaptcha-loader.service\";\nimport { RecaptchaSettings } from \"./recaptcha-settings\";\nexport declare type NeverUndefined<T> = T extends undefined ? never : T;\nexport declare type RecaptchaErrorParameters = Parameters<NeverUndefined<ReCaptchaV2.Parameters[\"error-callback\"]>>;\nexport declare class RecaptchaComponent implements AfterViewInit, OnDestroy {\n    private elementRef;\n    private loader;\n    private zone;\n    id: string;\n    siteKey: string;\n    theme: ReCaptchaV2.Theme;\n    type: ReCaptchaV2.Type;\n    size: ReCaptchaV2.Size;\n    tabIndex: number;\n    badge: ReCaptchaV2.Badge;\n    errorMode: \"handled\" | \"default\";\n    resolved: EventEmitter<string>;\n    error: EventEmitter<[]>;\n    /** @internal */\n    private subscription;\n    /** @internal */\n    private widget;\n    /** @internal */\n    private grecaptcha;\n    /** @internal */\n    private executeRequested;\n    constructor(elementRef: ElementRef, loader: RecaptchaLoaderService, zone: NgZone, settings?: RecaptchaSettings);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute(): void;\n    reset(): void;\n    /** @internal */\n    private expired;\n    /** @internal */\n    private errored;\n    /** @internal */\n    private captchaResponseCallback;\n    /** @internal */\n    private grecaptchaReset;\n    /** @internal */\n    private renderRecaptcha;\n}\n"]}